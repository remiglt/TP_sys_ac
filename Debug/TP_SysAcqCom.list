
TP_SysAcqCom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800cf90  0800cf90  0001cf90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4a8  0800d4a8  0002039c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4a8  0800d4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4b0  0800d4b0  0002039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4b0  0800d4b0  0001d4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4b4  0800d4b4  0001d4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000039c  20000000  0800d4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000039c  0800d854  0002039c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800d854  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198db  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf6  00000000  00000000  00039ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002920f  00000000  00000000  0003f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a20  00000000  00000000  00068637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f35  00000000  00000000  00080057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c0  00000000  00000000  00193fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000039c 	.word	0x2000039c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf74 	.word	0x0800cf74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003a0 	.word	0x200003a0
 800021c:	0800cf74 	.word	0x0800cf74

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint16_t*)&ch, 1, HAL_MAX_DELAY);
 8000fc4:	1d39      	adds	r1, r7, #4
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <__io_putchar+0x20>)
 8000fce:	f006 ff8c 	bl	8007eea <HAL_UART_Transmit>

	return ch;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000600 	.word	0x20000600

08000fe0 <HAL_TIM_IC_CaptureCallback>:
//=================================================================

//int16_t encoderPosition = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d105      	bne.n	8000ffc <HAL_TIM_IC_CaptureCallback+0x1c>
	{
		encoderCounter = __HAL_TIM_GET_COUNTER(htim);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000ffa:	601a      	str	r2, [r3, #0]
		//encoderPosition = (int16_t)encoderCounter;
	}

}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	2000051c 	.word	0x2000051c
 800100c:	20000740 	.word	0x20000740

08001010 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800101e:	f001 faae 	bl	800257e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001022:	f000 fa47 	bl	80014b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001026:	f000 fd4f 	bl	8001ac8 <MX_GPIO_Init>
	MX_DMA_Init();
 800102a:	f000 fd23 	bl	8001a74 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800102e:	f000 fcd5 	bl	80019dc <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001032:	f000 faf3 	bl	800161c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001036:	f000 fb91 	bl	800175c <MX_TIM2_Init>
	MX_ADC2_Init();
 800103a:	f000 fa87 	bl	800154c <MX_ADC2_Init>
	MX_TIM3_Init();
 800103e:	f000 fbdb 	bl	80017f8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001042:	f000 fc2f 	bl	80018a4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001046:	f000 fc7b 	bl	8001940 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2224      	movs	r2, #36	; 0x24
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f008 ff9f 	bl	8009f94 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	2240      	movs	r2, #64	; 0x40
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f008 ff98 	bl	8009f94 <memset>
 8001064:	4bb1      	ldr	r3, [pc, #708]	; (800132c <main+0x31c>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	2100      	movs	r1, #0
 800106e:	48b0      	ldr	r0, [pc, #704]	; (8001330 <main+0x320>)
 8001070:	f008 ff90 	bl	8009f94 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001074:	2201      	movs	r2, #1
 8001076:	49ad      	ldr	r1, [pc, #692]	; (800132c <main+0x31c>)
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <main+0x324>)
 800107a:	f006 ffcd 	bl	8008018 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f001 faee 	bl	8002660 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2266      	movs	r2, #102	; 0x66
 800108a:	49ab      	ldr	r1, [pc, #684]	; (8001338 <main+0x328>)
 800108c:	48a9      	ldr	r0, [pc, #676]	; (8001334 <main+0x324>)
 800108e:	f006 ff2c 	bl	8007eea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	2218      	movs	r2, #24
 8001098:	49a8      	ldr	r1, [pc, #672]	; (800133c <main+0x32c>)
 800109a:	48a6      	ldr	r0, [pc, #664]	; (8001334 <main+0x324>)
 800109c:	f006 ff25 	bl	8007eea <HAL_UART_Transmit>

	START_PWM();
 80010a0:	f000 fdbc 	bl	8001c1c <START_PWM>

	//Initialisation de l'ADC1
	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))
 80010a4:	217f      	movs	r1, #127	; 0x7f
 80010a6:	48a6      	ldr	r0, [pc, #664]	; (8001340 <main+0x330>)
 80010a8:	f003 f83c 	bl	8004124 <HAL_ADCEx_Calibration_Start>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <main+0xa6>
		Error_Handler();
 80010b2:	f000 fee7 	bl	8001e84 <Error_Handler>


	if(HAL_OK != HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, ADC_BUF_SIZE))
 80010b6:	2214      	movs	r2, #20
 80010b8:	49a2      	ldr	r1, [pc, #648]	; (8001344 <main+0x334>)
 80010ba:	48a1      	ldr	r0, [pc, #644]	; (8001340 <main+0x330>)
 80010bc:	f001 ff1e 	bl	8002efc <HAL_ADC_Start_DMA>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0xba>
		Error_Handler();
 80010c6:	f000 fedd 	bl	8001e84 <Error_Handler>
	//Initialisation de l'ADC
	if(HAL_OK != HAL_TIM_Base_Start(&htim2))
 80010ca:	489f      	ldr	r0, [pc, #636]	; (8001348 <main+0x338>)
 80010cc:	f004 ff4c 	bl	8005f68 <HAL_TIM_Base_Start>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <main+0xca>
		Error_Handler();
 80010d6:	f000 fed5 	bl	8001e84 <Error_Handler>

	if(HAL_OK != HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL))
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	489b      	ldr	r0, [pc, #620]	; (800134c <main+0x33c>)
 80010de:	f005 fad7 	bl	8006690 <HAL_TIM_Encoder_Start_IT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <main+0xdc>
		Error_Handler();
 80010e8:	f000 fecc 	bl	8001e84 <Error_Handler>

	QuickStart();
 80010ec:	f000 fdee 	bl	8001ccc <QuickStart>

	HAL_TIM_Base_Start_IT(&htim4);
 80010f0:	4897      	ldr	r0, [pc, #604]	; (8001350 <main+0x340>)
 80010f2:	f004 ffa9 	bl	8006048 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80010f6:	4897      	ldr	r0, [pc, #604]	; (8001354 <main+0x344>)
 80010f8:	f004 ffa6 	bl	8006048 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (flagADC1==1)
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <main+0x348>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d11c      	bne.n	800113e <main+0x12e>
		{
			//HAL_ADC_Stop_DMA(&hadc1);
			flagADC1=0;
 8001104:	4b94      	ldr	r3, [pc, #592]	; (8001358 <main+0x348>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
			for(idxADC1=0;idxADC1< ADC_BUF_SIZE; idxADC1++)
 800110a:	4b94      	ldr	r3, [pc, #592]	; (800135c <main+0x34c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e011      	b.n	8001136 <main+0x126>
			{
				ADC1_buffer_copy[idxADC1] = ADC1_buffer[idxADC1];
 8001112:	4b92      	ldr	r3, [pc, #584]	; (800135c <main+0x34c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4b90      	ldr	r3, [pc, #576]	; (800135c <main+0x34c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <main+0x334>)
 8001120:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001124:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <main+0x350>)
 8001126:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(idxADC1=0;idxADC1< ADC_BUF_SIZE; idxADC1++)
 800112a:	4b8c      	ldr	r3, [pc, #560]	; (800135c <main+0x34c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <main+0x34c>)
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	4b89      	ldr	r3, [pc, #548]	; (800135c <main+0x34c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b13      	cmp	r3, #19
 800113c:	d9e9      	bls.n	8001112 <main+0x102>


		}

		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 800113e:	4b89      	ldr	r3, [pc, #548]	; (8001364 <main+0x354>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d058      	beq.n	80011f8 <main+0x1e8>
			switch(uartRxBuffer[0]){
 8001146:	4b79      	ldr	r3, [pc, #484]	; (800132c <main+0x31c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0d      	cmp	r3, #13
 800114c:	d002      	beq.n	8001154 <main+0x144>
 800114e:	2b7f      	cmp	r3, #127	; 0x7f
 8001150:	d02f      	beq.n	80011b2 <main+0x1a2>
 8001152:	e03e      	b.n	80011d2 <main+0x1c2>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	2203      	movs	r2, #3
 800115a:	4983      	ldr	r1, [pc, #524]	; (8001368 <main+0x358>)
 800115c:	4875      	ldr	r0, [pc, #468]	; (8001334 <main+0x324>)
 800115e:	f006 fec4 	bl	8007eea <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001168:	4413      	add	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	497d      	ldr	r1, [pc, #500]	; (800136c <main+0x35c>)
 8001178:	4618      	mov	r0, r3
 800117a:	f009 fbb5 	bl	800a8e8 <strtok>
 800117e:	4603      	mov	r3, r0
 8001180:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8001182:	e00e      	b.n	80011a2 <main+0x192>
					argv[argc++] = token;
 8001184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	673a      	str	r2, [r7, #112]	; 0x70
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	3378      	adds	r3, #120	; 0x78
 800118e:	443b      	add	r3, r7
 8001190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001192:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 8001196:	4975      	ldr	r1, [pc, #468]	; (800136c <main+0x35c>)
 8001198:	2000      	movs	r0, #0
 800119a:	f009 fba5 	bl	800a8e8 <strtok>
 800119e:	4603      	mov	r3, r0
 80011a0:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80011a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ed      	bne.n	8001184 <main+0x174>
				}

				idx_cmd = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80011b0:	e01f      	b.n	80011f2 <main+0x1e2>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80011b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	677a      	str	r2, [r7, #116]	; 0x74
 80011b8:	3378      	adds	r3, #120	; 0x78
 80011ba:	443b      	add	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2201      	movs	r2, #1
 80011c8:	4958      	ldr	r1, [pc, #352]	; (800132c <main+0x31c>)
 80011ca:	485a      	ldr	r0, [pc, #360]	; (8001334 <main+0x324>)
 80011cc:	f006 fe8d 	bl	8007eea <HAL_UART_Transmit>
				break;
 80011d0:	e00f      	b.n	80011f2 <main+0x1e2>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80011d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	677a      	str	r2, [r7, #116]	; 0x74
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <main+0x31c>)
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	3378      	adds	r3, #120	; 0x78
 80011de:	443b      	add	r3, r7
 80011e0:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	4950      	ldr	r1, [pc, #320]	; (800132c <main+0x31c>)
 80011ec:	4851      	ldr	r0, [pc, #324]	; (8001334 <main+0x324>)
 80011ee:	f006 fe7c 	bl	8007eea <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80011f2:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <main+0x354>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80011f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f43f af7e 	beq.w	80010fc <main+0xec>
			//=============================================================================================
			if(strcmp(argv[0],"set")==0){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	495b      	ldr	r1, [pc, #364]	; (8001370 <main+0x360>)
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f80b 	bl	8000220 <strcmp>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d12d      	bne.n	800126c <main+0x25c>
				if(strcmp(argv[1],"PA5")==0){
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4958      	ldr	r1, [pc, #352]	; (8001374 <main+0x364>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f803 	bl	8000220 <strcmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d11d      	bne.n	800125c <main+0x24c>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fe88 	bl	8009f38 <atoi>
 8001228:	4603      	mov	r3, r0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	2120      	movs	r1, #32
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f003 fdce 	bl	8004dd4 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4618      	mov	r0, r3
 800123c:	f008 fe7c 	bl	8009f38 <atoi>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	494c      	ldr	r1, [pc, #304]	; (8001378 <main+0x368>)
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <main+0x320>)
 8001248:	f009 fb2e 	bl	800a8a8 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	2220      	movs	r2, #32
 8001252:	4937      	ldr	r1, [pc, #220]	; (8001330 <main+0x320>)
 8001254:	4837      	ldr	r0, [pc, #220]	; (8001334 <main+0x324>)
 8001256:	f006 fe48 	bl	8007eea <HAL_UART_Transmit>
 800125a:	e102      	b.n	8001462 <main+0x452>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2214      	movs	r2, #20
 8001262:	4946      	ldr	r1, [pc, #280]	; (800137c <main+0x36c>)
 8001264:	4833      	ldr	r0, [pc, #204]	; (8001334 <main+0x324>)
 8001266:	f006 fe40 	bl	8007eea <HAL_UART_Transmit>
 800126a:	e0fa      	b.n	8001462 <main+0x452>
				}
			}

			//=============================================================================================

			else if(strcmp(argv[0],"get")==0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4944      	ldr	r1, [pc, #272]	; (8001380 <main+0x370>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe ffd5 	bl	8000220 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <main+0x27c>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2214      	movs	r2, #20
 8001282:	493e      	ldr	r1, [pc, #248]	; (800137c <main+0x36c>)
 8001284:	482b      	ldr	r0, [pc, #172]	; (8001334 <main+0x324>)
 8001286:	f006 fe30 	bl	8007eea <HAL_UART_Transmit>
 800128a:	e0ea      	b.n	8001462 <main+0x452>
			}

			//=============================================================================================

			else if(strcmp(argv[0],"start")==0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	493d      	ldr	r1, [pc, #244]	; (8001384 <main+0x374>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffc5 	bl	8000220 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d116      	bne.n	80012ca <main+0x2ba>
			{
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	220b      	movs	r2, #11
 80012a2:	4939      	ldr	r1, [pc, #228]	; (8001388 <main+0x378>)
 80012a4:	4823      	ldr	r0, [pc, #140]	; (8001334 <main+0x324>)
 80012a6:	f006 fe20 	bl	8007eea <HAL_UART_Transmit>
				HAL_GPIO_WritePin(ISO_Reset_Pinout_GPIO_Port, ISO_Reset_Pinout_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	4837      	ldr	r0, [pc, #220]	; (800138c <main+0x37c>)
 80012b0:	f003 fd90 	bl	8004dd4 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f001 f9d3 	bl	8002660 <HAL_Delay>
				HAL_GPIO_WritePin(ISO_Reset_Pinout_GPIO_Port, ISO_Reset_Pinout_Pin, RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2120      	movs	r1, #32
 80012be:	4833      	ldr	r0, [pc, #204]	; (800138c <main+0x37c>)
 80012c0:	f003 fd88 	bl	8004dd4 <HAL_GPIO_WritePin>

				START_PWM();
 80012c4:	f000 fcaa 	bl	8001c1c <START_PWM>
 80012c8:	e0cb      	b.n	8001462 <main+0x452>



			//=============================================================================================

			else if(strcmp(argv[0],"stop")==0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4930      	ldr	r1, [pc, #192]	; (8001390 <main+0x380>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ffa6 	bl	8000220 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d117      	bne.n	800130a <main+0x2fa>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	220c      	movs	r2, #12
 80012e0:	492c      	ldr	r1, [pc, #176]	; (8001394 <main+0x384>)
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <main+0x324>)
 80012e4:	f006 fe01 	bl	8007eea <HAL_UART_Transmit>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	482b      	ldr	r0, [pc, #172]	; (8001398 <main+0x388>)
 80012ec:	f005 f88e 	bl	800640c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	4829      	ldr	r0, [pc, #164]	; (8001398 <main+0x388>)
 80012f4:	f006 fb98 	bl	8007a28 <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80012f8:	2104      	movs	r1, #4
 80012fa:	4827      	ldr	r0, [pc, #156]	; (8001398 <main+0x388>)
 80012fc:	f005 f886 	bl	800640c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001300:	2104      	movs	r1, #4
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <main+0x388>)
 8001304:	f006 fb90 	bl	8007a28 <HAL_TIMEx_PWMN_Stop>
 8001308:	e0ab      	b.n	8001462 <main+0x452>
			}


			//=============================================================================================

			else if(strcmp(argv[0],"help")==0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4923      	ldr	r1, [pc, #140]	; (800139c <main+0x38c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff86 	bl	8000220 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d144      	bne.n	80013a4 <main+0x394>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	2259      	movs	r2, #89	; 0x59
 8001320:	491f      	ldr	r1, [pc, #124]	; (80013a0 <main+0x390>)
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <main+0x324>)
 8001324:	f006 fde1 	bl	8007eea <HAL_UART_Transmit>
 8001328:	e09b      	b.n	8001462 <main+0x452>
 800132a:	bf00      	nop
 800132c:	20000694 	.word	0x20000694
 8001330:	20000698 	.word	0x20000698
 8001334:	20000600 	.word	0x20000600
 8001338:	20000018 	.word	0x20000018
 800133c:	20000000 	.word	0x20000000
 8001340:	200003b8 	.word	0x200003b8
 8001344:	200006e0 	.word	0x200006e0
 8001348:	200004d0 	.word	0x200004d0
 800134c:	2000051c 	.word	0x2000051c
 8001350:	20000568 	.word	0x20000568
 8001354:	200005b4 	.word	0x200005b4
 8001358:	20000730 	.word	0x20000730
 800135c:	20000731 	.word	0x20000731
 8001360:	20000708 	.word	0x20000708
 8001364:	20000690 	.word	0x20000690
 8001368:	20000080 	.word	0x20000080
 800136c:	0800cf90 	.word	0x0800cf90
 8001370:	0800cf94 	.word	0x0800cf94
 8001374:	0800cf98 	.word	0x0800cf98
 8001378:	0800cf9c 	.word	0x0800cf9c
 800137c:	20000084 	.word	0x20000084
 8001380:	0800cfb8 	.word	0x0800cfb8
 8001384:	0800cfbc 	.word	0x0800cfbc
 8001388:	200001a8 	.word	0x200001a8
 800138c:	48000400 	.word	0x48000400
 8001390:	0800cfc4 	.word	0x0800cfc4
 8001394:	200001b4 	.word	0x200001b4
 8001398:	20000484 	.word	0x20000484
 800139c:	0800cfcc 	.word	0x0800cfcc
 80013a0:	20000098 	.word	0x20000098



			//=============================================================================================

			else if(strcmp(argv[0],"pinout")==0)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4934      	ldr	r1, [pc, #208]	; (8001478 <main+0x468>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff39 	bl	8000220 <strcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <main+0x3b4>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	22b2      	movs	r2, #178	; 0xb2
 80013ba:	4930      	ldr	r1, [pc, #192]	; (800147c <main+0x46c>)
 80013bc:	4830      	ldr	r0, [pc, #192]	; (8001480 <main+0x470>)
 80013be:	f006 fd94 	bl	8007eea <HAL_UART_Transmit>
 80013c2:	e04e      	b.n	8001462 <main+0x452>
			}


			//=============================================================================================
			else if(strcmp(argv[0],"alpha")==0)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	492f      	ldr	r1, [pc, #188]	; (8001484 <main+0x474>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe ff29 	bl	8000220 <strcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d108      	bne.n	80013e6 <main+0x3d6>
			{

				Set_Alpha(atoi(argv[1]));
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 fdae 	bl	8009f38 <atoi>
 80013dc:	4603      	mov	r3, r0
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fc32 	bl	8001c48 <Set_Alpha>
 80013e4:	e03d      	b.n	8001462 <main+0x452>
			}

			//=============================================================================================
			else if(strcmp(argv[0],"ADC")==0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4927      	ldr	r1, [pc, #156]	; (8001488 <main+0x478>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff18 	bl	8000220 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <main+0x400>
			{
				GetCurrent();
 80013f6:	f000 fc83 	bl	8001d00 <GetCurrent>
				printf("Courant moteur:%.3f mA\r\n", currentADC);
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <main+0x47c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8da 	bl	80005b8 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4821      	ldr	r0, [pc, #132]	; (8001490 <main+0x480>)
 800140a:	f009 fa35 	bl	800a878 <iprintf>
 800140e:	e028      	b.n	8001462 <main+0x452>
			}


			//=============================================================================================

			else if(strcmp(argv[0],"p")==0)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4920      	ldr	r1, [pc, #128]	; (8001494 <main+0x484>)
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ff03 	bl	8000220 <strcmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <main+0x41e>
			{
				printf("Pos : %d\r\n", encoderCounter );
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <main+0x488>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	481d      	ldr	r0, [pc, #116]	; (800149c <main+0x48c>)
 8001428:	f009 fa26 	bl	800a878 <iprintf>
 800142c:	e019      	b.n	8001462 <main+0x452>
			}

			//=============================================================================================

			else if(strcmp(argv[0],"speed")==0)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	491b      	ldr	r1, [pc, #108]	; (80014a0 <main+0x490>)
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fef4 	bl	8000220 <strcmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10a      	bne.n	8001454 <main+0x444>
			{
				printf("Speed : %f\r\n",speed);
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <main+0x494>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f8b8 	bl	80005b8 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4816      	ldr	r0, [pc, #88]	; (80014a8 <main+0x498>)
 800144e:	f009 fa13 	bl	800a878 <iprintf>
 8001452:	e006      	b.n	8001462 <main+0x452>
			}

			//=============================================================================================

			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2214      	movs	r2, #20
 800145a:	4914      	ldr	r1, [pc, #80]	; (80014ac <main+0x49c>)
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <main+0x470>)
 800145e:	f006 fd44 	bl	8007eea <HAL_UART_Transmit>
			}




			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2218      	movs	r2, #24
 8001468:	4911      	ldr	r1, [pc, #68]	; (80014b0 <main+0x4a0>)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <main+0x470>)
 800146c:	f006 fd3d 	bl	8007eea <HAL_UART_Transmit>
			newCmdReady = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	66bb      	str	r3, [r7, #104]	; 0x68
		if (flagADC1==1)
 8001474:	e642      	b.n	80010fc <main+0xec>
 8001476:	bf00      	nop
 8001478:	0800cfd4 	.word	0x0800cfd4
 800147c:	200000f4 	.word	0x200000f4
 8001480:	20000600 	.word	0x20000600
 8001484:	0800cfdc 	.word	0x0800cfdc
 8001488:	0800cfe4 	.word	0x0800cfe4
 800148c:	20000738 	.word	0x20000738
 8001490:	0800cfe8 	.word	0x0800cfe8
 8001494:	0800d004 	.word	0x0800d004
 8001498:	20000740 	.word	0x20000740
 800149c:	0800d008 	.word	0x0800d008
 80014a0:	0800d014 	.word	0x0800d014
 80014a4:	2000073c 	.word	0x2000073c
 80014a8:	0800d01c 	.word	0x0800d01c
 80014ac:	20000084 	.word	0x20000084
 80014b0:	20000000 	.word	0x20000000

080014b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	; 0x50
 80014b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2238      	movs	r2, #56	; 0x38
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fd66 	bl	8009f94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f003 fcb8 	bl	8004e4c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80014f6:	2355      	movs	r3, #85	; 0x55
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd52 	bl	8004fb4 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001516:	f000 fcb5 	bl	8001e84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2303      	movs	r3, #3
 8001520:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f856 	bl	80055e4 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800153e:	f000 fca1 	bl	8001e84 <Error_Handler>
	}
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	; 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f008 fd1b 	bl	8009f94 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001560:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <MX_ADC2_Init+0xc8>)
 8001562:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001566:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800156a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_ADC2_Init+0xc4>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_ADC2_Init+0xc4>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001586:	2204      	movs	r2, #4
 8001588:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_ADC2_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001592:	2200      	movs	r2, #0
 8001594:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_ADC2_Init+0xc4>)
 8001598:	2201      	movs	r2, #1
 800159a:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_ADC2_Init+0xc4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015a6:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015cc:	f001 fad4 	bl	8002b78 <HAL_ADC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 80015d6:	f000 fc55 	bl	8001e84 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_ADC2_Init+0xcc>)
 80015dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015de:	2306      	movs	r3, #6
 80015e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e6:	237f      	movs	r3, #127	; 0x7f
 80015e8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ea:	2304      	movs	r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_ADC2_Init+0xc4>)
 80015f8:	f001 ffd2 	bl	80035a0 <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC2_Init+0xba>
	{
		Error_Handler();
 8001602:	f000 fc3f 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003b8 	.word	0x200003b8
 8001614:	50000100 	.word	0x50000100
 8001618:	08600004 	.word	0x08600004

0800161c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b098      	sub	sp, #96	; 0x60
 8001620:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2234      	movs	r2, #52	; 0x34
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f008 fca3 	bl	8009f94 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <MX_TIM1_Init+0x138>)
 8001650:	4a41      	ldr	r2, [pc, #260]	; (8001758 <MX_TIM1_Init+0x13c>)
 8001652:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001654:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <MX_TIM1_Init+0x138>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <MX_TIM1_Init+0x138>)
 800165c:	2220      	movs	r2, #32
 800165e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5312;
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <MX_TIM1_Init+0x138>)
 8001662:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001666:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <MX_TIM1_Init+0x138>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <MX_TIM1_Init+0x138>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <MX_TIM1_Init+0x138>)
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800167a:	4836      	ldr	r0, [pc, #216]	; (8001754 <MX_TIM1_Init+0x138>)
 800167c:	f004 fd5c 	bl	8006138 <HAL_TIM_PWM_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001686:	f000 fbfd 	bl	8001e84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800169a:	4619      	mov	r1, r3
 800169c:	482d      	ldr	r0, [pc, #180]	; (8001754 <MX_TIM1_Init+0x138>)
 800169e:	f006 fa21 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 80016a8:	f000 fbec 	bl	8001e84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 2656;
 80016b0:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4820      	ldr	r0, [pc, #128]	; (8001754 <MX_TIM1_Init+0x138>)
 80016d4:	f005 fa0a 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 80016de:	f000 fbd1 	bl	8001e84 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2204      	movs	r2, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	481a      	ldr	r0, [pc, #104]	; (8001754 <MX_TIM1_Init+0x138>)
 80016ec:	f005 f9fe 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xde>
	{
		Error_Handler();
 80016f6:	f000 fbc5 	bl	8001e84 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 202;
 8001706:	23ca      	movs	r3, #202	; 0xca
 8001708:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800170e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001712:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <MX_TIM1_Init+0x138>)
 8001738:	f006 fa6a 	bl	8007c10 <HAL_TIMEx_ConfigBreakDeadTime>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x12a>
	{
		Error_Handler();
 8001742:	f000 fb9f 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <MX_TIM1_Init+0x138>)
 8001748:	f000 fd12 	bl	8002170 <HAL_TIM_MspPostInit>

}
 800174c:	bf00      	nop
 800174e:	3760      	adds	r7, #96	; 0x60
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000484 	.word	0x20000484
 8001758:	40012c00 	.word	0x40012c00

0800175c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_TIM2_Init+0x98>)
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_TIM2_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_TIM2_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_TIM2_Init+0x98>)
 8001790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001794:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_TIM2_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_TIM2_Init+0x98>)
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <MX_TIM2_Init+0x98>)
 80017a4:	f004 fb88 	bl	8005eb8 <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80017ae:	f000 fb69 	bl	8001e84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_TIM2_Init+0x98>)
 80017c0:	f005 faa8 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80017ca:	f000 fb5b 	bl	8001e84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ce:	2320      	movs	r3, #32
 80017d0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM2_Init+0x98>)
 80017dc:	f006 f982 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80017e6:	f000 fb4d 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200004d0 	.word	0x200004d0

080017f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2224      	movs	r2, #36	; 0x24
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fbc4 	bl	8009f94 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_TIM3_Init+0xa4>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_TIM3_Init+0xa8>)
 800181a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_TIM3_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_TIM3_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_TIM3_Init+0xa4>)
 800182a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_TIM3_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_TIM3_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800183c:	2303      	movs	r3, #3
 800183e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001854:	2301      	movs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_TIM3_Init+0xa4>)
 8001868:	f004 fe6c 	bl	8006544 <HAL_TIM_Encoder_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 8001872:	f000 fb07 	bl	8001e84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_TIM3_Init+0xa4>)
 8001884:	f006 f92e 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 800188e:	f000 faf9 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	; 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000051c 	.word	0x2000051c
 80018a0:	40000400 	.word	0x40000400

080018a4 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_TIM4_Init+0x94>)
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <MX_TIM4_Init+0x98>)
 80018c6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 169;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_TIM4_Init+0x94>)
 80018ca:	22a9      	movs	r2, #169	; 0xa9
 80018cc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_TIM4_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_TIM4_Init+0x94>)
 80018d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80018da:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_TIM4_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_TIM4_Init+0x94>)
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_TIM4_Init+0x94>)
 80018ea:	f004 fae5 	bl	8005eb8 <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 80018f4:	f000 fac6 	bl	8001e84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM4_Init+0x94>)
 8001906:	f005 fa05 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001910:	f000 fab8 	bl	8001e84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_TIM4_Init+0x94>)
 8001922:	f006 f8df 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 800192c:	f000 faaa 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000568 	.word	0x20000568
 800193c:	40000800 	.word	0x40000800

08001940 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM5_Init+0x94>)
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <MX_TIM5_Init+0x98>)
 8001962:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_TIM5_Init+0x94>)
 8001966:	22a9      	movs	r2, #169	; 0xa9
 8001968:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM5_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM5_Init+0x94>)
 8001972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001976:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_TIM5_Init+0x94>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_TIM5_Init+0x94>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <MX_TIM5_Init+0x94>)
 8001986:	f004 fa97 	bl	8005eb8 <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 8001990:	f000 fa78 	bl	8001e84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM5_Init+0x94>)
 80019a2:	f005 f9b7 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 80019ac:	f000 fa6a 	bl	8001e84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM5_Init+0x94>)
 80019be:	f006 f891 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 80019c8:	f000 fa5c 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200005b4 	.word	0x200005b4
 80019d8:	40000c00 	.word	0x40000c00

080019dc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <MX_USART2_UART_Init+0x94>)
 80019e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a26:	f006 fa10 	bl	8007e4a <HAL_UART_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a30:	f000 fa28 	bl	8001e84 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a34:	2100      	movs	r1, #0
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a38:	f008 f9b3 	bl	8009da2 <HAL_UARTEx_SetTxFifoThreshold>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8001a42:	f000 fa1f 	bl	8001e84 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a46:	2100      	movs	r1, #0
 8001a48:	4808      	ldr	r0, [pc, #32]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a4a:	f008 f9e8 	bl	8009e1e <HAL_UARTEx_SetRxFifoThreshold>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8001a54:	f000 fa16 	bl	8001e84 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_USART2_UART_Init+0x90>)
 8001a5a:	f008 f969 	bl	8009d30 <HAL_UARTEx_DisableFifoMode>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001a64:	f000 fa0e 	bl	8001e84 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000600 	.word	0x20000600
 8001a70:	40004400 	.word	0x40004400

08001a74 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6493      	str	r3, [r2, #72]	; 0x48
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_DMA_Init+0x50>)
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	200b      	movs	r0, #11
 8001ab0:	f002 fca7 	bl	8004402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab4:	200b      	movs	r0, #11
 8001ab6:	f002 fcbe 	bl	8004436 <HAL_NVIC_EnableIRQ>

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <MX_GPIO_Init+0xfc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2120      	movs	r1, #32
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f003 f945 	bl	8004dd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISO_Reset_Pinout_GPIO_Port, ISO_Reset_Pinout_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <MX_GPIO_Init+0x100>)
 8001b50:	f003 f940 	bl	8004dd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_GPIO_Init+0x104>)
 8001b6c:	f002 ffb0 	bl	8004ad0 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001b70:	2320      	movs	r3, #32
 8001b72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f002 ffa1 	bl	8004ad0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISO_Reset_Pinout_Pin */
	GPIO_InitStruct.Pin = ISO_Reset_Pinout_Pin;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(ISO_Reset_Pinout_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <MX_GPIO_Init+0x100>)
 8001ba6:	f002 ff93 	bl	8004ad0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2028      	movs	r0, #40	; 0x28
 8001bb0:	f002 fc27 	bl	8004402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bb4:	2028      	movs	r0, #40	; 0x28
 8001bb6:	f002 fc3e 	bl	8004436 <HAL_NVIC_EnableIRQ>

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800

08001bd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_UART_RxCpltCallback+0x20>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001bde:	2201      	movs	r2, #1
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <HAL_UART_RxCpltCallback+0x24>)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_UART_RxCpltCallback+0x28>)
 8001be4:	f006 fa18 	bl	8008018 <HAL_UART_Receive_IT>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000690 	.word	0x20000690
 8001bf4:	20000694 	.word	0x20000694
 8001bf8:	20000600 	.word	0x20000600

08001bfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		SpeedCalc();
 8001c0c:	f000 f8fc 	bl	8001e08 <SpeedCalc>
	}
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000568 	.word	0x20000568

08001c1c <START_PWM>:
 * @Note Cette fonction permet de démarrer les 4 signaux PWM nécessaires au fonctionnement du moteur
 * @param None
 * @retval None
 */
void START_PWM(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c20:	2100      	movs	r1, #0
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <START_PWM+0x28>)
 8001c24:	f004 fae0 	bl	80061e8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <START_PWM+0x28>)
 8001c2c:	f005 fe3a 	bl	80078a4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c30:	2104      	movs	r1, #4
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <START_PWM+0x28>)
 8001c34:	f004 fad8 	bl	80061e8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <START_PWM+0x28>)
 8001c3c:	f005 fe32 	bl	80078a4 <HAL_TIMEx_PWMN_Start>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000484 	.word	0x20000484

08001c48 <Set_Alpha>:
 * @Note Cette fonction permet de modifier la valeur du rapport cyclique de nos signaux PWM (en %)
 * @param int alpha : valeur comprise entre 0 et 100
 * @retval None
 */
void Set_Alpha(int _alpha)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	alphaValue1 = (_alpha*TIM1->ARR)/100;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <Set_Alpha+0x74>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <Set_Alpha+0x78>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <Set_Alpha+0x7c>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
	alphaValue2 = TIM1->ARR - alphaValue1;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <Set_Alpha+0x74>)
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <Set_Alpha+0x7c>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <Set_Alpha+0x80>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
	TIM1->CCR1 = (int) alphaValue1;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <Set_Alpha+0x7c>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <Set_Alpha+0x74>)
 8001c98:	ee17 2a90 	vmov	r2, s15
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (int) alphaValue2;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <Set_Alpha+0x80>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <Set_Alpha+0x74>)
 8001caa:	ee17 2a90 	vmov	r2, s15
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	200006d8 	.word	0x200006d8
 8001cc8:	200006dc 	.word	0x200006dc

08001ccc <QuickStart>:
 * @Note Permet de démarrer rapidement le moteur avec un rapport cyclique de 60%
 * @param None
 * @retval None
 */
void QuickStart(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	START_PWM();
 8001cd0:	f7ff ffa4 	bl	8001c1c <START_PWM>
	Set_Alpha(56.0);
 8001cd4:	2038      	movs	r0, #56	; 0x38
 8001cd6:	f7ff ffb7 	bl	8001c48 <Set_Alpha>

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	flagADC1 = 1;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_ADC_ConvCpltCallback+0x1c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000730 	.word	0x20000730

08001d00 <GetCurrent>:

void GetCurrent()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	ADC1ValueMoy = 0;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <GetCurrent+0x5c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
	for(idxADC1bis=0 ; idxADC1bis < ADC_BUF_SIZE ; idxADC1bis++)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <GetCurrent+0x60>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e011      	b.n	8001d36 <GetCurrent+0x36>
	{
		//printf("Moy : %d\r\n", ADC1ValueMoy);

		ADC1ValueMoy = ADC1ValueMoy + ADC1_buffer_copy[idxADC1bis];
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <GetCurrent+0x60>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <GetCurrent+0x64>)
 8001d1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <GetCurrent+0x5c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <GetCurrent+0x5c>)
 8001d28:	6013      	str	r3, [r2, #0]
	for(idxADC1bis=0 ; idxADC1bis < ADC_BUF_SIZE ; idxADC1bis++)
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <GetCurrent+0x60>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <GetCurrent+0x60>)
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <GetCurrent+0x60>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b13      	cmp	r3, #19
 8001d3c:	d9e9      	bls.n	8001d12 <GetCurrent+0x12>
	}
	//printf("Moy Totale : %d\r\n", ADC1ValueMoy);
	ADC1ValueMoy = ADC1ValueMoy/ADC_BUF_SIZE;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <GetCurrent+0x5c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <GetCurrent+0x68>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <GetCurrent+0x5c>)
 8001d4c:	6013      	str	r3, [r2, #0]
	//printf("MoyFinale : %d\r\n", ADC1ValueMoy);

	CurrentCalcul(ADC1ValueMoy);
 8001d4e:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <GetCurrent+0x5c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f80c 	bl	8001d70 <CurrentCalcul>
	//printf("Courant moteur:%.3f mA\r\n", currentADC);
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000734 	.word	0x20000734
 8001d60:	20000732 	.word	0x20000732
 8001d64:	20000708 	.word	0x20000708
 8001d68:	cccccccd 	.word	0xcccccccd
 8001d6c:	00000000 	.word	0x00000000

08001d70 <CurrentCalcul>:
 * @Note Envoie dans la variable currentADC la valeur convertie du courant moteur en mA
 * @param uint32_t moy : moyenne des valeurs brutes contenues dans le buffer de l'ADC
 * @retval None
 */
void CurrentCalcul(uint32_t moy)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	currentADC = 1000*(moy/4095.0)*3.3;
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fbfb 	bl	8000574 <__aeabi_ui2d>
 8001d7e:	a31f      	add	r3, pc, #124	; (adr r3, 8001dfc <CurrentCalcul+0x8c>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fd9a 	bl	80008bc <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <CurrentCalcul+0x80>)
 8001d96:	f7fe fc67 	bl	8000668 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a311      	add	r3, pc, #68	; (adr r3, 8001de8 <CurrentCalcul+0x78>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc5e 	bl	8000668 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff30 	bl	8000c18 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <CurrentCalcul+0x84>)
 8001dbc:	6013      	str	r3, [r2, #0]
	currentADC = (currentADC-2500)*12;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <CurrentCalcul+0x84>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001df8 <CurrentCalcul+0x88>
 8001dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dcc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <CurrentCalcul+0x84>)
 8001dd6:	edc3 7a00 	vstr	s15, [r3]
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	f3af 8000 	nop.w
 8001de8:	66666666 	.word	0x66666666
 8001dec:	400a6666 	.word	0x400a6666
 8001df0:	408f4000 	.word	0x408f4000
 8001df4:	20000738 	.word	0x20000738
 8001df8:	451c4000 	.word	0x451c4000
 8001dfc:	00000000 	.word	0x00000000
 8001e00:	40affe00 	.word	0x40affe00
 8001e04:	00000000 	.word	0x00000000

08001e08 <SpeedCalc>:
 * @Note Envoie dans la variable speed la valeur convertie de la vitesse de rotation du moteur en tr/s
 * @param None
 * @retval None
 */
void SpeedCalc()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	encoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <SpeedCalc+0x70>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <SpeedCalc+0x74>)
 8001e16:	601a      	str	r2, [r3, #0]
	speed = (ENCODER_MEDIAN_VALUE - encoderCounter)/0.01/4095;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <SpeedCalc+0x74>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbb7 	bl	8000594 <__aeabi_i2d>
 8001e26:	a310      	add	r3, pc, #64	; (adr r3, 8001e68 <SpeedCalc+0x60>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fd46 	bl	80008bc <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	a30d      	add	r3, pc, #52	; (adr r3, 8001e70 <SpeedCalc+0x68>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fd3d 	bl	80008bc <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fee5 	bl	8000c18 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <SpeedCalc+0x78>)
 8001e52:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3,ENCODER_MEDIAN_VALUE);
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <SpeedCalc+0x70>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	f3af 8000 	nop.w
 8001e68:	47ae147b 	.word	0x47ae147b
 8001e6c:	3f847ae1 	.word	0x3f847ae1
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40affe00 	.word	0x40affe00
 8001e78:	2000051c 	.word	0x2000051c
 8001e7c:	20000740 	.word	0x20000740
 8001e80:	2000073c 	.word	0x2000073c

08001e84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e88:	b672      	cpsid	i
}
 8001e8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e8c:	e7fe      	b.n	8001e8c <Error_Handler+0x8>
	...

08001e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_MspInit+0x44>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_MspInit+0x44>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_MspInit+0x44>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_MspInit+0x44>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_MspInit+0x44>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_MspInit+0x44>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ec6:	f003 f865 	bl	8004f94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09e      	sub	sp, #120	; 0x78
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2254      	movs	r2, #84	; 0x54
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f008 f84b 	bl	8009f94 <memset>
  if(hadc->Instance==ADC2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_ADC_MspInit+0x108>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d167      	bne.n	8001fd8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f12:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fd7f 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f24:	f7ff ffae 	bl	8001e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_ADC_MspInit+0x10c>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f002 fdaf 	bl	8004ad0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_ADC_MspInit+0x114>)
 8001f76:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f7a:	2224      	movs	r2, #36	; 0x24
 8001f7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001fae:	f002 fa5d 	bl	800446c <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001fb8:	f7ff ff64 	bl	8001e84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_ADC_MspInit+0x110>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2012      	movs	r0, #18
 8001fce:	f002 fa18 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fd2:	2012      	movs	r0, #18
 8001fd4:	f002 fa2f 	bl	8004436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	3778      	adds	r7, #120	; 0x78
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	50000100 	.word	0x50000100
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	20000424 	.word	0x20000424
 8001fec:	40020008 	.word	0x40020008

08001ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_TIM_PWM_MspInit+0x38>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d10c      	bne.n	800205c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800205a:	e032      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_TIM_Base_MspInit+0xa0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201e      	movs	r0, #30
 8002084:	f002 f9bd 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002088:	201e      	movs	r0, #30
 800208a:	f002 f9d4 	bl	8004436 <HAL_NVIC_EnableIRQ>
}
 800208e:	e018      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_TIM_Base_MspInit+0xa4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_TIM_Base_MspInit+0x9c>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2032      	movs	r0, #50	; 0x32
 80020b8:	f002 f9a3 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020bc:	2032      	movs	r0, #50	; 0x32
 80020be:	f002 f9ba 	bl	8004436 <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00

080020d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <HAL_TIM_Encoder_MspInit+0x8c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d12f      	bne.n	800215a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_TIM_Encoder_MspInit+0x90>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800213a:	2302      	movs	r3, #2
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <HAL_TIM_Encoder_MspInit+0x94>)
 8002146:	f002 fcc3 	bl	8004ad0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	201d      	movs	r0, #29
 8002150:	f002 f957 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002154:	201d      	movs	r0, #29
 8002156:	f002 f96e 	bl	8004436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40000400 	.word	0x40000400
 8002168:	40021000 	.word	0x40021000
 800216c:	48000800 	.word	0x48000800

08002170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_TIM_MspPostInit+0x68>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11d      	bne.n	80021ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_TIM_MspPostInit+0x6c>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_TIM_MspPostInit+0x6c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_TIM_MspPostInit+0x6c>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80021aa:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80021ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021bc:	2306      	movs	r3, #6
 80021be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f002 fc81 	bl	8004ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b09e      	sub	sp, #120	; 0x78
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2254      	movs	r2, #84	; 0x54
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fec7 	bl	8009f94 <memset>
  if(huart->Instance==USART2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_UART_MspInit+0xb8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d13e      	bne.n	800228e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002210:	2302      	movs	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fbfd 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002228:	f7ff fe2c 	bl	8001e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_UART_MspInit+0xbc>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_UART_MspInit+0xbc>)
 8002232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_UART_MspInit+0xbc>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_UART_MspInit+0xbc>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_UART_MspInit+0xbc>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_UART_MspInit+0xbc>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800225c:	230c      	movs	r3, #12
 800225e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226c:	2307      	movs	r3, #7
 800226e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f002 fc29 	bl	8004ad0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2026      	movs	r0, #38	; 0x26
 8002284:	f002 f8bd 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002288:	2026      	movs	r0, #38	; 0x26
 800228a:	f002 f8d4 	bl	8004436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3778      	adds	r7, #120	; 0x78
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40004400 	.word	0x40004400
 800229c:	40021000 	.word	0x40021000

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f000 f99a 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA1_Channel1_IRQHandler+0x10>)
 80022fa:	f002 fa9a 	bl	8004832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000424 	.word	0x20000424

08002308 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <ADC1_2_IRQHandler+0x10>)
 800230e:	f000 fec9 	bl	80030a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003b8 	.word	0x200003b8

0800231c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <TIM3_IRQHandler+0x10>)
 8002322:	f004 fa63 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000051c 	.word	0x2000051c

08002330 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM4_IRQHandler+0x10>)
 8002336:	f004 fa59 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000568 	.word	0x20000568

08002344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <USART2_IRQHandler+0x10>)
 800234a:	f005 febb 	bl	80080c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000600 	.word	0x20000600

08002358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800235c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002360:	f002 fd50 	bl	8004e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <TIM5_IRQHandler+0x10>)
 800236e:	f004 fa3d 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200005b4 	.word	0x200005b4

0800237c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_kill>:

int _kill(int pid, int sig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002396:	f007 fdd3 	bl	8009f40 <__errno>
 800239a:	4603      	mov	r3, r0
 800239c:	2216      	movs	r2, #22
 800239e:	601a      	str	r2, [r3, #0]
	return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_exit>:

void _exit (int status)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffe7 	bl	800238c <_kill>
	while (1) {}		/* Make sure we hang here */
 80023be:	e7fe      	b.n	80023be <_exit+0x12>

080023c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e00a      	b.n	80023e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023d2:	f3af 8000 	nop.w
 80023d6:	4601      	mov	r1, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	60ba      	str	r2, [r7, #8]
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dbf0      	blt.n	80023d2 <_read+0x12>
	}

return len;
 80023f0:	687b      	ldr	r3, [r7, #4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e009      	b.n	8002420 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fdd1 	bl	8000fbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	dbf1      	blt.n	800240c <_write+0x12>
	}
	return len;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_close>:

int _close(int file)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
	return -1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800245a:	605a      	str	r2, [r3, #4]
	return 0;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_isatty>:

int _isatty(int file)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
	return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
	return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <_sbrk+0x5c>)
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <_sbrk+0x60>)
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <_sbrk+0x64>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <_sbrk+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d207      	bcs.n	80024dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024cc:	f007 fd38 	bl	8009f40 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	220c      	movs	r2, #12
 80024d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e009      	b.n	80024f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <_sbrk+0x64>)
 80024ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20020000 	.word	0x20020000
 80024fc:	00000400 	.word	0x00000400
 8002500:	20000744 	.word	0x20000744
 8002504:	20000760 	.word	0x20000760

08002508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <SystemInit+0x20>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <SystemInit+0x20>)
 8002514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800252e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <LoopForever+0x6>)
  ldr r1, =_edata
 8002532:	490e      	ldr	r1, [pc, #56]	; (800256c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <LoopForever+0xe>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002538:	e002      	b.n	8002540 <LoopCopyDataInit>

0800253a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800253c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253e:	3304      	adds	r3, #4

08002540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002544:	d3f9      	bcc.n	800253a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002548:	4c0b      	ldr	r4, [pc, #44]	; (8002578 <LoopForever+0x16>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800254c:	e001      	b.n	8002552 <LoopFillZerobss>

0800254e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002550:	3204      	adds	r2, #4

08002552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002554:	d3fb      	bcc.n	800254e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002556:	f7ff ffd7 	bl	8002508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255a:	f007 fcf7 	bl	8009f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800255e:	f7fe fd57 	bl	8001010 <main>

08002562 <LoopForever>:

LoopForever:
    b LoopForever
 8002562:	e7fe      	b.n	8002562 <LoopForever>
  ldr   r0, =_estack
 8002564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	2000039c 	.word	0x2000039c
  ldr r2, =_sidata
 8002570:	0800d4b8 	.word	0x0800d4b8
  ldr r2, =_sbss
 8002574:	2000039c 	.word	0x2000039c
  ldr r4, =_ebss
 8002578:	2000075c 	.word	0x2000075c

0800257c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC3_IRQHandler>

0800257e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002588:	2003      	movs	r0, #3
 800258a:	f001 ff2f 	bl	80043ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800258e:	2000      	movs	r0, #0
 8002590:	f000 f80e 	bl	80025b0 <HAL_InitTick>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	e001      	b.n	80025a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025a0:	f7ff fc76 	bl	8001e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025a4:	79fb      	ldrb	r3, [r7, #7]

}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_InitTick+0x68>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d022      	beq.n	800260a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_InitTick+0x6c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_InitTick+0x68>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 ff3a 	bl	8004452 <HAL_SYSTICK_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d809      	bhi.n	80025fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ea:	2200      	movs	r2, #0
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	f001 ff06 	bl	8004402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_InitTick+0x70>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e007      	b.n	800260e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e004      	b.n	800260e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001c8 	.word	0x200001c8
 800261c:	200001c0 	.word	0x200001c0
 8002620:	200001c4 	.word	0x200001c4

08002624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x1c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_IncTick+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4413      	add	r3, r2
 8002632:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_IncTick+0x1c>)
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20000748 	.word	0x20000748
 8002644:	200001c8 	.word	0x200001c8

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000748 	.word	0x20000748

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d004      	beq.n	8002684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_Delay+0x40>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002684:	bf00      	nop
 8002686:	f7ff ffdf 	bl	8002648 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	429a      	cmp	r2, r3
 8002694:	d8f7      	bhi.n	8002686 <HAL_Delay+0x26>
  {
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200001c8 	.word	0x200001c8

080026a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <LL_ADC_SetOffset+0x44>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	4313      	orrs	r3, r2
 800273c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	03fff000 	.word	0x03fff000

08002754 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	461a      	mov	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3360      	adds	r3, #96	; 0x60
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3360      	adds	r3, #96	; 0x60
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	431a      	orrs	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800286e:	b480      	push	{r7}
 8002870:	b087      	sub	sp, #28
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3330      	adds	r3, #48	; 0x30
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	4413      	add	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	211f      	movs	r1, #31
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 011f 	and.w	r1, r3, #31
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3314      	adds	r3, #20
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0e5b      	lsrs	r3, r3, #25
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0d1b      	lsrs	r3, r3, #20
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2107      	movs	r1, #7
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0d1b      	lsrs	r3, r3, #20
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	431a      	orrs	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10a      	bne.n	800296e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800296c:	e00a      	b.n	8002984 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	43db      	mvns	r3, r3
 800297c:	401a      	ands	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	407f0000 	.word	0x407f0000

08002994 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6093      	str	r3, [r2, #8]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa4:	f043 0202 	orr.w	r2, r3, #2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_IsDisableOngoing+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_IsDisableOngoing+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d101      	bne.n	8002b44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1af      	b.n	8002ef2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff f999 	bl	8001ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff19 	bl	80029f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff feff 	bl	80029cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff34 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff18 	bl	8002a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be8:	4b9f      	ldr	r3, [pc, #636]	; (8002e68 <HAL_ADC_Init+0x2f0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	4a9f      	ldr	r2, [pc, #636]	; (8002e6c <HAL_ADC_Init+0x2f4>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff16 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff76 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 8002c40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8148 	bne.w	8002ee0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8144 	bne.w	8002ee0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff23 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d141      	bne.n	8002cfc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_Init+0x114>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7a      	ldr	r2, [pc, #488]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10f      	bne.n	8002cac <HAL_ADC_Init+0x134>
 8002c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c90:	f7ff ff12 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	4876      	ldr	r0, [pc, #472]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002c98:	f7ff ff0e 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_ADC_Init+0x15a>
 8002cac:	4871      	ldr	r0, [pc, #452]	; (8002e74 <HAL_ADC_Init+0x2fc>)
 8002cae:	f7ff ff03 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4870      	ldr	r0, [pc, #448]	; (8002e78 <HAL_ADC_Init+0x300>)
 8002cb6:	f7ff feff 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	431c      	orrs	r4, r3
 8002cbe:	486f      	ldr	r0, [pc, #444]	; (8002e7c <HAL_ADC_Init+0x304>)
 8002cc0:	f7ff fefa 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_Init+0x172>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_Init+0x176>
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_ADC_Init+0x308>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_Init+0x178>
 8002cee:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_ADC_Init+0x30c>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f7ff fcd4 	bl	80026a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7f5b      	ldrb	r3, [r3, #29]
 8002d00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	045b      	lsls	r3, r3, #17
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_ADC_Init+0x310>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fed2 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 8002d88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fedf 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8002d94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d17f      	bne.n	8002e9c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d17c      	bne.n	8002e9c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002de2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6911      	ldr	r1, [r2, #16]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e02:	e013      	b.n	8002e2c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d12a      	bne.n	8002e8c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e52:	4311      	orrs	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e019      	b.n	8002e9c <HAL_ADC_Init+0x324>
 8002e68:	200001c0 	.word	0x200001c0
 8002e6c:	053e2d63 	.word	0x053e2d63
 8002e70:	50000100 	.word	0x50000100
 8002e74:	50000400 	.word	0x50000400
 8002e78:	50000500 	.word	0x50000500
 8002e7c:	50000600 	.word	0x50000600
 8002e80:	50000300 	.word	0x50000300
 8002e84:	50000700 	.word	0x50000700
 8002e88:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f023 010f 	bic.w	r1, r3, #15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	e007      	b.n	8002ece <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020f 	bic.w	r2, r2, #15
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ede:	e007      	b.n	8002ef0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f10:	d004      	beq.n	8002f1c <HAL_ADC_Start_DMA+0x20>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_ADC_Start_DMA+0x184>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_Start_DMA+0x24>
 8002f1c:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_ADC_Start_DMA+0x188>)
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_Start_DMA+0x26>
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_ADC_Start_DMA+0x18c>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fd36 	bl	8002994 <LL_ADC_GetMultimode>
 8002f28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fdfc 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 809b 	bne.w	8003072 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x4e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e096      	b.n	8003078 <HAL_ADC_Start_DMA+0x17c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_ADC_Start_DMA+0x190>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d008      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d002      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d17a      	bne.n	8003064 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 ff56 	bl	8003e20 <ADC_Enable>
 8002f74:	4603      	mov	r3, r0
 8002f76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d16d      	bne.n	800305a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_ADC_Start_DMA+0x184>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xb4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_ADC_Start_DMA+0x194>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d002      	beq.n	8002fac <HAL_ADC_Start_DMA+0xb0>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <HAL_ADC_Start_DMA+0xb8>
 8002fac:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_ADC_Start_DMA+0x198>)
 8002fae:	e001      	b.n	8002fb4 <HAL_ADC_Start_DMA+0xb8>
 8002fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d002      	beq.n	8002fc2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fde:	f023 0206 	bic.w	r2, r3, #6
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	661a      	str	r2, [r3, #96]	; 0x60
 8002fe6:	e002      	b.n	8002fee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_ADC_Start_DMA+0x19c>)
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_ADC_Start_DMA+0x1a0>)
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_ADC_Start_DMA+0x1a4>)
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	221c      	movs	r2, #28
 800300c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3340      	adds	r3, #64	; 0x40
 8003040:	4619      	mov	r1, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f001 fab9 	bl	80045bc <HAL_DMA_Start_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fd56 	bl	8002b04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003058:	e00d      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003062:	e008      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003070:	e001      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	50000100 	.word	0x50000100
 8003084:	50000300 	.word	0x50000300
 8003088:	50000700 	.word	0x50000700
 800308c:	50000600 	.word	0x50000600
 8003090:	50000500 	.word	0x50000500
 8003094:	50000400 	.word	0x50000400
 8003098:	08003fa3 	.word	0x08003fa3
 800309c:	0800407b 	.word	0x0800407b
 80030a0:	08004097 	.word	0x08004097

080030a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x30>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8e      	ldr	r2, [pc, #568]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x34>
 80030d4:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_ADC_IRQHandler+0x268>)
 80030d6:	e000      	b.n	80030da <HAL_ADC_IRQHandler+0x36>
 80030d8:	4b8d      	ldr	r3, [pc, #564]	; (8003310 <HAL_ADC_IRQHandler+0x26c>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fc5a 	bl	8002994 <LL_ADC_GetMultimode>
 80030e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d017      	beq.n	800311c <HAL_ADC_IRQHandler+0x78>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 f892 	bl	8004238 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_ADC_IRQHandler+0x8c>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8094 	beq.w	8003264 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 808e 	beq.w	8003264 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fb6f 	bl	8002848 <LL_ADC_REG_IsTriggerSourceSWStart>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d072      	beq.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a64      	ldr	r2, [pc, #400]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_ADC_IRQHandler+0xea>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_IRQHandler+0xe6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e003      	b.n	8003192 <HAL_ADC_IRQHandler+0xee>
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 800318c:	e001      	b.n	8003192 <HAL_ADC_IRQHandler+0xee>
 800318e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4293      	cmp	r3, r2
 8003198:	d008      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d104      	bne.n	80031b6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	e014      	b.n	80031e0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a53      	ldr	r2, [pc, #332]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x130>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d002      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x12c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e003      	b.n	80031d8 <HAL_ADC_IRQHandler+0x134>
 80031d0:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 80031d2:	e001      	b.n	80031d8 <HAL_ADC_IRQHandler+0x134>
 80031d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d135      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d12e      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fc95 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11a      	bne.n	800323e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020c 	bic.w	r2, r2, #12
 8003216:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d112      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c
 800323c:	e00b      	b.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fd42 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	220c      	movs	r2, #12
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_ADC_IRQHandler+0x1d4>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80b3 	beq.w	80033ea <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80ad 	beq.w	80033ea <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fb0a 	bl	80028c6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fac5 	bl	8002848 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_ADC_IRQHandler+0x23a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d002      	beq.n	80032da <HAL_ADC_IRQHandler+0x236>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_IRQHandler+0x23e>
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 80032dc:	e001      	b.n	80032e2 <HAL_ADC_IRQHandler+0x23e>
 80032de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d008      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d002      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	e01f      	b.n	8003346 <HAL_ADC_IRQHandler+0x2a2>
 8003306:	bf00      	nop
 8003308:	50000100 	.word	0x50000100
 800330c:	50000300 	.word	0x50000300
 8003310:	50000700 	.word	0x50000700
 8003314:	50000500 	.word	0x50000500
 8003318:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_ADC_IRQHandler+0x4ac>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_ADC_IRQHandler+0x296>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_ADC_IRQHandler+0x4b0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d002      	beq.n	8003336 <HAL_ADC_IRQHandler+0x292>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e003      	b.n	800333e <HAL_ADC_IRQHandler+0x29a>
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_ADC_IRQHandler+0x4b4>)
 8003338:	e001      	b.n	800333e <HAL_ADC_IRQHandler+0x29a>
 800333a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800333e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d047      	beq.n	80033dc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_ADC_IRQHandler+0x2c2>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03f      	beq.n	80033dc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	d13a      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d133      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d12e      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fbe5 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11a      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d112      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033c2:	e00b      	b.n	80033dc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 ff03 	bl	80041e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2260      	movs	r2, #96	; 0x60
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_ADC_IRQHandler+0x374>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8b4 	bl	8003578 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <HAL_ADC_IRQHandler+0x3a4>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fee9 	bl	8004210 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_ADC_IRQHandler+0x3d4>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fedb 	bl	8004224 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d043      	beq.n	800350a <HAL_ADC_IRQHandler+0x466>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d03e      	beq.n	800350a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e021      	b.n	80034de <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d004      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x410>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_ADC_IRQHandler+0x4ac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x414>
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_ADC_IRQHandler+0x4b8>)
 80034b6:	e000      	b.n	80034ba <HAL_ADC_IRQHandler+0x416>
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_ADC_IRQHandler+0x4bc>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fa78 	bl	80029b0 <LL_ADC_GetMultiDMATransfer>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e008      	b.n	80034de <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034da:	2301      	movs	r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10e      	bne.n	8003502 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f845 	bl	800358c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d018      	beq.n	8003546 <HAL_ADC_IRQHandler+0x4a2>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d013      	beq.n	8003546 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fe5b 	bl	80041fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003546:	bf00      	nop
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000500 	.word	0x50000500
 8003558:	50000400 	.word	0x50000400
 800355c:	50000300 	.word	0x50000300
 8003560:	50000700 	.word	0x50000700

08003564 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0b6      	sub	sp, #216	; 0xd8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x24>
 80035be:	2302      	movs	r3, #2
 80035c0:	f000 bc13 	b.w	8003dea <HAL_ADC_ConfigChannel+0x84a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff faab 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 83f3 	bne.w	8003dc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7ff f93f 	bl	800286e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fa99 	bl	8002b2c <LL_ADC_REG_IsConversionOngoing>
 80035fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff faa5 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8003608:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800360c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 81d9 	bne.w	80039c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 81d4 	bne.w	80039c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003628:	d10f      	bne.n	800364a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	4619      	mov	r1, r3
 8003636:	f7ff f959 	bl	80028ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f8ed 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>
 8003648:	e00e      	b.n	8003668 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	461a      	mov	r2, r3
 8003658:	f7ff f948 	bl	80028ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f8dd 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d022      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800369a:	f7ff f837 	bl	800270c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6919      	ldr	r1, [r3, #16]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7ff f883 	bl	80027b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6919      	ldr	r1, [r3, #16]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7f1b      	ldrb	r3, [r3, #28]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x126>
 80036c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c4:	e000      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x128>
 80036c6:	2300      	movs	r3, #0
 80036c8:	461a      	mov	r2, r3
 80036ca:	f7ff f88f 	bl	80027ec <LL_ADC_SetOffsetSaturation>
 80036ce:	e17b      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f83c 	bl	8002754 <LL_ADC_GetOffsetChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x15c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f831 	bl	8002754 <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	e01e      	b.n	800373a <HAL_ADC_ConfigChannel+0x19a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f826 	bl	8002754 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800371a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800371e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e004      	b.n	8003738 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800372e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x1b2>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	e018      	b.n	8003784 <HAL_ADC_ConfigChannel+0x1e4>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800376a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800376e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e004      	b.n	8003784 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800377a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003784:	429a      	cmp	r2, r3
 8003786:	d106      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fff5 	bl	8002780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe ffd9 	bl	8002754 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x222>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe ffce 	bl	8002754 <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	e01e      	b.n	8003800 <HAL_ADC_ConfigChannel+0x260>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe ffc3 	bl	8002754 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e004      	b.n	80037fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x278>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	e018      	b.n	800384a <HAL_ADC_ConfigChannel+0x2aa>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800382c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800383c:	2320      	movs	r3, #32
 800383e:	e004      	b.n	800384a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800384a:	429a      	cmp	r2, r3
 800384c:	d106      	bne.n	800385c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe ff92 	bl	8002780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe ff76 	bl	8002754 <LL_ADC_GetOffsetChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x2e8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ff6b 	bl	8002754 <LL_ADC_GetOffsetChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	e01e      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x326>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff60 	bl	8002754 <LL_ADC_GetOffsetChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e004      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_ADC_ConfigChannel+0x33e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	e016      	b.n	800390c <HAL_ADC_ConfigChannel+0x36c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e004      	b.n	800390c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800390c:	429a      	cmp	r2, r3
 800390e:	d106      	bne.n	800391e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe ff31 	bl	8002780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2103      	movs	r1, #3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe ff15 	bl	8002754 <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_ADC_ConfigChannel+0x3aa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2103      	movs	r1, #3
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe ff0a 	bl	8002754 <LL_ADC_GetOffsetChannel>
 8003940:	4603      	mov	r3, r0
 8003942:	0e9b      	lsrs	r3, r3, #26
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	e017      	b.n	800397a <HAL_ADC_ConfigChannel+0x3da>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2103      	movs	r1, #3
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe feff 	bl	8002754 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x3f2>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	e011      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x416>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e003      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	2103      	movs	r1, #3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fedc 	bl	8002780 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f873 	bl	8002ab8 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 813d 	bne.w	8003c54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fe ffac 	bl	8002944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4aa2      	ldr	r2, [pc, #648]	; (8003c7c <HAL_ADC_ConfigChannel+0x6dc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f040 812e 	bne.w	8003c54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x480>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e019      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4b4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e003      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	bf94      	ite	ls
 8003a4e:	2301      	movls	r3, #1
 8003a50:	2300      	movhi	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d079      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x4d4>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	069b      	lsls	r3, r3, #26
 8003a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a72:	e015      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x500>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	e003      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x520>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	e017      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x550>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e003      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x576>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	051b      	lsls	r3, r3, #20
 8003b14:	e018      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x5a8>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	e003      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f003 021f 	and.w	r2, r3, #31
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	e07e      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x5c8>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	0e9b      	lsrs	r3, r3, #26
 8003b5e:	3301      	adds	r3, #1
 8003b60:	069b      	lsls	r3, r3, #26
 8003b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b66:	e015      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x5f4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b80:	2320      	movs	r3, #32
 8003b82:	e003      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	069b      	lsls	r3, r3, #26
 8003b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x614>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	e017      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x644>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x670>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	3b1e      	subs	r3, #30
 8003c08:	051b      	lsls	r3, r3, #20
 8003c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	e01b      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x6a8>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	613b      	str	r3, [r7, #16]
  return result;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e003      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f003 021f 	and.w	r2, r3, #31
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b1e      	subs	r3, #30
 8003c42:	051b      	lsls	r3, r3, #20
 8003c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f7fe fe4c 	bl	80028ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80be 	beq.w	8003dde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x6d6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10a      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x6ec>
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c78:	e009      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x6ee>
 8003c7a:	bf00      	nop
 8003c7c:	407f0000 	.word	0x407f0000
 8003c80:	80080000 	.word	0x80080000
 8003c84:	50000100 	.word	0x50000100
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fd2e 	bl	80026f0 <LL_ADC_GetCommonPathInternalCh>
 8003c94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_ADC_ConfigChannel+0x858>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x70c>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a55      	ldr	r2, [pc, #340]	; (8003dfc <HAL_ADC_ConfigChannel+0x85c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d13a      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d134      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc0:	d005      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x72e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <HAL_ADC_ConfigChannel+0x860>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	f040 8085 	bne.w	8003dd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd6:	d004      	beq.n	8003ce2 <HAL_ADC_ConfigChannel+0x742>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a49      	ldr	r2, [pc, #292]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x746>
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003ce4:	e000      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x748>
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe fce9 	bl	80026ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf8:	4b44      	ldr	r3, [pc, #272]	; (8003e0c <HAL_ADC_ConfigChannel+0x86c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	4a44      	ldr	r2, [pc, #272]	; (8003e10 <HAL_ADC_ConfigChannel+0x870>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d20:	e05a      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_ADC_ConfigChannel+0x874>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x7d8>
 8003d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11f      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d104      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x7ac>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_ADC_ConfigChannel+0x878>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d047      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d54:	d004      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0x7c0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x7c4>
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003d62:	e000      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x7c6>
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe fcaa 	bl	80026ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d76:	e031      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_ADC_ConfigChannel+0x87c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12d      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d127      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da0:	d004      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x80c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x810>
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x812>
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe fc84 	bl	80026ca <LL_ADC_SetCommonPathInternalCh>
 8003dc2:	e00c      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003dd6:	e002      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ddc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003de6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	37d8      	adds	r7, #216	; 0xd8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	50000700 	.word	0x50000700
 8003df8:	c3210000 	.word	0xc3210000
 8003dfc:	90c00010 	.word	0x90c00010
 8003e00:	50000600 	.word	0x50000600
 8003e04:	50000100 	.word	0x50000100
 8003e08:	50000300 	.word	0x50000300
 8003e0c:	200001c0 	.word	0x200001c0
 8003e10:	053e2d63 	.word	0x053e2d63
 8003e14:	c7520000 	.word	0xc7520000
 8003e18:	50000500 	.word	0x50000500
 8003e1c:	cb840000 	.word	0xcb840000

08003e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fe43 	bl	8002ab8 <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d14d      	bne.n	8003ed4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <ADC_Enable+0xc0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e039      	b.n	8003ed6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fdfe 	bl	8002a68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe fbec 	bl	8002648 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e72:	e028      	b.n	8003ec6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fe1d 	bl	8002ab8 <LL_ADC_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fded 	bl	8002a68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e8e:	f7fe fbdb 	bl	8002648 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d914      	bls.n	8003ec6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d00d      	beq.n	8003ec6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f043 0210 	orr.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e007      	b.n	8003ed6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d1cf      	bne.n	8003e74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	8000003f 	.word	0x8000003f

08003ee4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fdf4 	bl	8002ade <LL_ADC_IsDisableOngoing>
 8003ef6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fddb 	bl	8002ab8 <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d047      	beq.n	8003f98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d144      	bne.n	8003f98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030d 	and.w	r3, r3, #13
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10c      	bne.n	8003f36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fdb5 	bl	8002a90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f2e:	f7fe fb8b 	bl	8002648 <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f34:	e029      	b.n	8003f8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f043 0210 	orr.w	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e023      	b.n	8003f9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f52:	f7fe fb79 	bl	8002648 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d914      	bls.n	8003f8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e007      	b.n	8003f9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1dc      	bne.n	8003f52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d14b      	bne.n	8004054 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d021      	beq.n	800401a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fc34 	bl	8002848 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d032      	beq.n	800404c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d12b      	bne.n	800404c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11f      	bne.n	800404c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c
 8004018:	e018      	b.n	800404c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	f043 0201 	orr.w	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7fd fe47 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004052:	e00e      	b.n	8004072 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fa93 	bl	800358c <HAL_ADC_ErrorCallback>
}
 8004066:	e004      	b.n	8004072 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fa6b 	bl	8003564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	f043 0204 	orr.w	r2, r3, #4
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff fa65 	bl	800358c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <LL_ADC_StartCalibration>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_IsCalibrationOnGoing>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800410c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004110:	d101      	bne.n	8004116 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_ADCEx_Calibration_Start+0x1c>
 800413c:	2302      	movs	r3, #2
 800413e:	e04d      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xb8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fecb 	bl	8003ee4 <ADC_Disable>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d136      	bne.n	80041c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ffa9 	bl	80040ca <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004178:	e014      	b.n	80041a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3301      	adds	r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d90d      	bls.n	80041a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	f023 0312 	bic.w	r3, r3, #18
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e01b      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ffa7 	bl	80040fc <LL_ADC_IsCalibrationOnGoing>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e2      	bne.n	800417a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	f023 0303 	bic.w	r3, r3, #3
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041c4:	e005      	b.n	80041d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	0004de01 	.word	0x0004de01

080041e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427e:	4a04      	ldr	r2, [pc, #16]	; (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	60d3      	str	r3, [r2, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <__NVIC_GetPriorityGrouping+0x18>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 0307 	and.w	r3, r3, #7
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db0b      	blt.n	80042da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4907      	ldr	r1, [pc, #28]	; (80042e8 <__NVIC_EnableIRQ+0x38>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000e100 	.word	0xe000e100

080042ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db0a      	blt.n	8004316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	490c      	ldr	r1, [pc, #48]	; (8004338 <__NVIC_SetPriority+0x4c>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	440b      	add	r3, r1
 8004310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004314:	e00a      	b.n	800432c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4908      	ldr	r1, [pc, #32]	; (800433c <__NVIC_SetPriority+0x50>)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	3b04      	subs	r3, #4
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	440b      	add	r3, r1
 800432a:	761a      	strb	r2, [r3, #24]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000e100 	.word	0xe000e100
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f1c3 0307 	rsb	r3, r3, #7
 800435a:	2b04      	cmp	r3, #4
 800435c:	bf28      	it	cs
 800435e:	2304      	movcs	r3, #4
 8004360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3304      	adds	r3, #4
 8004366:	2b06      	cmp	r3, #6
 8004368:	d902      	bls.n	8004370 <NVIC_EncodePriority+0x30>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3b03      	subs	r3, #3
 800436e:	e000      	b.n	8004372 <NVIC_EncodePriority+0x32>
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	401a      	ands	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004388:	f04f 31ff 	mov.w	r1, #4294967295
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43d9      	mvns	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004398:	4313      	orrs	r3, r2
         );
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b8:	d301      	bcc.n	80043be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00f      	b.n	80043de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <SysTick_Config+0x40>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c6:	210f      	movs	r1, #15
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f7ff ff8e 	bl	80042ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <SysTick_Config+0x40>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SysTick_Config+0x40>)
 80043d8:	2207      	movs	r2, #7
 80043da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e010 	.word	0xe000e010

080043ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff29 	bl	800424c <__NVIC_SetPriorityGrouping>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004410:	f7ff ff40 	bl	8004294 <__NVIC_GetPriorityGrouping>
 8004414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7ff ff90 	bl	8004340 <NVIC_EncodePriority>
 8004420:	4602      	mov	r2, r0
 8004422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff5f 	bl	80042ec <__NVIC_SetPriority>
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff33 	bl	80042b0 <__NVIC_EnableIRQ>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa4 	bl	80043a8 <SysTick_Config>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e08d      	b.n	800459a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b47      	ldr	r3, [pc, #284]	; (80045a4 <HAL_DMA_Init+0x138>)
 8004486:	429a      	cmp	r2, r3
 8004488:	d80f      	bhi.n	80044aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	4b45      	ldr	r3, [pc, #276]	; (80045a8 <HAL_DMA_Init+0x13c>)
 8004492:	4413      	add	r3, r2
 8004494:	4a45      	ldr	r2, [pc, #276]	; (80045ac <HAL_DMA_Init+0x140>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_DMA_Init+0x144>)
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
 80044a8:	e00e      	b.n	80044c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_DMA_Init+0x148>)
 80044b2:	4413      	add	r3, r2
 80044b4:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <HAL_DMA_Init+0x140>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	009a      	lsls	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <HAL_DMA_Init+0x14c>)
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa76 	bl	8004a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004528:	d102      	bne.n	8004530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004544:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d010      	beq.n	8004570 <HAL_DMA_Init+0x104>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d80c      	bhi.n	8004570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa96 	bl	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e008      	b.n	8004582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40020407 	.word	0x40020407
 80045a8:	bffdfff8 	.word	0xbffdfff8
 80045ac:	cccccccd 	.word	0xcccccccd
 80045b0:	40020000 	.word	0x40020000
 80045b4:	bffdfbf8 	.word	0xbffdfbf8
 80045b8:	40020400 	.word	0x40020400

080045bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_DMA_Start_IT+0x20>
 80045d8:	2302      	movs	r3, #2
 80045da:	e066      	b.n	80046aa <HAL_DMA_Start_IT+0xee>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d155      	bne.n	800469c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f9bb 	bl	8004990 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 020e 	orr.w	r2, r2, #14
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e00f      	b.n	8004654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0204 	bic.w	r2, r2, #4
 8004642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 020a 	orr.w	r2, r2, #10
 8004652:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004688:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e005      	b.n	80046a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
 80046a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d005      	beq.n	80046d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2204      	movs	r2, #4
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e037      	b.n	8004746 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020e 	bic.w	r2, r2, #14
 80046e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f003 021f 	and.w	r2, r3, #31
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004722:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800473a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004744:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d00d      	beq.n	8004798 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2204      	movs	r2, #4
 8004780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e047      	b.n	8004828 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 020e 	bic.w	r2, r2, #14
 80047a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2101      	movs	r1, #1
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004806:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
    }
  }
  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2204      	movs	r2, #4
 8004854:	409a      	lsls	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d026      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d021      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f003 021f 	and.w	r2, r3, #31
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2104      	movs	r1, #4
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d071      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048aa:	e06c      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2202      	movs	r2, #2
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d029      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020a 	bic.w	r2, r2, #10
 80048e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f003 021f 	and.w	r2, r3, #31
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2102      	movs	r1, #2
 80048fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d038      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800491c:	e033      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2208      	movs	r2, #8
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02a      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d025      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020e 	bic.w	r2, r2, #14
 800494a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f202 	lsl.w	r2, r1, r2
 800495e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004986:	bf00      	nop
 8004988:	bf00      	nop
}
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f003 021f 	and.w	r2, r3, #31
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d108      	bne.n	80049f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ee:	e007      	b.n	8004a00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d802      	bhi.n	8004a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a28:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	3b08      	subs	r3, #8
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	009a      	lsls	r2, r3, #2
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a56:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40020407 	.word	0x40020407
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020820 	.word	0x40020820
 8004a80:	cccccccd 	.word	0xcccccccd
 8004a84:	40020880 	.word	0x40020880

08004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	1000823f 	.word	0x1000823f
 8004acc:	40020940 	.word	0x40020940

08004ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ade:	e15a      	b.n	8004d96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 814c 	beq.w	8004d90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d005      	beq.n	8004b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d130      	bne.n	8004b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b46:	2201      	movs	r2, #1
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0201 	and.w	r2, r3, #1
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d017      	beq.n	8004bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d123      	bne.n	8004c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	6939      	ldr	r1, [r7, #16]
 8004bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0203 	and.w	r2, r3, #3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80a6 	beq.w	8004d90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c44:	4b5b      	ldr	r3, [pc, #364]	; (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	4a5a      	ldr	r2, [pc, #360]	; (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8004c50:	4b58      	ldr	r3, [pc, #352]	; (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c5c:	4a56      	ldr	r2, [pc, #344]	; (8004db8 <HAL_GPIO_Init+0x2e8>)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c86:	d01f      	beq.n	8004cc8 <HAL_GPIO_Init+0x1f8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4c      	ldr	r2, [pc, #304]	; (8004dbc <HAL_GPIO_Init+0x2ec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d019      	beq.n	8004cc4 <HAL_GPIO_Init+0x1f4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <HAL_GPIO_Init+0x2f0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_GPIO_Init+0x1f0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <HAL_GPIO_Init+0x2f4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00d      	beq.n	8004cbc <HAL_GPIO_Init+0x1ec>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a49      	ldr	r2, [pc, #292]	; (8004dc8 <HAL_GPIO_Init+0x2f8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <HAL_GPIO_Init+0x1e8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a48      	ldr	r2, [pc, #288]	; (8004dcc <HAL_GPIO_Init+0x2fc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_GPIO_Init+0x1e4>
 8004cb0:	2305      	movs	r3, #5
 8004cb2:	e00a      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	e008      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e006      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e004      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e002      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	f002 0203 	and.w	r2, r2, #3
 8004cd0:	0092      	lsls	r2, r2, #2
 8004cd2:	4093      	lsls	r3, r2
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cda:	4937      	ldr	r1, [pc, #220]	; (8004db8 <HAL_GPIO_Init+0x2e8>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d0c:	4a30      	ldr	r2, [pc, #192]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d12:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d3c:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f ae9d 	bne.w	8004ae0 <HAL_GPIO_Init+0x10>
  }
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	48000400 	.word	0x48000400
 8004dc0:	48000800 	.word	0x48000800
 8004dc4:	48000c00 	.word	0x48000c00
 8004dc8:	48001000 	.word	0x48001000
 8004dcc:	48001400 	.word	0x48001400
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de4:	787b      	ldrb	r3, [r7, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004df0:	e002      	b.n	8004df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d006      	beq.n	8004e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f806 	bl	8004e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40010400 	.word	0x40010400

08004e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d141      	bne.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e5a:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d131      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e68:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6e:	4a46      	ldr	r2, [pc, #280]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e78:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e80:	4a41      	ldr	r2, [pc, #260]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e88:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2232      	movs	r2, #50	; 0x32
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	0c9b      	lsrs	r3, r3, #18
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9e:	e002      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea6:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d102      	bne.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f2      	bne.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d158      	bne.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e057      	b.n	8004f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed2:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004edc:	e04d      	b.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d141      	bne.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d131      	bne.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004efa:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2232      	movs	r2, #50	; 0x32
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	0c9b      	lsrs	r3, r3, #18
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2a:	e002      	b.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d102      	bne.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f2      	bne.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d112      	bne.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e011      	b.n	8004f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f68:	e007      	b.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	200001c0 	.word	0x200001c0
 8004f90:	431bde83 	.word	0x431bde83

08004f94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa2:	6093      	str	r3, [r2, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40007000 	.word	0x40007000

08004fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e306      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d075      	beq.n	80050be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd2:	4b97      	ldr	r3, [pc, #604]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fdc:	4b94      	ldr	r3, [pc, #592]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d102      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3e>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d002      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x44>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05b      	beq.n	80050bc <HAL_RCC_OscConfig+0x108>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d157      	bne.n	80050bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e2e1      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x74>
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a84      	ldr	r2, [pc, #528]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x98>
 8005032:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7e      	ldr	r2, [pc, #504]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b7c      	ldr	r3, [pc, #496]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a7b      	ldr	r2, [pc, #492]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a77      	ldr	r2, [pc, #476]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b75      	ldr	r3, [pc, #468]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a74      	ldr	r2, [pc, #464]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd faec 	bl	8002648 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd fae8 	bl	8002648 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e2a6      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xc0>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fad8 	bl	8002648 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd fad4 	bl	8002648 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e292      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ae:	4b60      	ldr	r3, [pc, #384]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0xe8>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d075      	beq.n	80051b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ca:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d4:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d102      	bne.n	80050ea <HAL_RCC_OscConfig+0x136>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_OscConfig+0x13c>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11f      	bne.n	8005130 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_OscConfig+0x154>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e265      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	4946      	ldr	r1, [pc, #280]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800511c:	4b45      	ldr	r3, [pc, #276]	; (8005234 <HAL_RCC_OscConfig+0x280>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd fa45 	bl	80025b0 <HAL_InitTick>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d043      	beq.n	80051b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e251      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d023      	beq.n	8005180 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fd fa80 	bl	8002648 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fd fa7c 	bl	8002648 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e23a      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800515e:	4b34      	ldr	r3, [pc, #208]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	492d      	ldr	r1, [pc, #180]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
 800517e:	e01a      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fd fa5c 	bl	8002648 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005194:	f7fd fa58 	bl	8002648 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e216      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x1e0>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d041      	beq.n	8005246 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01c      	beq.n	8005204 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fd fa35 	bl	8002648 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e2:	f7fd fa31 	bl	8002648 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e1ef      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ef      	beq.n	80051e2 <HAL_RCC_OscConfig+0x22e>
 8005202:	e020      	b.n	8005246 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fd fa18 	bl	8002648 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800521a:	e00d      	b.n	8005238 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fd fa14 	bl	8002648 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d906      	bls.n	8005238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e1d2      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	200001c4 	.word	0x200001c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ea      	bne.n	800521c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a6 	beq.w	80053a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005258:	4b84      	ldr	r3, [pc, #528]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x2b4>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x2b6>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b7f      	ldr	r3, [pc, #508]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	4a7e      	ldr	r2, [pc, #504]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	4b7c      	ldr	r3, [pc, #496]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528a:	4b79      	ldr	r3, [pc, #484]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005296:	4b76      	ldr	r3, [pc, #472]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a75      	ldr	r2, [pc, #468]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd f9d1 	bl	8002648 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fd f9cd 	bl	8002648 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e18b      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052bc:	4b6c      	ldr	r3, [pc, #432]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_RCC_OscConfig+0x32e>
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e0:	e024      	b.n	800532c <HAL_RCC_OscConfig+0x378>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d110      	bne.n	800530c <HAL_RCC_OscConfig+0x358>
 80052ea:	4b60      	ldr	r3, [pc, #384]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a5e      	ldr	r2, [pc, #376]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052fa:	4b5c      	ldr	r3, [pc, #368]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	4a5a      	ldr	r2, [pc, #360]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530a:	e00f      	b.n	800532c <HAL_RCC_OscConfig+0x378>
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a56      	ldr	r2, [pc, #344]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	4b53      	ldr	r3, [pc, #332]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a52      	ldr	r2, [pc, #328]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fd f988 	bl	8002648 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	e00a      	b.n	8005352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fd f984 	bl	8002648 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e140      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ed      	beq.n	800533c <HAL_RCC_OscConfig+0x388>
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fd f971 	bl	8002648 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fd f96d 	bl	8002648 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e129      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005380:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ed      	bne.n	800536a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03c      	beq.n	8005426 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01c      	beq.n	80053ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c4:	f7fd f940 	bl	8002648 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053cc:	f7fd f93c 	bl	8002648 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0fa      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ef      	beq.n	80053cc <HAL_RCC_OscConfig+0x418>
 80053ec:	e01b      	b.n	8005426 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd f923 	bl	8002648 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005406:	f7fd f91f 	bl	8002648 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0dd      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ef      	bne.n	8005406 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80d1 	beq.w	80055d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b0c      	cmp	r3, #12
 800543a:	f000 808b 	beq.w	8005554 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d15e      	bne.n	8005504 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a08      	ldr	r2, [pc, #32]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800544c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fd f8f9 	bl	8002648 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005458:	e00c      	b.n	8005474 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fd f8f5 	bl	8002648 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d905      	bls.n	8005474 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0b3      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ec      	bne.n	800545a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005480:	4b56      	ldr	r3, [pc, #344]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <HAL_RCC_OscConfig+0x62c>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6a11      	ldr	r1, [r2, #32]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005490:	3a01      	subs	r2, #1
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800549a:	0212      	lsls	r2, r2, #8
 800549c:	4311      	orrs	r1, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054a2:	0852      	lsrs	r2, r2, #1
 80054a4:	3a01      	subs	r2, #1
 80054a6:	0552      	lsls	r2, r2, #21
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ae:	0852      	lsrs	r2, r2, #1
 80054b0:	3a01      	subs	r2, #1
 80054b2:	0652      	lsls	r2, r2, #25
 80054b4:	4311      	orrs	r1, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054ba:	06d2      	lsls	r2, r2, #27
 80054bc:	430a      	orrs	r2, r1
 80054be:	4947      	ldr	r1, [pc, #284]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a44      	ldr	r2, [pc, #272]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d0:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a41      	ldr	r2, [pc, #260]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd f8b4 	bl	8002648 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd f8b0 	bl	8002648 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e06e      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x530>
 8005502:	e066      	b.n	80055d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005504:	4b35      	ldr	r3, [pc, #212]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 800550a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a31      	ldr	r2, [pc, #196]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800551c:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a2e      	ldr	r2, [pc, #184]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005522:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd f88c 	bl	8002648 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fd f888 	bl	8002648 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e046      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005546:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x580>
 8005552:	e03e      	b.n	80055d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e039      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005560:	4b1e      	ldr	r3, [pc, #120]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0203 	and.w	r2, r3, #3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	429a      	cmp	r2, r3
 8005572:	d12c      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	3b01      	subs	r3, #1
 8005580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d123      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d11b      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d113      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	3b01      	subs	r3, #1
 80055b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	3b01      	subs	r3, #1
 80055c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	019f800c 	.word	0x019f800c

080055e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e11e      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055fc:	4b91      	ldr	r3, [pc, #580]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d910      	bls.n	800562c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b8e      	ldr	r3, [pc, #568]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 020f 	bic.w	r2, r3, #15
 8005612:	498c      	ldr	r1, [pc, #560]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b8a      	ldr	r3, [pc, #552]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e106      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d073      	beq.n	8005720 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d129      	bne.n	8005694 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005640:	4b81      	ldr	r3, [pc, #516]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0f4      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005650:	f000 f99e 	bl	8005990 <RCC_GetSysClockFreqFromPLLSource>
 8005654:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4a7c      	ldr	r2, [pc, #496]	; (800584c <HAL_RCC_ClockConfig+0x268>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d93f      	bls.n	80056de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800565e:	4b7a      	ldr	r3, [pc, #488]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005672:	2b00      	cmp	r3, #0
 8005674:	d033      	beq.n	80056de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800567a:	2b00      	cmp	r3, #0
 800567c:	d12f      	bne.n	80056de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800567e:	4b72      	ldr	r3, [pc, #456]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	4a70      	ldr	r2, [pc, #448]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e024      	b.n	80056de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569c:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0c6      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0be      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056bc:	f000 f8ce 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4a61      	ldr	r2, [pc, #388]	; (800584c <HAL_RCC_ClockConfig+0x268>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d909      	bls.n	80056de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ca:	4b5f      	ldr	r3, [pc, #380]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d2:	4a5d      	ldr	r2, [pc, #372]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4957      	ldr	r1, [pc, #348]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fc ffaa 	bl	8002648 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fc ffa6 	bl	8002648 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e095      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d023      	beq.n	8005774 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005738:	4b43      	ldr	r3, [pc, #268]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a42      	ldr	r2, [pc, #264]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800573e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005742:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005758:	4a3b      	ldr	r2, [pc, #236]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800575a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800575e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4936      	ldr	r1, [pc, #216]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
 8005772:	e008      	b.n	8005786 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d105      	bne.n	8005786 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4a32      	ldr	r2, [pc, #200]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005784:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d21d      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f023 020f 	bic.w	r2, r3, #15
 800579c:	4929      	ldr	r1, [pc, #164]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057a4:	f7fc ff50 	bl	8002648 <HAL_GetTick>
 80057a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ac:	f7fc ff4c 	bl	8002648 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e03b      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1ed      	bne.n	80057ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4917      	ldr	r1, [pc, #92]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490f      	ldr	r1, [pc, #60]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800580e:	f000 f825 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8005812:	4602      	mov	r2, r0
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	490c      	ldr	r1, [pc, #48]	; (8005850 <HAL_RCC_ClockConfig+0x26c>)
 8005820:	5ccb      	ldrb	r3, [r1, r3]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_RCC_ClockConfig+0x270>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x274>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc febc 	bl	80025b0 <HAL_InitTick>
 8005838:	4603      	mov	r3, r0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40022000 	.word	0x40022000
 8005848:	40021000 	.word	0x40021000
 800584c:	04c4b400 	.word	0x04c4b400
 8005850:	0800d02c 	.word	0x0800d02c
 8005854:	200001c0 	.word	0x200001c0
 8005858:	200001c4 	.word	0x200001c4

0800585c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b04      	cmp	r3, #4
 800586c:	d102      	bne.n	8005874 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e047      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b08      	cmp	r3, #8
 800587e:	d102      	bne.n	8005886 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005880:	4b26      	ldr	r3, [pc, #152]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	e03e      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005886:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d136      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	3301      	adds	r3, #1
 80058a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ba:	68d2      	ldr	r2, [r2, #12]
 80058bc:	0a12      	lsrs	r2, r2, #8
 80058be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	617b      	str	r3, [r7, #20]
      break;
 80058c8:	e00c      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ca:	4a13      	ldr	r2, [pc, #76]	; (8005918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	0a12      	lsrs	r2, r2, #8
 80058d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
      break;
 80058e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	0e5b      	lsrs	r3, r3, #25
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	3301      	adds	r3, #1
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e001      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005904:	693b      	ldr	r3, [r7, #16]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000
 8005918:	00f42400 	.word	0x00f42400
 800591c:	016e3600 	.word	0x016e3600

08005920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCC_GetHCLKFreq+0x14>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	200001c0 	.word	0x200001c0

08005938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800593c:	f7ff fff0 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005940:	4602      	mov	r2, r0
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4904      	ldr	r1, [pc, #16]	; (8005960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800594e:	5ccb      	ldrb	r3, [r1, r3]
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40021000 	.word	0x40021000
 8005960:	0800d03c 	.word	0x0800d03c

08005964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005968:	f7ff ffda 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0adb      	lsrs	r3, r3, #11
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCC_GetPCLK2Freq+0x28>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000
 800598c:	0800d03c 	.word	0x0800d03c

08005990 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059a0:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d10c      	bne.n	80059ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059b4:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059be:	68d2      	ldr	r2, [r2, #12]
 80059c0:	0a12      	lsrs	r2, r2, #8
 80059c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	617b      	str	r3, [r7, #20]
    break;
 80059cc:	e00c      	b.n	80059e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d6:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059d8:	68d2      	ldr	r2, [r2, #12]
 80059da:	0a12      	lsrs	r2, r2, #8
 80059dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    break;
 80059e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	0e5b      	lsrs	r3, r3, #25
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a02:	687b      	ldr	r3, [r7, #4]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40021000 	.word	0x40021000
 8005a14:	016e3600 	.word	0x016e3600
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a24:	2300      	movs	r3, #0
 8005a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8098 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3e:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10d      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	4b40      	ldr	r3, [pc, #256]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	4a3f      	ldr	r2, [pc, #252]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6593      	str	r3, [r2, #88]	; 0x58
 8005a56:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a62:	2301      	movs	r3, #1
 8005a64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a66:	4b3a      	ldr	r3, [pc, #232]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a39      	ldr	r2, [pc, #228]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a72:	f7fc fde9 	bl	8002648 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a78:	e009      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7a:	f7fc fde5 	bl	8002648 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d902      	bls.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	74fb      	strb	r3, [r7, #19]
        break;
 8005a8c:	e005      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a8e:	4b30      	ldr	r3, [pc, #192]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ef      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d159      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aa0:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01e      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d019      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005abc:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ae8:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fc fda5 	bl	8002648 <HAL_GetTick>
 8005afe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b00:	e00b      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fc fda1 	bl	8002648 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d902      	bls.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	74fb      	strb	r3, [r7, #19]
            break;
 8005b18:	e006      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0ec      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	4903      	ldr	r1, [pc, #12]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	74bb      	strb	r3, [r7, #18]
 8005b4a:	e005      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b58:	7c7b      	ldrb	r3, [r7, #17]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5e:	4ba7      	ldr	r3, [pc, #668]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	4aa6      	ldr	r2, [pc, #664]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b76:	4ba1      	ldr	r3, [pc, #644]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f023 0203 	bic.w	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	499d      	ldr	r1, [pc, #628]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b98:	4b98      	ldr	r3, [pc, #608]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f023 020c 	bic.w	r2, r3, #12
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4995      	ldr	r1, [pc, #596]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bba:	4b90      	ldr	r3, [pc, #576]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	498c      	ldr	r1, [pc, #560]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bdc:	4b87      	ldr	r3, [pc, #540]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4984      	ldr	r1, [pc, #528]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	497b      	ldr	r1, [pc, #492]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c20:	4b76      	ldr	r3, [pc, #472]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	4973      	ldr	r1, [pc, #460]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c42:	4b6e      	ldr	r3, [pc, #440]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	496a      	ldr	r1, [pc, #424]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c64:	4b65      	ldr	r3, [pc, #404]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	4962      	ldr	r1, [pc, #392]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c86:	4b5d      	ldr	r3, [pc, #372]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	4959      	ldr	r1, [pc, #356]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ca8:	4b54      	ldr	r3, [pc, #336]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cae:	f023 0203 	bic.w	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	4951      	ldr	r1, [pc, #324]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cca:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4948      	ldr	r1, [pc, #288]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d015      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cec:	4b43      	ldr	r3, [pc, #268]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	4940      	ldr	r1, [pc, #256]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a3a      	ldr	r2, [pc, #232]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d015      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	4932      	ldr	r1, [pc, #200]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d42:	d105      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d44:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d5c:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	4924      	ldr	r1, [pc, #144]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4a1e      	ldr	r2, [pc, #120]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	4916      	ldr	r1, [pc, #88]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d019      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4908      	ldr	r1, [pc, #32]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dea:	d109      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a02      	ldr	r2, [pc, #8]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df6:	60d3      	str	r3, [r2, #12]
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e0c:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	4926      	ldr	r1, [pc, #152]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e36:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d015      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	4918      	ldr	r1, [pc, #96]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d105      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	490a      	ldr	r1, [pc, #40]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ea8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000

08005eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e049      	b.n	8005f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fc f8a6 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f001 f840 	bl	8006f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e04c      	b.n	800601a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	; (8006028 <HAL_TIM_Base_Start+0xc0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d022      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9a:	d01d      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	; (800602c <HAL_TIM_Base_Start+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d018      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <HAL_TIM_Base_Start+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_TIM_Base_Start+0xcc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_TIM_Base_Start+0xd0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIM_Base_Start+0xd4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x70>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIM_Base_Start+0xd8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d115      	bne.n	8006004 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_TIM_Base_Start+0xdc>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d015      	beq.n	8006016 <HAL_TIM_Base_Start+0xae>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff0:	d011      	beq.n	8006016 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006002:	e008      	b.n	8006016 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e000      	b.n	8006018 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40014000 	.word	0x40014000
 8006040:	40015000 	.word	0x40015000
 8006044:	00010007 	.word	0x00010007

08006048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d001      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e054      	b.n	800610a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <HAL_TIM_Base_Start_IT+0xd0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d01d      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a22      	ldr	r2, [pc, #136]	; (800611c <HAL_TIM_Base_Start_IT+0xd4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <HAL_TIM_Base_Start_IT+0xd8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_TIM_Base_Start_IT+0xdc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_TIM_Base_Start_IT+0xe0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIM_Base_Start_IT+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_TIM_Base_Start_IT+0xe8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d115      	bne.n	80060f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_TIM_Base_Start_IT+0xec>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d015      	beq.n	8006106 <HAL_TIM_Base_Start_IT+0xbe>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e0:	d011      	beq.n	8006106 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f2:	e008      	b.n	8006106 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e000      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40013400 	.word	0x40013400
 800612c:	40014000 	.word	0x40014000
 8006130:	40015000 	.word	0x40015000
 8006134:	00010007 	.word	0x00010007

08006138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e049      	b.n	80061de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb ff46 	bl	8001ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f000 ff00 	bl	8006f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_TIM_PWM_Start+0x24>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e03c      	b.n	8006286 <HAL_TIM_PWM_Start+0x9e>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b04      	cmp	r3, #4
 8006210:	d109      	bne.n	8006226 <HAL_TIM_PWM_Start+0x3e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	e02f      	b.n	8006286 <HAL_TIM_PWM_Start+0x9e>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b08      	cmp	r3, #8
 800622a:	d109      	bne.n	8006240 <HAL_TIM_PWM_Start+0x58>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e022      	b.n	8006286 <HAL_TIM_PWM_Start+0x9e>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d109      	bne.n	800625a <HAL_TIM_PWM_Start+0x72>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	bf14      	ite	ne
 8006252:	2301      	movne	r3, #1
 8006254:	2300      	moveq	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	e015      	b.n	8006286 <HAL_TIM_PWM_Start+0x9e>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b10      	cmp	r3, #16
 800625e:	d109      	bne.n	8006274 <HAL_TIM_PWM_Start+0x8c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e008      	b.n	8006286 <HAL_TIM_PWM_Start+0x9e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	bf14      	ite	ne
 8006280:	2301      	movne	r3, #1
 8006282:	2300      	moveq	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e0a6      	b.n	80063dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_TIM_PWM_Start+0xb6>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800629c:	e023      	b.n	80062e6 <HAL_TIM_PWM_Start+0xfe>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d104      	bne.n	80062ae <HAL_TIM_PWM_Start+0xc6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ac:	e01b      	b.n	80062e6 <HAL_TIM_PWM_Start+0xfe>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d104      	bne.n	80062be <HAL_TIM_PWM_Start+0xd6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062bc:	e013      	b.n	80062e6 <HAL_TIM_PWM_Start+0xfe>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_PWM_Start+0xe6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062cc:	e00b      	b.n	80062e6 <HAL_TIM_PWM_Start+0xfe>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0xf6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062dc:	e003      	b.n	80062e6 <HAL_TIM_PWM_Start+0xfe>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fab2 	bl	8007858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a3a      	ldr	r2, [pc, #232]	; (80063e4 <HAL_TIM_PWM_Start+0x1fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_TIM_PWM_Start+0x148>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a39      	ldr	r2, [pc, #228]	; (80063e8 <HAL_TIM_PWM_Start+0x200>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_TIM_PWM_Start+0x148>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a37      	ldr	r2, [pc, #220]	; (80063ec <HAL_TIM_PWM_Start+0x204>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_TIM_PWM_Start+0x148>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a36      	ldr	r2, [pc, #216]	; (80063f0 <HAL_TIM_PWM_Start+0x208>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_TIM_PWM_Start+0x148>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a34      	ldr	r2, [pc, #208]	; (80063f4 <HAL_TIM_PWM_Start+0x20c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_TIM_PWM_Start+0x148>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a33      	ldr	r2, [pc, #204]	; (80063f8 <HAL_TIM_PWM_Start+0x210>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d101      	bne.n	8006334 <HAL_TIM_PWM_Start+0x14c>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_TIM_PWM_Start+0x14e>
 8006334:	2300      	movs	r3, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a25      	ldr	r2, [pc, #148]	; (80063e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d01d      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a26      	ldr	r2, [pc, #152]	; (80063fc <HAL_TIM_PWM_Start+0x214>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a24      	ldr	r2, [pc, #144]	; (8006400 <HAL_TIM_PWM_Start+0x218>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a23      	ldr	r2, [pc, #140]	; (8006404 <HAL_TIM_PWM_Start+0x21c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_TIM_PWM_Start+0x200>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a18      	ldr	r2, [pc, #96]	; (80063ec <HAL_TIM_PWM_Start+0x204>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIM_PWM_Start+0x1b2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_TIM_PWM_Start+0x210>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d115      	bne.n	80063c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <HAL_TIM_PWM_Start+0x220>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d015      	beq.n	80063d8 <HAL_TIM_PWM_Start+0x1f0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b2:	d011      	beq.n	80063d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c4:	e008      	b.n	80063d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0201 	orr.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e000      	b.n	80063da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40015000 	.word	0x40015000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fa1a 	bl	8007858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a40      	ldr	r2, [pc, #256]	; (800652c <HAL_TIM_PWM_Stop+0x120>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_TIM_PWM_Stop+0x54>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a3f      	ldr	r2, [pc, #252]	; (8006530 <HAL_TIM_PWM_Stop+0x124>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_TIM_PWM_Stop+0x54>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3d      	ldr	r2, [pc, #244]	; (8006534 <HAL_TIM_PWM_Stop+0x128>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_TIM_PWM_Stop+0x54>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3c      	ldr	r2, [pc, #240]	; (8006538 <HAL_TIM_PWM_Stop+0x12c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_TIM_PWM_Stop+0x54>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a3a      	ldr	r2, [pc, #232]	; (800653c <HAL_TIM_PWM_Stop+0x130>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_PWM_Stop+0x54>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a39      	ldr	r2, [pc, #228]	; (8006540 <HAL_TIM_PWM_Stop+0x134>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_TIM_PWM_Stop+0x58>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_TIM_PWM_Stop+0x5a>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d017      	beq.n	800649a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	f241 1311 	movw	r3, #4369	; 0x1111
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <HAL_TIM_PWM_Stop+0x8e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	f244 4344 	movw	r3, #17476	; 0x4444
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <HAL_TIM_PWM_Stop+0x8e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <HAL_TIM_PWM_Stop+0xbe>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	f244 4344 	movw	r3, #17476	; 0x4444
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <HAL_TIM_PWM_Stop+0xbe>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Stop+0xce>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d8:	e023      	b.n	8006522 <HAL_TIM_PWM_Stop+0x116>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d104      	bne.n	80064ea <HAL_TIM_PWM_Stop+0xde>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	e01b      	b.n	8006522 <HAL_TIM_PWM_Stop+0x116>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Stop+0xee>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f8:	e013      	b.n	8006522 <HAL_TIM_PWM_Stop+0x116>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Stop+0xfe>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006508:	e00b      	b.n	8006522 <HAL_TIM_PWM_Stop+0x116>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Stop+0x10e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006518:	e003      	b.n	8006522 <HAL_TIM_PWM_Stop+0x116>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800
 8006540:	40015000 	.word	0x40015000

08006544 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e097      	b.n	8006688 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fb fdb3 	bl	80020d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006588:	f023 0307 	bic.w	r3, r3, #7
 800658c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f000 fcef 	bl	8006f7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	4313      	orrs	r3, r2
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065e4:	f023 030c 	bic.w	r3, r3, #12
 80065e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	4313      	orrs	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	4313      	orrs	r3, r2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4313      	orrs	r3, r2
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d110      	bne.n	80066e2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066c6:	7b7b      	ldrb	r3, [r7, #13]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e089      	b.n	80067e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e0:	e031      	b.n	8006746 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d110      	bne.n	800670a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d102      	bne.n	80066f4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ee:	7b3b      	ldrb	r3, [r7, #12]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e075      	b.n	80067e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006708:	e01d      	b.n	8006746 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d108      	bne.n	8006722 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006716:	7b7b      	ldrb	r3, [r7, #13]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d102      	bne.n	8006722 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800671c:	7b3b      	ldrb	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d001      	beq.n	8006726 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e05e      	b.n	80067e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_TIM_Encoder_Start_IT+0xc4>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b04      	cmp	r3, #4
 8006750:	d010      	beq.n	8006774 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006752:	e01f      	b.n	8006794 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f87b 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0202 	orr.w	r2, r2, #2
 8006770:	60da      	str	r2, [r3, #12]
      break;
 8006772:	e02e      	b.n	80067d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2201      	movs	r2, #1
 800677a:	2104      	movs	r1, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f86b 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0204 	orr.w	r2, r2, #4
 8006790:	60da      	str	r2, [r3, #12]
      break;
 8006792:	e01e      	b.n	80067d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f85b 	bl	8007858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	2104      	movs	r1, #4
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f854 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0202 	orr.w	r2, r2, #2
 80067be:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0204 	orr.w	r2, r2, #4
 80067ce:	60da      	str	r2, [r3, #12]
      break;
 80067d0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0202 	mvn.w	r2, #2
 8006818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fa fbd6 	bl	8000fe0 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fb82 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb89 	bl	8006f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0204 	mvn.w	r2, #4
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fa fbac 	bl	8000fe0 <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb58 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fb5f 	bl	8006f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fa fb82 	bl	8000fe0 <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb2e 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb35 	bl	8006f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0210 	mvn.w	r2, #16
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2208      	movs	r2, #8
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fa fb58 	bl	8000fe0 <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb04 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb0b 	bl	8006f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb f946 	bl	8001bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f9f6 	bl	8007d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f9e9 	bl	8007d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fab9 	bl	8006f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0220 	mvn.w	r2, #32
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f9a9 	bl	8007d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a30:	d10f      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a40:	d107      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f9af 	bl	8007db0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a60:	d10f      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f9a1 	bl	8007dc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a90:	d10f      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f993 	bl	8007dd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f985 	bl	8007dec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e0ff      	b.n	8006d0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b14      	cmp	r3, #20
 8006b16:	f200 80f0 	bhi.w	8006cfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006cfb 	.word	0x08006cfb
 8006b28:	08006cfb 	.word	0x08006cfb
 8006b2c:	08006cfb 	.word	0x08006cfb
 8006b30:	08006bb5 	.word	0x08006bb5
 8006b34:	08006cfb 	.word	0x08006cfb
 8006b38:	08006cfb 	.word	0x08006cfb
 8006b3c:	08006cfb 	.word	0x08006cfb
 8006b40:	08006bf7 	.word	0x08006bf7
 8006b44:	08006cfb 	.word	0x08006cfb
 8006b48:	08006cfb 	.word	0x08006cfb
 8006b4c:	08006cfb 	.word	0x08006cfb
 8006b50:	08006c37 	.word	0x08006c37
 8006b54:	08006cfb 	.word	0x08006cfb
 8006b58:	08006cfb 	.word	0x08006cfb
 8006b5c:	08006cfb 	.word	0x08006cfb
 8006b60:	08006c79 	.word	0x08006c79
 8006b64:	08006cfb 	.word	0x08006cfb
 8006b68:	08006cfb 	.word	0x08006cfb
 8006b6c:	08006cfb 	.word	0x08006cfb
 8006b70:	08006cb9 	.word	0x08006cb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 faa6 	bl	80070cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0208 	orr.w	r2, r2, #8
 8006b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	619a      	str	r2, [r3, #24]
      break;
 8006bb2:	e0a5      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fb20 	bl	8007200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	619a      	str	r2, [r3, #24]
      break;
 8006bf4:	e084      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb93 	bl	8007328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0208 	orr.w	r2, r2, #8
 8006c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0204 	bic.w	r2, r2, #4
 8006c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	61da      	str	r2, [r3, #28]
      break;
 8006c34:	e064      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fc05 	bl	800744c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	021a      	lsls	r2, r3, #8
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	61da      	str	r2, [r3, #28]
      break;
 8006c76:	e043      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fc78 	bl	8007574 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0204 	bic.w	r2, r2, #4
 8006ca2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006cb6:	e023      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fcc2 	bl	8007648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006cf8:	e002      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop

08006d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIM_ConfigClockSource+0x1c>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e0f6      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x20a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6f      	ldr	r2, [pc, #444]	; (8006f28 <HAL_TIM_ConfigClockSource+0x214>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f000 80c1 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d70:	4a6d      	ldr	r2, [pc, #436]	; (8006f28 <HAL_TIM_ConfigClockSource+0x214>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f200 80c6 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d78:	4a6c      	ldr	r2, [pc, #432]	; (8006f2c <HAL_TIM_ConfigClockSource+0x218>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f000 80b9 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d80:	4a6a      	ldr	r2, [pc, #424]	; (8006f2c <HAL_TIM_ConfigClockSource+0x218>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f200 80be 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d88:	4a69      	ldr	r2, [pc, #420]	; (8006f30 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f000 80b1 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d90:	4a67      	ldr	r2, [pc, #412]	; (8006f30 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f200 80b6 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	4a66      	ldr	r2, [pc, #408]	; (8006f34 <HAL_TIM_ConfigClockSource+0x220>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 80a9 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	4a64      	ldr	r2, [pc, #400]	; (8006f34 <HAL_TIM_ConfigClockSource+0x220>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 80ae 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	4a63      	ldr	r2, [pc, #396]	; (8006f38 <HAL_TIM_ConfigClockSource+0x224>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f000 80a1 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	4a61      	ldr	r2, [pc, #388]	; (8006f38 <HAL_TIM_ConfigClockSource+0x224>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f200 80a6 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	4a60      	ldr	r2, [pc, #384]	; (8006f3c <HAL_TIM_ConfigClockSource+0x228>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f000 8099 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	4a5e      	ldr	r2, [pc, #376]	; (8006f3c <HAL_TIM_ConfigClockSource+0x228>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f200 809e 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006dcc:	f000 8091 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006dd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006dd4:	f200 8096 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ddc:	f000 8089 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de4:	f200 808e 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	d03e      	beq.n	8006e6c <HAL_TIM_ConfigClockSource+0x158>
 8006dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df2:	f200 8087 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	f000 8086 	beq.w	8006f0a <HAL_TIM_ConfigClockSource+0x1f6>
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d87f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e04:	2b70      	cmp	r3, #112	; 0x70
 8006e06:	d01a      	beq.n	8006e3e <HAL_TIM_ConfigClockSource+0x12a>
 8006e08:	2b70      	cmp	r3, #112	; 0x70
 8006e0a:	d87b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e0c:	2b60      	cmp	r3, #96	; 0x60
 8006e0e:	d050      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x19e>
 8006e10:	2b60      	cmp	r3, #96	; 0x60
 8006e12:	d877      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e14:	2b50      	cmp	r3, #80	; 0x50
 8006e16:	d03c      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x17e>
 8006e18:	2b50      	cmp	r3, #80	; 0x50
 8006e1a:	d873      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d058      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1be>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d86f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e24:	2b30      	cmp	r3, #48	; 0x30
 8006e26:	d064      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d86b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d060      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d867      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d05c      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d05a      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e3c:	e062      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6899      	ldr	r1, [r3, #8]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f000 fce3 	bl	8007818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	609a      	str	r2, [r3, #8]
      break;
 8006e6a:	e04f      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6899      	ldr	r1, [r3, #8]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f000 fccc 	bl	8007818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e8e:	609a      	str	r2, [r3, #8]
      break;
 8006e90:	e03c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fc3e 	bl	8007720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2150      	movs	r1, #80	; 0x50
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fc97 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e02c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fc5d 	bl	800777e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2160      	movs	r1, #96	; 0x60
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fc87 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e01c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 fc1e 	bl	8007720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fc77 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e00c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f000 fc6e 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8006f02:	e003      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e000      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	00100070 	.word	0x00100070
 8006f2c:	00100060 	.word	0x00100060
 8006f30:	00100050 	.word	0x00100050
 8006f34:	00100040 	.word	0x00100040
 8006f38:	00100030 	.word	0x00100030
 8006f3c:	00100020 	.word	0x00100020

08006f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a46      	ldr	r2, [pc, #280]	; (80070a8 <TIM_Base_SetConfig+0x12c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d017      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9a:	d013      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a43      	ldr	r2, [pc, #268]	; (80070ac <TIM_Base_SetConfig+0x130>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a42      	ldr	r2, [pc, #264]	; (80070b0 <TIM_Base_SetConfig+0x134>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a41      	ldr	r2, [pc, #260]	; (80070b4 <TIM_Base_SetConfig+0x138>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a40      	ldr	r2, [pc, #256]	; (80070b8 <TIM_Base_SetConfig+0x13c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a3f      	ldr	r2, [pc, #252]	; (80070bc <TIM_Base_SetConfig+0x140>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a33      	ldr	r2, [pc, #204]	; (80070a8 <TIM_Base_SetConfig+0x12c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d023      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe4:	d01f      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <TIM_Base_SetConfig+0x130>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01b      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <TIM_Base_SetConfig+0x134>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d017      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <TIM_Base_SetConfig+0x138>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <TIM_Base_SetConfig+0x13c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00f      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <TIM_Base_SetConfig+0x144>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00b      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2c      	ldr	r2, [pc, #176]	; (80070c4 <TIM_Base_SetConfig+0x148>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2b      	ldr	r2, [pc, #172]	; (80070c8 <TIM_Base_SetConfig+0x14c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_Base_SetConfig+0xaa>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a26      	ldr	r2, [pc, #152]	; (80070bc <TIM_Base_SetConfig+0x140>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d108      	bne.n	8007038 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <TIM_Base_SetConfig+0x12c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_Base_SetConfig+0x110>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <TIM_Base_SetConfig+0x13c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0x110>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_Base_SetConfig+0x144>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0x110>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <TIM_Base_SetConfig+0x148>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x110>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <TIM_Base_SetConfig+0x14c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x110>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <TIM_Base_SetConfig+0x140>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d103      	bne.n	8007094 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	615a      	str	r2, [r3, #20]
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40015000 	.word	0x40015000
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800

080070cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0302 	bic.w	r3, r3, #2
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <TIM_OC1_SetConfig+0x11c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <TIM_OC1_SetConfig+0x88>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a2f      	ldr	r2, [pc, #188]	; (80071ec <TIM_OC1_SetConfig+0x120>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00f      	beq.n	8007154 <TIM_OC1_SetConfig+0x88>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <TIM_OC1_SetConfig+0x124>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_OC1_SetConfig+0x88>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <TIM_OC1_SetConfig+0x128>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_OC1_SetConfig+0x88>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a2c      	ldr	r2, [pc, #176]	; (80071f8 <TIM_OC1_SetConfig+0x12c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC1_SetConfig+0x88>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <TIM_OC1_SetConfig+0x130>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d10c      	bne.n	800716e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f023 0308 	bic.w	r3, r3, #8
 800715a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <TIM_OC1_SetConfig+0x11c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <TIM_OC1_SetConfig+0xd2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <TIM_OC1_SetConfig+0x120>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_OC1_SetConfig+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <TIM_OC1_SetConfig+0x124>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_OC1_SetConfig+0xd2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <TIM_OC1_SetConfig+0x128>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_OC1_SetConfig+0xd2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <TIM_OC1_SetConfig+0x12c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_OC1_SetConfig+0xd2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a18      	ldr	r2, [pc, #96]	; (80071fc <TIM_OC1_SetConfig+0x130>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d111      	bne.n	80071c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40013400 	.word	0x40013400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	40015000 	.word	0x40015000

08007200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0210 	bic.w	r2, r3, #16
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0320 	bic.w	r3, r3, #32
 800724e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2c      	ldr	r2, [pc, #176]	; (8007310 <TIM_OC2_SetConfig+0x110>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_OC2_SetConfig+0x74>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2b      	ldr	r2, [pc, #172]	; (8007314 <TIM_OC2_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC2_SetConfig+0x74>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <TIM_OC2_SetConfig+0x118>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10d      	bne.n	8007290 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <TIM_OC2_SetConfig+0x110>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <TIM_OC2_SetConfig+0xc0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <TIM_OC2_SetConfig+0x114>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00f      	beq.n	80072c0 <TIM_OC2_SetConfig+0xc0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1e      	ldr	r2, [pc, #120]	; (800731c <TIM_OC2_SetConfig+0x11c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_OC2_SetConfig+0xc0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <TIM_OC2_SetConfig+0x120>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_OC2_SetConfig+0xc0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <TIM_OC2_SetConfig+0x124>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC2_SetConfig+0xc0>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a17      	ldr	r2, [pc, #92]	; (8007318 <TIM_OC2_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d113      	bne.n	80072e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40013400 	.word	0x40013400
 8007318:	40015000 	.word	0x40015000
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800

08007328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <TIM_OC3_SetConfig+0x10c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d007      	beq.n	800739a <TIM_OC3_SetConfig+0x72>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <TIM_OC3_SetConfig+0x110>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d003      	beq.n	800739a <TIM_OC3_SetConfig+0x72>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a29      	ldr	r2, [pc, #164]	; (800743c <TIM_OC3_SetConfig+0x114>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10d      	bne.n	80073b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <TIM_OC3_SetConfig+0x10c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <TIM_OC3_SetConfig+0xbe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a1d      	ldr	r2, [pc, #116]	; (8007438 <TIM_OC3_SetConfig+0x110>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00f      	beq.n	80073e6 <TIM_OC3_SetConfig+0xbe>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <TIM_OC3_SetConfig+0x118>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <TIM_OC3_SetConfig+0xbe>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <TIM_OC3_SetConfig+0x11c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_OC3_SetConfig+0xbe>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <TIM_OC3_SetConfig+0x120>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_OC3_SetConfig+0xbe>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a16      	ldr	r2, [pc, #88]	; (800743c <TIM_OC3_SetConfig+0x114>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d113      	bne.n	800740e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	621a      	str	r2, [r3, #32]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40015000 	.word	0x40015000
 8007440:	40014000 	.word	0x40014000
 8007444:	40014400 	.word	0x40014400
 8007448:	40014800 	.word	0x40014800

0800744c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a2c      	ldr	r2, [pc, #176]	; (800755c <TIM_OC4_SetConfig+0x110>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_OC4_SetConfig+0x74>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2b      	ldr	r2, [pc, #172]	; (8007560 <TIM_OC4_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC4_SetConfig+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <TIM_OC4_SetConfig+0x118>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10d      	bne.n	80074dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	031b      	lsls	r3, r3, #12
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a1f      	ldr	r2, [pc, #124]	; (800755c <TIM_OC4_SetConfig+0x110>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d013      	beq.n	800750c <TIM_OC4_SetConfig+0xc0>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <TIM_OC4_SetConfig+0x114>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00f      	beq.n	800750c <TIM_OC4_SetConfig+0xc0>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <TIM_OC4_SetConfig+0x11c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00b      	beq.n	800750c <TIM_OC4_SetConfig+0xc0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1d      	ldr	r2, [pc, #116]	; (800756c <TIM_OC4_SetConfig+0x120>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d007      	beq.n	800750c <TIM_OC4_SetConfig+0xc0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1c      	ldr	r2, [pc, #112]	; (8007570 <TIM_OC4_SetConfig+0x124>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC4_SetConfig+0xc0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <TIM_OC4_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d113      	bne.n	8007534 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007512:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800751a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	019b      	lsls	r3, r3, #6
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	019b      	lsls	r3, r3, #6
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40013400 	.word	0x40013400
 8007564:	40015000 	.word	0x40015000
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800

08007574 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a19      	ldr	r2, [pc, #100]	; (8007630 <TIM_OC5_SetConfig+0xbc>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_OC5_SetConfig+0x82>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a18      	ldr	r2, [pc, #96]	; (8007634 <TIM_OC5_SetConfig+0xc0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_OC5_SetConfig+0x82>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a17      	ldr	r2, [pc, #92]	; (8007638 <TIM_OC5_SetConfig+0xc4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_OC5_SetConfig+0x82>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a16      	ldr	r2, [pc, #88]	; (800763c <TIM_OC5_SetConfig+0xc8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_OC5_SetConfig+0x82>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <TIM_OC5_SetConfig+0xcc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC5_SetConfig+0x82>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a14      	ldr	r2, [pc, #80]	; (8007644 <TIM_OC5_SetConfig+0xd0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d109      	bne.n	800760a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40012c00 	.word	0x40012c00
 8007634:	40013400 	.word	0x40013400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	40015000 	.word	0x40015000

08007648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800768e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	051b      	lsls	r3, r3, #20
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <TIM_OC6_SetConfig+0xc0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <TIM_OC6_SetConfig+0x84>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a19      	ldr	r2, [pc, #100]	; (800770c <TIM_OC6_SetConfig+0xc4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00f      	beq.n	80076cc <TIM_OC6_SetConfig+0x84>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a18      	ldr	r2, [pc, #96]	; (8007710 <TIM_OC6_SetConfig+0xc8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00b      	beq.n	80076cc <TIM_OC6_SetConfig+0x84>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a17      	ldr	r2, [pc, #92]	; (8007714 <TIM_OC6_SetConfig+0xcc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d007      	beq.n	80076cc <TIM_OC6_SetConfig+0x84>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <TIM_OC6_SetConfig+0xd0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_OC6_SetConfig+0x84>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a15      	ldr	r2, [pc, #84]	; (800771c <TIM_OC6_SetConfig+0xd4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d109      	bne.n	80076e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	029b      	lsls	r3, r3, #10
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800
 800771c:	40015000 	.word	0x40015000

08007720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800774a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0210 	bic.w	r2, r3, #16
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	031b      	lsls	r3, r3, #12
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	f043 0307 	orr.w	r3, r3, #7
 8007804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	609a      	str	r2, [r3, #8]
}
 800780c:	bf00      	nop
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	021a      	lsls	r2, r3, #8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	431a      	orrs	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4313      	orrs	r3, r2
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	609a      	str	r2, [r3, #8]
}
 800784c:	bf00      	nop
 800784e:	371c      	adds	r7, #28
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2201      	movs	r2, #1
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	43db      	mvns	r3, r3
 800787a:	401a      	ands	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_TIMEx_PWMN_Start+0x24>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	e022      	b.n	800790e <HAL_TIMEx_PWMN_Start+0x6a>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d109      	bne.n	80078e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	e015      	b.n	800790e <HAL_TIMEx_PWMN_Start+0x6a>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d109      	bne.n	80078fc <HAL_TIMEx_PWMN_Start+0x58>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	bf14      	ite	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	2300      	moveq	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e008      	b.n	800790e <HAL_TIMEx_PWMN_Start+0x6a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	bf14      	ite	ne
 8007908:	2301      	movne	r3, #1
 800790a:	2300      	moveq	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e073      	b.n	80079fe <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <HAL_TIMEx_PWMN_Start+0x82>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007924:	e013      	b.n	800794e <HAL_TIMEx_PWMN_Start+0xaa>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b04      	cmp	r3, #4
 800792a:	d104      	bne.n	8007936 <HAL_TIMEx_PWMN_Start+0x92>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007934:	e00b      	b.n	800794e <HAL_TIMEx_PWMN_Start+0xaa>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d104      	bne.n	8007946 <HAL_TIMEx_PWMN_Start+0xa2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007944:	e003      	b.n	800794e <HAL_TIMEx_PWMN_Start+0xaa>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2204      	movs	r2, #4
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fa52 	bl	8007e00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800796a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <HAL_TIMEx_PWMN_Start+0x164>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d022      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797e:	d01d      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <HAL_TIMEx_PWMN_Start+0x168>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <HAL_TIMEx_PWMN_Start+0x170>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_TIMEx_PWMN_Start+0x174>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <HAL_TIMEx_PWMN_Start+0x178>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIMEx_PWMN_Start+0x118>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <HAL_TIMEx_PWMN_Start+0x17c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d115      	bne.n	80079e8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <HAL_TIMEx_PWMN_Start+0x180>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b06      	cmp	r3, #6
 80079cc:	d015      	beq.n	80079fa <HAL_TIMEx_PWMN_Start+0x156>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d4:	d011      	beq.n	80079fa <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0201 	orr.w	r2, r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e6:	e008      	b.n	80079fa <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e000      	b.n	80079fc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	40000c00 	.word	0x40000c00
 8007a18:	40013400 	.word	0x40013400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40015000 	.word	0x40015000
 8007a24:	00010007 	.word	0x00010007

08007a28 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f9e0 	bl	8007e00 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10f      	bne.n	8007a70 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6a1a      	ldr	r2, [r3, #32]
 8007a56:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d107      	bne.n	8007a70 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10f      	bne.n	8007aa0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <HAL_TIMEx_PWMN_Stop+0x88>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aae:	e013      	b.n	8007ad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d104      	bne.n	8007ac0 <HAL_TIMEx_PWMN_Stop+0x98>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007abe:	e00b      	b.n	8007ad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d104      	bne.n	8007ad0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ace:	e003      	b.n	8007ad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e074      	b.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a34      	ldr	r2, [pc, #208]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a31      	ldr	r2, [pc, #196]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a21      	ldr	r2, [pc, #132]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d022      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7c:	d01d      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1f      	ldr	r2, [pc, #124]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d018      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40015000 	.word	0x40015000
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	40014000 	.word	0x40014000

08007c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e096      	b.n	8007d5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a2f      	ldr	r2, [pc, #188]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d009      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a2d      	ldr	r2, [pc, #180]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d106      	bne.n	8007cd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d12b      	bne.n	8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	051b      	lsls	r3, r3, #20
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d106      	bne.n	8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40015000 	.word	0x40015000

08007d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	2204      	movs	r2, #4
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1a      	ldr	r2, [r3, #32]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	43db      	mvns	r3, r3
 8007e22:	401a      	ands	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e042      	b.n	8007ee2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fa f9b6 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2224      	movs	r2, #36	; 0x24
 8007e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0201 	bic.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc51 	bl	8008734 <UART_SetConfig>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e022      	b.n	8007ee2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 ff41 	bl	8008d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 ffc8 	bl	8008e70 <UART_CheckIdleState>
 8007ee0:	4603      	mov	r3, r0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b08a      	sub	sp, #40	; 0x28
 8007eee:	af02      	add	r7, sp, #8
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	603b      	str	r3, [r7, #0]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	f040 8083 	bne.w	800800c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_UART_Transmit+0x28>
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e07b      	b.n	800800e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_UART_Transmit+0x3a>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e074      	b.n	800800e <HAL_UART_Transmit+0x124>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2221      	movs	r2, #33	; 0x21
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f3c:	f7fa fb84 	bl	8002648 <HAL_GetTick>
 8007f40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	88fa      	ldrh	r2, [r7, #6]
 8007f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d108      	bne.n	8007f6e <HAL_UART_Transmit+0x84>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e003      	b.n	8007f76 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f7e:	e02c      	b.n	8007fda <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	2180      	movs	r1, #128	; 0x80
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 ffbb 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e039      	b.n	800800e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	e007      	b.n	8007fc8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1cc      	bne.n	8007f80 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2200      	movs	r2, #0
 8007fee:	2140      	movs	r1, #64	; 0x40
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 ff88 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e006      	b.n	800800e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	; 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802c:	2b20      	cmp	r3, #32
 800802e:	d142      	bne.n	80080b6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Receive_IT+0x24>
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e03b      	b.n	80080b8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_UART_Receive_IT+0x36>
 800804a:	2302      	movs	r3, #2
 800804c:	e034      	b.n	80080b8 <HAL_UART_Receive_IT+0xa0>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <HAL_UART_Receive_IT+0xa8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d01f      	beq.n	80080a6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d018      	beq.n	80080a6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	613b      	str	r3, [r7, #16]
   return(result);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	623b      	str	r3, [r7, #32]
 8008094:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	461a      	mov	r2, r3
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 fff3 	bl	8009098 <UART_Start_Receive_IT>
 80080b2:	4603      	mov	r3, r0
 80080b4:	e000      	b.n	80080b8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3728      	adds	r7, #40	; 0x28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40008000 	.word	0x40008000

080080c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b0ba      	sub	sp, #232	; 0xe8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80080f2:	4013      	ands	r3, r2
 80080f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11b      	bne.n	8008138 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d015      	beq.n	8008138 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 82d6 	beq.w	80086da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
      }
      return;
 8008136:	e2d0      	b.n	80086da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 811f 	beq.w	8008380 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008146:	4b8b      	ldr	r3, [pc, #556]	; (8008374 <HAL_UART_IRQHandler+0x2b0>)
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800814e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008152:	4b89      	ldr	r3, [pc, #548]	; (8008378 <HAL_UART_IRQHandler+0x2b4>)
 8008154:	4013      	ands	r3, r2
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8112 	beq.w	8008380 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d011      	beq.n	800818c <HAL_UART_IRQHandler+0xc8>
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800818c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d011      	beq.n	80081bc <HAL_UART_IRQHandler+0xf8>
 8008198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2202      	movs	r2, #2
 80081aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	f043 0204 	orr.w	r2, r3, #4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <HAL_UART_IRQHandler+0x128>
 80081c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00b      	beq.n	80081ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2204      	movs	r2, #4
 80081da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e2:	f043 0202 	orr.w	r2, r3, #2
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008204:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008208:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <HAL_UART_IRQHandler+0x2b0>)
 800820a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2208      	movs	r2, #8
 8008216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821e:	f043 0208 	orr.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008230:	2b00      	cmp	r3, #0
 8008232:	d012      	beq.n	800825a <HAL_UART_IRQHandler+0x196>
 8008234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00c      	beq.n	800825a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008250:	f043 0220 	orr.w	r2, r3, #32
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 823c 	beq.w	80086de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d013      	beq.n	800829a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800827e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d005      	beq.n	80082be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d04f      	beq.n	800835e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f814 	bl	80092ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d141      	bne.n	8008356 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800830a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d9      	bne.n	80082d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d013      	beq.n	800834e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	4a14      	ldr	r2, [pc, #80]	; (800837c <HAL_UART_IRQHandler+0x2b8>)
 800832c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	4618      	mov	r0, r3
 8008334:	f7fc fa16 	bl	8004764 <HAL_DMA_Abort_IT>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d017      	beq.n	800836e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e00f      	b.n	800836e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9da 	bl	8008708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	e00b      	b.n	800836e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9d6 	bl	8008708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	e007      	b.n	800836e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9d2 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800836c:	e1b7      	b.n	80086de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836e:	bf00      	nop
    return;
 8008370:	e1b5      	b.n	80086de <HAL_UART_IRQHandler+0x61a>
 8008372:	bf00      	nop
 8008374:	10000001 	.word	0x10000001
 8008378:	04000120 	.word	0x04000120
 800837c:	080093b9 	.word	0x080093b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008384:	2b01      	cmp	r3, #1
 8008386:	f040 814a 	bne.w	800861e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8143 	beq.w	800861e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 813c 	beq.w	800861e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2210      	movs	r2, #16
 80083ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b40      	cmp	r3, #64	; 0x40
 80083ba:	f040 80b5 	bne.w	8008528 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8187 	beq.w	80086e2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083de:	429a      	cmp	r2, r3
 80083e0:	f080 817f 	bcs.w	80086e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 8086 	bne.w	800850c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800841c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800842a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800842e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1da      	bne.n	8008400 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800845a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800846e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008472:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008476:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e1      	bne.n	800844a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800849c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e3      	bne.n	8008486 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084dc:	f023 0310 	bic.w	r3, r3, #16
 80084e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80084f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e4      	bne.n	80084cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008506:	4618      	mov	r0, r3
 8008508:	f7fc f8d3 	bl	80046b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008518:	b29b      	uxth	r3, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	b29b      	uxth	r3, r3
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f8fb 	bl	800871c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008526:	e0dc      	b.n	80086e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008534:	b29b      	uxth	r3, r3
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 80ce 	beq.w	80086e6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800854a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80c9 	beq.w	80086e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
 8008578:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800857c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e4      	bne.n	8008554 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	623b      	str	r3, [r7, #32]
   return(result);
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085b2:	633a      	str	r2, [r7, #48]	; 0x30
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e1      	bne.n	800858a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0310 	bic.w	r3, r3, #16
 80085ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	617b      	str	r3, [r7, #20]
   return(result);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e4      	bne.n	80085da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f880 	bl	800871c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800861c:	e063      	b.n	80086e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00e      	beq.n	8008648 <HAL_UART_IRQHandler+0x584>
 800862a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800862e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800863e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fb57 	bl	8009cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008646:	e051      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008650:	2b00      	cmp	r3, #0
 8008652:	d014      	beq.n	800867e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b00      	cmp	r3, #0
 800865e:	d105      	bne.n	800866c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008670:	2b00      	cmp	r3, #0
 8008672:	d03a      	beq.n	80086ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	4798      	blx	r3
    }
    return;
 800867c:	e035      	b.n	80086ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_UART_IRQHandler+0x5da>
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fea4 	bl	80093e4 <UART_EndTransmit_IT>
    return;
 800869c:	e026      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <HAL_UART_IRQHandler+0x5fa>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fb30 	bl	8009d1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086bc:	e016      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d010      	beq.n	80086ec <HAL_UART_IRQHandler+0x628>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da0c      	bge.n	80086ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 fb18 	bl	8009d08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086d8:	e008      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
      return;
 80086da:	bf00      	nop
 80086dc:	e006      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
    return;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
      return;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
      return;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <HAL_UART_IRQHandler+0x628>
    return;
 80086ea:	bf00      	nop
  }
}
 80086ec:	37e8      	adds	r7, #232	; 0xe8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop

080086f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008738:	b08c      	sub	sp, #48	; 0x30
 800873a:	af00      	add	r7, sp, #0
 800873c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	431a      	orrs	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	431a      	orrs	r2, r3
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	4313      	orrs	r3, r2
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4baa      	ldr	r3, [pc, #680]	; (8008a0c <UART_SetConfig+0x2d8>)
 8008764:	4013      	ands	r3, r2
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800876c:	430b      	orrs	r3, r1
 800876e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a9f      	ldr	r2, [pc, #636]	; (8008a10 <UART_SetConfig+0x2dc>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d004      	beq.n	80087a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879c:	4313      	orrs	r3, r2
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	f023 010f 	bic.w	r1, r3, #15
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a90      	ldr	r2, [pc, #576]	; (8008a14 <UART_SetConfig+0x2e0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d125      	bne.n	8008824 <UART_SetConfig+0xf0>
 80087d8:	4b8f      	ldr	r3, [pc, #572]	; (8008a18 <UART_SetConfig+0x2e4>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d81a      	bhi.n	800881c <UART_SetConfig+0xe8>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <UART_SetConfig+0xb8>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	0800880d 	.word	0x0800880d
 80087f4:	08008805 	.word	0x08008805
 80087f8:	08008815 	.word	0x08008815
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e116      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008804:	2302      	movs	r3, #2
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880a:	e112      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800880c:	2304      	movs	r3, #4
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e10e      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008814:	2308      	movs	r3, #8
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e10a      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800881c:	2310      	movs	r3, #16
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008822:	e106      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a7c      	ldr	r2, [pc, #496]	; (8008a1c <UART_SetConfig+0x2e8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d138      	bne.n	80088a0 <UART_SetConfig+0x16c>
 800882e:	4b7a      	ldr	r3, [pc, #488]	; (8008a18 <UART_SetConfig+0x2e4>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008834:	f003 030c 	and.w	r3, r3, #12
 8008838:	2b0c      	cmp	r3, #12
 800883a:	d82d      	bhi.n	8008898 <UART_SetConfig+0x164>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0x110>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008879 	.word	0x08008879
 8008848:	08008899 	.word	0x08008899
 800884c:	08008899 	.word	0x08008899
 8008850:	08008899 	.word	0x08008899
 8008854:	08008889 	.word	0x08008889
 8008858:	08008899 	.word	0x08008899
 800885c:	08008899 	.word	0x08008899
 8008860:	08008899 	.word	0x08008899
 8008864:	08008881 	.word	0x08008881
 8008868:	08008899 	.word	0x08008899
 800886c:	08008899 	.word	0x08008899
 8008870:	08008899 	.word	0x08008899
 8008874:	08008891 	.word	0x08008891
 8008878:	2300      	movs	r3, #0
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e0d8      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008880:	2302      	movs	r3, #2
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e0d4      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008888:	2304      	movs	r3, #4
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888e:	e0d0      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008890:	2308      	movs	r3, #8
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e0cc      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008898:	2310      	movs	r3, #16
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e0c8      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a5e      	ldr	r2, [pc, #376]	; (8008a20 <UART_SetConfig+0x2ec>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d125      	bne.n	80088f6 <UART_SetConfig+0x1c2>
 80088aa:	4b5b      	ldr	r3, [pc, #364]	; (8008a18 <UART_SetConfig+0x2e4>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d016      	beq.n	80088e6 <UART_SetConfig+0x1b2>
 80088b8:	2b30      	cmp	r3, #48	; 0x30
 80088ba:	d818      	bhi.n	80088ee <UART_SetConfig+0x1ba>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d00a      	beq.n	80088d6 <UART_SetConfig+0x1a2>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d814      	bhi.n	80088ee <UART_SetConfig+0x1ba>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <UART_SetConfig+0x19a>
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d008      	beq.n	80088de <UART_SetConfig+0x1aa>
 80088cc:	e00f      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d4:	e0ad      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088d6:	2302      	movs	r3, #2
 80088d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088dc:	e0a9      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088de:	2304      	movs	r3, #4
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e4:	e0a5      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088e6:	2308      	movs	r3, #8
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ec:	e0a1      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088ee:	2310      	movs	r3, #16
 80088f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f4:	e09d      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a4a      	ldr	r2, [pc, #296]	; (8008a24 <UART_SetConfig+0x2f0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d125      	bne.n	800894c <UART_SetConfig+0x218>
 8008900:	4b45      	ldr	r3, [pc, #276]	; (8008a18 <UART_SetConfig+0x2e4>)
 8008902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800890a:	2bc0      	cmp	r3, #192	; 0xc0
 800890c:	d016      	beq.n	800893c <UART_SetConfig+0x208>
 800890e:	2bc0      	cmp	r3, #192	; 0xc0
 8008910:	d818      	bhi.n	8008944 <UART_SetConfig+0x210>
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d00a      	beq.n	800892c <UART_SetConfig+0x1f8>
 8008916:	2b80      	cmp	r3, #128	; 0x80
 8008918:	d814      	bhi.n	8008944 <UART_SetConfig+0x210>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <UART_SetConfig+0x1f0>
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d008      	beq.n	8008934 <UART_SetConfig+0x200>
 8008922:	e00f      	b.n	8008944 <UART_SetConfig+0x210>
 8008924:	2300      	movs	r3, #0
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e082      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e07e      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e07a      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e076      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894a:	e072      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a35      	ldr	r2, [pc, #212]	; (8008a28 <UART_SetConfig+0x2f4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d12a      	bne.n	80089ac <UART_SetConfig+0x278>
 8008956:	4b30      	ldr	r3, [pc, #192]	; (8008a18 <UART_SetConfig+0x2e4>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008964:	d01a      	beq.n	800899c <UART_SetConfig+0x268>
 8008966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800896a:	d81b      	bhi.n	80089a4 <UART_SetConfig+0x270>
 800896c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008970:	d00c      	beq.n	800898c <UART_SetConfig+0x258>
 8008972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008976:	d815      	bhi.n	80089a4 <UART_SetConfig+0x270>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <UART_SetConfig+0x250>
 800897c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008980:	d008      	beq.n	8008994 <UART_SetConfig+0x260>
 8008982:	e00f      	b.n	80089a4 <UART_SetConfig+0x270>
 8008984:	2300      	movs	r3, #0
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898a:	e052      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800898c:	2302      	movs	r3, #2
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008992:	e04e      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e04a      	b.n	8008a32 <UART_SetConfig+0x2fe>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e046      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089aa:	e042      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <UART_SetConfig+0x2dc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d13a      	bne.n	8008a2c <UART_SetConfig+0x2f8>
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <UART_SetConfig+0x2e4>)
 80089b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c4:	d01a      	beq.n	80089fc <UART_SetConfig+0x2c8>
 80089c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ca:	d81b      	bhi.n	8008a04 <UART_SetConfig+0x2d0>
 80089cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d0:	d00c      	beq.n	80089ec <UART_SetConfig+0x2b8>
 80089d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d6:	d815      	bhi.n	8008a04 <UART_SetConfig+0x2d0>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <UART_SetConfig+0x2b0>
 80089dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e0:	d008      	beq.n	80089f4 <UART_SetConfig+0x2c0>
 80089e2:	e00f      	b.n	8008a04 <UART_SetConfig+0x2d0>
 80089e4:	2300      	movs	r3, #0
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ea:	e022      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80089ec:	2302      	movs	r3, #2
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089f2:	e01e      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80089f4:	2304      	movs	r3, #4
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089fa:	e01a      	b.n	8008a32 <UART_SetConfig+0x2fe>
 80089fc:	2308      	movs	r3, #8
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a02:	e016      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008a04:	2310      	movs	r3, #16
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	e012      	b.n	8008a32 <UART_SetConfig+0x2fe>
 8008a0c:	cfff69f3 	.word	0xcfff69f3
 8008a10:	40008000 	.word	0x40008000
 8008a14:	40013800 	.word	0x40013800
 8008a18:	40021000 	.word	0x40021000
 8008a1c:	40004400 	.word	0x40004400
 8008a20:	40004800 	.word	0x40004800
 8008a24:	40004c00 	.word	0x40004c00
 8008a28:	40005000 	.word	0x40005000
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4aae      	ldr	r2, [pc, #696]	; (8008cf0 <UART_SetConfig+0x5bc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	f040 8097 	bne.w	8008b6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d823      	bhi.n	8008a8e <UART_SetConfig+0x35a>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x318>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a71 	.word	0x08008a71
 8008a50:	08008a8f 	.word	0x08008a8f
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a8f 	.word	0x08008a8f
 8008a5c:	08008a7f 	.word	0x08008a7f
 8008a60:	08008a8f 	.word	0x08008a8f
 8008a64:	08008a8f 	.word	0x08008a8f
 8008a68:	08008a8f 	.word	0x08008a8f
 8008a6c:	08008a87 	.word	0x08008a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a70:	f7fc ff62 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8008a74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a76:	e010      	b.n	8008a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a78:	4b9e      	ldr	r3, [pc, #632]	; (8008cf4 <UART_SetConfig+0x5c0>)
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a7c:	e00d      	b.n	8008a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a7e:	f7fc feed 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8008a82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a84:	e009      	b.n	8008a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a8c:	e005      	b.n	8008a9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8130 	beq.w	8008d02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	4a94      	ldr	r2, [pc, #592]	; (8008cf8 <UART_SetConfig+0x5c4>)
 8008aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d305      	bcc.n	8008ad2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d903      	bls.n	8008ada <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ad8:	e113      	b.n	8008d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	2200      	movs	r2, #0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	60fa      	str	r2, [r7, #12]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	4a84      	ldr	r2, [pc, #528]	; (8008cf8 <UART_SetConfig+0x5c4>)
 8008ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2200      	movs	r2, #0
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008afc:	f7f8 f8dc 	bl	8000cb8 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	020b      	lsls	r3, r1, #8
 8008b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b16:	0202      	lsls	r2, r0, #8
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	6849      	ldr	r1, [r1, #4]
 8008b1c:	0849      	lsrs	r1, r1, #1
 8008b1e:	2000      	movs	r0, #0
 8008b20:	460c      	mov	r4, r1
 8008b22:	4605      	mov	r5, r0
 8008b24:	eb12 0804 	adds.w	r8, r2, r4
 8008b28:	eb43 0905 	adc.w	r9, r3, r5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	469a      	mov	sl, r3
 8008b34:	4693      	mov	fp, r2
 8008b36:	4652      	mov	r2, sl
 8008b38:	465b      	mov	r3, fp
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f8 f8bb 	bl	8000cb8 <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4613      	mov	r3, r2
 8008b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b50:	d308      	bcc.n	8008b64 <UART_SetConfig+0x430>
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b58:	d204      	bcs.n	8008b64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	60da      	str	r2, [r3, #12]
 8008b62:	e0ce      	b.n	8008d02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b6a:	e0ca      	b.n	8008d02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b74:	d166      	bne.n	8008c44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d827      	bhi.n	8008bce <UART_SetConfig+0x49a>
 8008b7e:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <UART_SetConfig+0x450>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	08008bcf 	.word	0x08008bcf
 8008b94:	08008bbf 	.word	0x08008bbf
 8008b98:	08008bcf 	.word	0x08008bcf
 8008b9c:	08008bcf 	.word	0x08008bcf
 8008ba0:	08008bcf 	.word	0x08008bcf
 8008ba4:	08008bc7 	.word	0x08008bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba8:	f7fc fec6 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bae:	e014      	b.n	8008bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb0:	f7fc fed8 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8008bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bb6:	e010      	b.n	8008bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb8:	4b4e      	ldr	r3, [pc, #312]	; (8008cf4 <UART_SetConfig+0x5c0>)
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bbc:	e00d      	b.n	8008bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bbe:	f7fc fe4d 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bc4:	e009      	b.n	8008bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bcc:	e005      	b.n	8008bda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8090 	beq.w	8008d02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	4a44      	ldr	r2, [pc, #272]	; (8008cf8 <UART_SetConfig+0x5c4>)
 8008be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bf4:	005a      	lsls	r2, r3, #1
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	441a      	add	r2, r3
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d916      	bls.n	8008c3c <UART_SetConfig+0x508>
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c14:	d212      	bcs.n	8008c3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f023 030f 	bic.w	r3, r3, #15
 8008c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	8bfb      	ldrh	r3, [r7, #30]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	8bfa      	ldrh	r2, [r7, #30]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	e062      	b.n	8008d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c42:	e05e      	b.n	8008d02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d828      	bhi.n	8008c9e <UART_SetConfig+0x56a>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <UART_SetConfig+0x520>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008c9f 	.word	0x08008c9f
 8008c64:	08008c8f 	.word	0x08008c8f
 8008c68:	08008c9f 	.word	0x08008c9f
 8008c6c:	08008c9f 	.word	0x08008c9f
 8008c70:	08008c9f 	.word	0x08008c9f
 8008c74:	08008c97 	.word	0x08008c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c78:	f7fc fe5e 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c7e:	e014      	b.n	8008caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c80:	f7fc fe70 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c86:	e010      	b.n	8008caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c88:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <UART_SetConfig+0x5c0>)
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c8c:	e00d      	b.n	8008caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8e:	f7fc fde5 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8008c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c94:	e009      	b.n	8008caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c9c:	e005      	b.n	8008caa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d028      	beq.n	8008d02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <UART_SetConfig+0x5c4>)
 8008cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	441a      	add	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	d910      	bls.n	8008cfc <UART_SetConfig+0x5c8>
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce0:	d20c      	bcs.n	8008cfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60da      	str	r2, [r3, #12]
 8008cec:	e009      	b.n	8008d02 <UART_SetConfig+0x5ce>
 8008cee:	bf00      	nop
 8008cf0:	40008000 	.word	0x40008000
 8008cf4:	00f42400 	.word	0x00f42400
 8008cf8:	0800d044 	.word	0x0800d044
      }
      else
      {
        ret = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2200      	movs	r2, #0
 8008d16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3730      	adds	r7, #48	; 0x30
 8008d26:	46bd      	mov	sp, r7
 8008d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2a:	d10a      	bne.n	8008e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e80:	f7f9 fbe2 	bl	8002648 <HAL_GetTick>
 8008e84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d10e      	bne.n	8008eb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f82f 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e025      	b.n	8008efe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d10e      	bne.n	8008ede <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f819 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e00f      	b.n	8008efe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b09c      	sub	sp, #112	; 0x70
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	603b      	str	r3, [r7, #0]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f16:	e0a9      	b.n	800906c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	f000 80a5 	beq.w	800906c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f22:	f7f9 fb91 	bl	8002648 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d302      	bcc.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d140      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e6      	bne.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	663b      	str	r3, [r7, #96]	; 0x60
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e5      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e069      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d051      	beq.n	800906c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fd6:	d149      	bne.n	800906c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fe0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
 8009002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e6      	bne.n	8008fe2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	613b      	str	r3, [r7, #16]
   return(result);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f023 0301 	bic.w	r3, r3, #1
 800902a:	66bb      	str	r3, [r7, #104]	; 0x68
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009034:	623a      	str	r2, [r7, #32]
 8009036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	69f9      	ldr	r1, [r7, #28]
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	61bb      	str	r3, [r7, #24]
   return(result);
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e5      	bne.n	8009014 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e010      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69da      	ldr	r2, [r3, #28]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4013      	ands	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	bf0c      	ite	eq
 800907c:	2301      	moveq	r3, #1
 800907e:	2300      	movne	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	429a      	cmp	r2, r3
 8009088:	f43f af46 	beq.w	8008f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3770      	adds	r7, #112	; 0x70
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009098:	b480      	push	{r7}
 800909a:	b0a3      	sub	sp, #140	; 0x8c
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ca:	d10e      	bne.n	80090ea <UART_Start_Receive_IT+0x52>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <UART_Start_Receive_IT+0x48>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090de:	e02d      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	22ff      	movs	r2, #255	; 0xff
 80090e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e8:	e028      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10d      	bne.n	800910e <UART_Start_Receive_IT+0x76>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <UART_Start_Receive_IT+0x6c>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	22ff      	movs	r2, #255	; 0xff
 80090fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009102:	e01b      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	227f      	movs	r2, #127	; 0x7f
 8009108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800910c:	e016      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009116:	d10d      	bne.n	8009134 <UART_Start_Receive_IT+0x9c>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <UART_Start_Receive_IT+0x92>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	227f      	movs	r2, #127	; 0x7f
 8009124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009128:	e008      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	223f      	movs	r2, #63	; 0x3f
 800912e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009132:	e003      	b.n	800913c <UART_Start_Receive_IT+0xa4>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2222      	movs	r2, #34	; 0x22
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800915c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009170:	673a      	str	r2, [r7, #112]	; 0x70
 8009172:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009176:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800917e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e3      	bne.n	800914c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800918c:	d153      	bne.n	8009236 <UART_Start_Receive_IT+0x19e>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	429a      	cmp	r2, r3
 8009198:	d34d      	bcc.n	8009236 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a2:	d107      	bne.n	80091b4 <UART_Start_Receive_IT+0x11c>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a4b      	ldr	r2, [pc, #300]	; (80092dc <UART_Start_Receive_IT+0x244>)
 80091b0:	671a      	str	r2, [r3, #112]	; 0x70
 80091b2:	e002      	b.n	80091ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4a4a      	ldr	r2, [pc, #296]	; (80092e0 <UART_Start_Receive_IT+0x248>)
 80091b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01a      	beq.n	8009200 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e4      	bne.n	80091ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3308      	adds	r3, #8
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009220:	64ba      	str	r2, [r7, #72]	; 0x48
 8009222:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800922e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_Start_Receive_IT+0x168>
 8009234:	e04a      	b.n	80092cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923e:	d107      	bne.n	8009250 <UART_Start_Receive_IT+0x1b8>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a26      	ldr	r2, [pc, #152]	; (80092e4 <UART_Start_Receive_IT+0x24c>)
 800924c:	671a      	str	r2, [r3, #112]	; 0x70
 800924e:	e002      	b.n	8009256 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a25      	ldr	r2, [pc, #148]	; (80092e8 <UART_Start_Receive_IT+0x250>)
 8009254:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d019      	beq.n	800929a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800927a:	677b      	str	r3, [r7, #116]	; 0x74
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009284:	637b      	str	r3, [r7, #52]	; 0x34
 8009286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800928a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_Start_Receive_IT+0x1ce>
 8009298:	e018      	b.n	80092cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	613b      	str	r3, [r7, #16]
   return(result);
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f043 0320 	orr.w	r3, r3, #32
 80092ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b8:	623b      	str	r3, [r7, #32]
 80092ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	69f9      	ldr	r1, [r7, #28]
 80092be:	6a3a      	ldr	r2, [r7, #32]
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	378c      	adds	r7, #140	; 0x8c
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	080099f5 	.word	0x080099f5
 80092e0:	080096fd 	.word	0x080096fd
 80092e4:	0800959b 	.word	0x0800959b
 80092e8:	0800943b 	.word	0x0800943b

080092ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b095      	sub	sp, #84	; 0x54
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009312:	643b      	str	r3, [r7, #64]	; 0x40
 8009314:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e6      	bne.n	80092f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	61fb      	str	r3, [r7, #28]
   return(result);
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	64bb      	str	r3, [r7, #72]	; 0x48
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800934a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009362:	2b01      	cmp	r3, #1
 8009364:	d118      	bne.n	8009398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	60bb      	str	r3, [r7, #8]
   return(result);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f023 0310 	bic.w	r3, r3, #16
 800937a:	647b      	str	r3, [r7, #68]	; 0x44
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6979      	ldr	r1, [r7, #20]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	613b      	str	r3, [r7, #16]
   return(result);
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e6      	bne.n	8009366 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093ac:	bf00      	nop
 80093ae:	3754      	adds	r7, #84	; 0x54
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff f996 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	613b      	str	r3, [r7, #16]
   return(result);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e6      	bne.n	80093ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff f961 	bl	80086f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009432:	bf00      	nop
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b096      	sub	sp, #88	; 0x58
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009448:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009452:	2b22      	cmp	r3, #34	; 0x22
 8009454:	f040 8095 	bne.w	8009582 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009462:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009466:	b2d9      	uxtb	r1, r3
 8009468:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800946c:	b2da      	uxtb	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009472:	400a      	ands	r2, r1
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d178      	bne.n	8009592 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094b4:	653b      	str	r3, [r7, #80]	; 0x50
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094be:	647b      	str	r3, [r7, #68]	; 0x44
 80094c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e6      	bne.n	80094a0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	623b      	str	r3, [r7, #32]
   return(result);
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3308      	adds	r3, #8
 80094f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094f2:	633a      	str	r2, [r7, #48]	; 0x30
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e5      	bne.n	80094d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d12e      	bne.n	800957a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0310 	bic.w	r3, r3, #16
 8009536:	64bb      	str	r3, [r7, #72]	; 0x48
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	69b9      	ldr	r1, [r7, #24]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	617b      	str	r3, [r7, #20]
   return(result);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e6      	bne.n	8009522 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f003 0310 	and.w	r3, r3, #16
 800955e:	2b10      	cmp	r3, #16
 8009560:	d103      	bne.n	800956a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2210      	movs	r2, #16
 8009568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff f8d2 	bl	800871c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009578:	e00b      	b.n	8009592 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7f8 fb28 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 8009580:	e007      	b.n	8009592 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0208 	orr.w	r2, r2, #8
 8009590:	619a      	str	r2, [r3, #24]
}
 8009592:	bf00      	nop
 8009594:	3758      	adds	r7, #88	; 0x58
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b096      	sub	sp, #88	; 0x58
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b2:	2b22      	cmp	r3, #34	; 0x22
 80095b4:	f040 8095 	bne.w	80096e2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095c8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095d0:	4013      	ands	r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	1c9a      	adds	r2, r3, #2
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d178      	bne.n	80096f2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961e:	643b      	str	r3, [r7, #64]	; 0x40
 8009620:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e6      	bne.n	8009600 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	61fb      	str	r3, [r7, #28]
   return(result);
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	64bb      	str	r3, [r7, #72]	; 0x48
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3308      	adds	r3, #8
 8009650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e5      	bne.n	8009632 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d12e      	bne.n	80096da <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f023 0310 	bic.w	r3, r3, #16
 8009696:	647b      	str	r3, [r7, #68]	; 0x44
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6979      	ldr	r1, [r7, #20]
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	613b      	str	r3, [r7, #16]
   return(result);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b10      	cmp	r3, #16
 80096c0:	d103      	bne.n	80096ca <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2210      	movs	r2, #16
 80096c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff f822 	bl	800871c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096d8:	e00b      	b.n	80096f2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f8 fa78 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 80096e0:	e007      	b.n	80096f2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0208 	orr.w	r2, r2, #8
 80096f0:	619a      	str	r2, [r3, #24]
}
 80096f2:	bf00      	nop
 80096f4:	3758      	adds	r7, #88	; 0x58
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0a6      	sub	sp, #152	; 0x98
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800970a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009732:	2b22      	cmp	r3, #34	; 0x22
 8009734:	f040 814f 	bne.w	80099d6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800973e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009742:	e0f6      	b.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800974e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009752:	b2d9      	uxtb	r1, r3
 8009754:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009758:	b2da      	uxtb	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	400a      	ands	r2, r1
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009774:	b29b      	uxth	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800978a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	2b00      	cmp	r3, #0
 8009794:	d053      	beq.n	800983e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d011      	beq.n	80097c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80097a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2201      	movs	r2, #1
 80097b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	f043 0201 	orr.w	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d011      	beq.n	80097f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2202      	movs	r2, #2
 80097e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ec:	f043 0204 	orr.w	r2, r3, #4
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d011      	beq.n	8009826 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800981c:	f043 0202 	orr.w	r2, r3, #2
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fe ff69 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009844:	b29b      	uxth	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d173      	bne.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800985a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800985e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800986c:	66bb      	str	r3, [r7, #104]	; 0x68
 800986e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009872:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800987a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e4      	bne.n	800984a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009896:	f023 0301 	bic.w	r3, r3, #1
 800989a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3308      	adds	r3, #8
 80098a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098a4:	657a      	str	r2, [r7, #84]	; 0x54
 80098a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e3      	bne.n	8009880 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d12e      	bne.n	800992c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	f023 0310 	bic.w	r3, r3, #16
 80098e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098f2:	643b      	str	r3, [r7, #64]	; 0x40
 80098f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e6      	bne.n	80098d4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b10      	cmp	r3, #16
 8009912:	d103      	bne.n	800991c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2210      	movs	r2, #16
 800991a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe fef9 	bl	800871c <HAL_UARTEx_RxEventCallback>
 800992a:	e002      	b.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7f8 f94f 	bl	8001bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009932:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009936:	2b00      	cmp	r3, #0
 8009938:	d006      	beq.n	8009948 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800993a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	f47f aefe 	bne.w	8009744 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800994e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009952:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009956:	2b00      	cmp	r3, #0
 8009958:	d045      	beq.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009960:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009964:	429a      	cmp	r2, r3
 8009966:	d23e      	bcs.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	61fb      	str	r3, [r7, #28]
   return(result);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800997e:	673b      	str	r3, [r7, #112]	; 0x70
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e5      	bne.n	8009968 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a14      	ldr	r2, [pc, #80]	; (80099f0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f043 0320 	orr.w	r3, r3, #32
 80099b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6979      	ldr	r1, [r7, #20]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	613b      	str	r3, [r7, #16]
   return(result);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d4:	e007      	b.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699a      	ldr	r2, [r3, #24]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f042 0208 	orr.w	r2, r2, #8
 80099e4:	619a      	str	r2, [r3, #24]
}
 80099e6:	bf00      	nop
 80099e8:	3798      	adds	r7, #152	; 0x98
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	0800943b 	.word	0x0800943b

080099f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b0a8      	sub	sp, #160	; 0xa0
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a02:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2a:	2b22      	cmp	r3, #34	; 0x22
 8009a2c:	f040 8153 	bne.w	8009cd6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a36:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a3a:	e0fa      	b.n	8009c32 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a4e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a56:	4013      	ands	r3, r2
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	1c9a      	adds	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d053      	beq.n	8009b3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d011      	beq.n	8009ac2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab8:	f043 0201 	orr.w	r2, r3, #1
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae8:	f043 0204 	orr.w	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b18:	f043 0202 	orr.w	r2, r3, #2
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d006      	beq.n	8009b3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fe fdeb 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d175      	bne.n	8009c32 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b6a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e4      	bne.n	8009b46 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b92:	f023 0301 	bic.w	r3, r3, #1
 8009b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e1      	bne.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d12e      	bne.n	8009c2c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be4:	f023 0310 	bic.w	r3, r3, #16
 8009be8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e6      	bne.n	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f003 0310 	and.w	r3, r3, #16
 8009c10:	2b10      	cmp	r3, #16
 8009c12:	d103      	bne.n	8009c1c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2210      	movs	r2, #16
 8009c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7fe fd79 	bl	800871c <HAL_UARTEx_RxEventCallback>
 8009c2a:	e002      	b.n	8009c32 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7f7 ffcf 	bl	8001bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f47f aefa 	bne.w	8009a3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d045      	beq.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c60:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d23e      	bcs.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	623b      	str	r3, [r7, #32]
   return(result);
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3308      	adds	r3, #8
 8009c86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c88:	633a      	str	r2, [r7, #48]	; 0x30
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e5      	bne.n	8009c68 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009ca0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	e853 3f00 	ldrex	r3, [r3]
 8009cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f043 0320 	orr.w	r3, r3, #32
 8009cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc4:	69b9      	ldr	r1, [r7, #24]
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	e841 2300 	strex	r3, r2, [r1]
 8009ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e6      	bne.n	8009ca2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cd4:	e007      	b.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	699a      	ldr	r2, [r3, #24]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f042 0208 	orr.w	r2, r2, #8
 8009ce4:	619a      	str	r2, [r3, #24]
}
 8009ce6:	bf00      	nop
 8009ce8:	37a0      	adds	r7, #160	; 0xa0
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	0800959b 	.word	0x0800959b

08009cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e027      	b.n	8009d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2224      	movs	r2, #36	; 0x24
 8009d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d101      	bne.n	8009dba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009db6:	2302      	movs	r3, #2
 8009db8:	e02d      	b.n	8009e16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2224      	movs	r2, #36	; 0x24
 8009dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0201 	bic.w	r2, r2, #1
 8009de0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f850 	bl	8009e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e02d      	b.n	8009e92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2224      	movs	r2, #36	; 0x24
 8009e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0201 	bic.w	r2, r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f812 	bl	8009e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ebc:	e031      	b.n	8009f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0e5b      	lsrs	r3, r3, #25
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	0f5b      	lsrs	r3, r3, #29
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	7b3a      	ldrb	r2, [r7, #12]
 8009eea:	4911      	ldr	r1, [pc, #68]	; (8009f30 <UARTEx_SetNbDataToProcess+0x94>)
 8009eec:	5c8a      	ldrb	r2, [r1, r2]
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ef2:	7b3a      	ldrb	r2, [r7, #12]
 8009ef4:	490f      	ldr	r1, [pc, #60]	; (8009f34 <UARTEx_SetNbDataToProcess+0x98>)
 8009ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	7b7a      	ldrb	r2, [r7, #13]
 8009f08:	4909      	ldr	r1, [pc, #36]	; (8009f30 <UARTEx_SetNbDataToProcess+0x94>)
 8009f0a:	5c8a      	ldrb	r2, [r1, r2]
 8009f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f10:	7b7a      	ldrb	r2, [r7, #13]
 8009f12:	4908      	ldr	r1, [pc, #32]	; (8009f34 <UARTEx_SetNbDataToProcess+0x98>)
 8009f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	0800d05c 	.word	0x0800d05c
 8009f34:	0800d064 	.word	0x0800d064

08009f38 <atoi>:
 8009f38:	220a      	movs	r2, #10
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	f000 bdb2 	b.w	800aaa4 <strtol>

08009f40 <__errno>:
 8009f40:	4b01      	ldr	r3, [pc, #4]	; (8009f48 <__errno+0x8>)
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	200001cc 	.word	0x200001cc

08009f4c <__libc_init_array>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	4d0d      	ldr	r5, [pc, #52]	; (8009f84 <__libc_init_array+0x38>)
 8009f50:	4c0d      	ldr	r4, [pc, #52]	; (8009f88 <__libc_init_array+0x3c>)
 8009f52:	1b64      	subs	r4, r4, r5
 8009f54:	10a4      	asrs	r4, r4, #2
 8009f56:	2600      	movs	r6, #0
 8009f58:	42a6      	cmp	r6, r4
 8009f5a:	d109      	bne.n	8009f70 <__libc_init_array+0x24>
 8009f5c:	4d0b      	ldr	r5, [pc, #44]	; (8009f8c <__libc_init_array+0x40>)
 8009f5e:	4c0c      	ldr	r4, [pc, #48]	; (8009f90 <__libc_init_array+0x44>)
 8009f60:	f003 f808 	bl	800cf74 <_init>
 8009f64:	1b64      	subs	r4, r4, r5
 8009f66:	10a4      	asrs	r4, r4, #2
 8009f68:	2600      	movs	r6, #0
 8009f6a:	42a6      	cmp	r6, r4
 8009f6c:	d105      	bne.n	8009f7a <__libc_init_array+0x2e>
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f74:	4798      	blx	r3
 8009f76:	3601      	adds	r6, #1
 8009f78:	e7ee      	b.n	8009f58 <__libc_init_array+0xc>
 8009f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f7e:	4798      	blx	r3
 8009f80:	3601      	adds	r6, #1
 8009f82:	e7f2      	b.n	8009f6a <__libc_init_array+0x1e>
 8009f84:	0800d4b0 	.word	0x0800d4b0
 8009f88:	0800d4b0 	.word	0x0800d4b0
 8009f8c:	0800d4b0 	.word	0x0800d4b0
 8009f90:	0800d4b4 	.word	0x0800d4b4

08009f94 <memset>:
 8009f94:	4402      	add	r2, r0
 8009f96:	4603      	mov	r3, r0
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d100      	bne.n	8009f9e <memset+0xa>
 8009f9c:	4770      	bx	lr
 8009f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009fa2:	e7f9      	b.n	8009f98 <memset+0x4>

08009fa4 <__cvt>:
 8009fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	ec55 4b10 	vmov	r4, r5, d0
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	460e      	mov	r6, r1
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	bfbb      	ittet	lt
 8009fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009fba:	461d      	movlt	r5, r3
 8009fbc:	2300      	movge	r3, #0
 8009fbe:	232d      	movlt	r3, #45	; 0x2d
 8009fc0:	700b      	strb	r3, [r1, #0]
 8009fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009fc8:	4691      	mov	r9, r2
 8009fca:	f023 0820 	bic.w	r8, r3, #32
 8009fce:	bfbc      	itt	lt
 8009fd0:	4622      	movlt	r2, r4
 8009fd2:	4614      	movlt	r4, r2
 8009fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fd8:	d005      	beq.n	8009fe6 <__cvt+0x42>
 8009fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fde:	d100      	bne.n	8009fe2 <__cvt+0x3e>
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	e000      	b.n	8009fe8 <__cvt+0x44>
 8009fe6:	2103      	movs	r1, #3
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	ab02      	add	r3, sp, #8
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	ec45 4b10 	vmov	d0, r4, r5
 8009ff4:	4653      	mov	r3, sl
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	f000 fe0a 	bl	800ac10 <_dtoa_r>
 8009ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a000:	4607      	mov	r7, r0
 800a002:	d102      	bne.n	800a00a <__cvt+0x66>
 800a004:	f019 0f01 	tst.w	r9, #1
 800a008:	d022      	beq.n	800a050 <__cvt+0xac>
 800a00a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a00e:	eb07 0906 	add.w	r9, r7, r6
 800a012:	d110      	bne.n	800a036 <__cvt+0x92>
 800a014:	783b      	ldrb	r3, [r7, #0]
 800a016:	2b30      	cmp	r3, #48	; 0x30
 800a018:	d10a      	bne.n	800a030 <__cvt+0x8c>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 fd89 	bl	8000b38 <__aeabi_dcmpeq>
 800a026:	b918      	cbnz	r0, 800a030 <__cvt+0x8c>
 800a028:	f1c6 0601 	rsb	r6, r6, #1
 800a02c:	f8ca 6000 	str.w	r6, [sl]
 800a030:	f8da 3000 	ldr.w	r3, [sl]
 800a034:	4499      	add	r9, r3
 800a036:	2200      	movs	r2, #0
 800a038:	2300      	movs	r3, #0
 800a03a:	4620      	mov	r0, r4
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7f6 fd7b 	bl	8000b38 <__aeabi_dcmpeq>
 800a042:	b108      	cbz	r0, 800a048 <__cvt+0xa4>
 800a044:	f8cd 900c 	str.w	r9, [sp, #12]
 800a048:	2230      	movs	r2, #48	; 0x30
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	454b      	cmp	r3, r9
 800a04e:	d307      	bcc.n	800a060 <__cvt+0xbc>
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a054:	1bdb      	subs	r3, r3, r7
 800a056:	4638      	mov	r0, r7
 800a058:	6013      	str	r3, [r2, #0]
 800a05a:	b004      	add	sp, #16
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	e7f0      	b.n	800a04a <__cvt+0xa6>

0800a068 <__exponent>:
 800a068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a06a:	4603      	mov	r3, r0
 800a06c:	2900      	cmp	r1, #0
 800a06e:	bfb8      	it	lt
 800a070:	4249      	neglt	r1, r1
 800a072:	f803 2b02 	strb.w	r2, [r3], #2
 800a076:	bfb4      	ite	lt
 800a078:	222d      	movlt	r2, #45	; 0x2d
 800a07a:	222b      	movge	r2, #43	; 0x2b
 800a07c:	2909      	cmp	r1, #9
 800a07e:	7042      	strb	r2, [r0, #1]
 800a080:	dd2a      	ble.n	800a0d8 <__exponent+0x70>
 800a082:	f10d 0407 	add.w	r4, sp, #7
 800a086:	46a4      	mov	ip, r4
 800a088:	270a      	movs	r7, #10
 800a08a:	46a6      	mov	lr, r4
 800a08c:	460a      	mov	r2, r1
 800a08e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a092:	fb07 1516 	mls	r5, r7, r6, r1
 800a096:	3530      	adds	r5, #48	; 0x30
 800a098:	2a63      	cmp	r2, #99	; 0x63
 800a09a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a09e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	dcf1      	bgt.n	800a08a <__exponent+0x22>
 800a0a6:	3130      	adds	r1, #48	; 0x30
 800a0a8:	f1ae 0502 	sub.w	r5, lr, #2
 800a0ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0b0:	1c44      	adds	r4, r0, #1
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	4561      	cmp	r1, ip
 800a0b6:	d30a      	bcc.n	800a0ce <__exponent+0x66>
 800a0b8:	f10d 0209 	add.w	r2, sp, #9
 800a0bc:	eba2 020e 	sub.w	r2, r2, lr
 800a0c0:	4565      	cmp	r5, ip
 800a0c2:	bf88      	it	hi
 800a0c4:	2200      	movhi	r2, #0
 800a0c6:	4413      	add	r3, r2
 800a0c8:	1a18      	subs	r0, r3, r0
 800a0ca:	b003      	add	sp, #12
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a0d6:	e7ed      	b.n	800a0b4 <__exponent+0x4c>
 800a0d8:	2330      	movs	r3, #48	; 0x30
 800a0da:	3130      	adds	r1, #48	; 0x30
 800a0dc:	7083      	strb	r3, [r0, #2]
 800a0de:	70c1      	strb	r1, [r0, #3]
 800a0e0:	1d03      	adds	r3, r0, #4
 800a0e2:	e7f1      	b.n	800a0c8 <__exponent+0x60>

0800a0e4 <_printf_float>:
 800a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	ed2d 8b02 	vpush	{d8}
 800a0ec:	b08d      	sub	sp, #52	; 0x34
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	461f      	mov	r7, r3
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	f001 fc7f 	bl	800b9fc <_localeconv_r>
 800a0fe:	f8d0 a000 	ldr.w	sl, [r0]
 800a102:	4650      	mov	r0, sl
 800a104:	f7f6 f896 	bl	8000234 <strlen>
 800a108:	2300      	movs	r3, #0
 800a10a:	930a      	str	r3, [sp, #40]	; 0x28
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	9305      	str	r3, [sp, #20]
 800a110:	f8d8 3000 	ldr.w	r3, [r8]
 800a114:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a118:	3307      	adds	r3, #7
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	f103 0208 	add.w	r2, r3, #8
 800a122:	f8c8 2000 	str.w	r2, [r8]
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a12e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	f8cd 8018 	str.w	r8, [sp, #24]
 800a13c:	ee08 0a10 	vmov	s16, r0
 800a140:	4b9f      	ldr	r3, [pc, #636]	; (800a3c0 <_printf_float+0x2dc>)
 800a142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	f7f6 fd27 	bl	8000b9c <__aeabi_dcmpun>
 800a14e:	bb88      	cbnz	r0, 800a1b4 <_printf_float+0xd0>
 800a150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a154:	4b9a      	ldr	r3, [pc, #616]	; (800a3c0 <_printf_float+0x2dc>)
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	f7f6 fd01 	bl	8000b60 <__aeabi_dcmple>
 800a15e:	bb48      	cbnz	r0, 800a1b4 <_printf_float+0xd0>
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	4640      	mov	r0, r8
 800a166:	4649      	mov	r1, r9
 800a168:	f7f6 fcf0 	bl	8000b4c <__aeabi_dcmplt>
 800a16c:	b110      	cbz	r0, 800a174 <_printf_float+0x90>
 800a16e:	232d      	movs	r3, #45	; 0x2d
 800a170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a174:	4b93      	ldr	r3, [pc, #588]	; (800a3c4 <_printf_float+0x2e0>)
 800a176:	4894      	ldr	r0, [pc, #592]	; (800a3c8 <_printf_float+0x2e4>)
 800a178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a17c:	bf94      	ite	ls
 800a17e:	4698      	movls	r8, r3
 800a180:	4680      	movhi	r8, r0
 800a182:	2303      	movs	r3, #3
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	f023 0204 	bic.w	r2, r3, #4
 800a18c:	6022      	str	r2, [r4, #0]
 800a18e:	f04f 0900 	mov.w	r9, #0
 800a192:	9700      	str	r7, [sp, #0]
 800a194:	4633      	mov	r3, r6
 800a196:	aa0b      	add	r2, sp, #44	; 0x2c
 800a198:	4621      	mov	r1, r4
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 f9d8 	bl	800a550 <_printf_common>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f040 8090 	bne.w	800a2c6 <_printf_float+0x1e2>
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1aa:	b00d      	add	sp, #52	; 0x34
 800a1ac:	ecbd 8b02 	vpop	{d8}
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 fcee 	bl	8000b9c <__aeabi_dcmpun>
 800a1c0:	b140      	cbz	r0, 800a1d4 <_printf_float+0xf0>
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfbc      	itt	lt
 800a1c8:	232d      	movlt	r3, #45	; 0x2d
 800a1ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1ce:	487f      	ldr	r0, [pc, #508]	; (800a3cc <_printf_float+0x2e8>)
 800a1d0:	4b7f      	ldr	r3, [pc, #508]	; (800a3d0 <_printf_float+0x2ec>)
 800a1d2:	e7d1      	b.n	800a178 <_printf_float+0x94>
 800a1d4:	6863      	ldr	r3, [r4, #4]
 800a1d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1da:	9206      	str	r2, [sp, #24]
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	d13f      	bne.n	800a260 <_printf_float+0x17c>
 800a1e0:	2306      	movs	r3, #6
 800a1e2:	6063      	str	r3, [r4, #4]
 800a1e4:	9b05      	ldr	r3, [sp, #20]
 800a1e6:	6861      	ldr	r1, [r4, #4]
 800a1e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	ab0a      	add	r3, sp, #40	; 0x28
 800a1f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1f6:	ab09      	add	r3, sp, #36	; 0x24
 800a1f8:	ec49 8b10 	vmov	d0, r8, r9
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	6022      	str	r2, [r4, #0]
 800a200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a204:	4628      	mov	r0, r5
 800a206:	f7ff fecd 	bl	8009fa4 <__cvt>
 800a20a:	9b06      	ldr	r3, [sp, #24]
 800a20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a20e:	2b47      	cmp	r3, #71	; 0x47
 800a210:	4680      	mov	r8, r0
 800a212:	d108      	bne.n	800a226 <_printf_float+0x142>
 800a214:	1cc8      	adds	r0, r1, #3
 800a216:	db02      	blt.n	800a21e <_printf_float+0x13a>
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	4299      	cmp	r1, r3
 800a21c:	dd41      	ble.n	800a2a2 <_printf_float+0x1be>
 800a21e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a222:	fa5f fb8b 	uxtb.w	fp, fp
 800a226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a22a:	d820      	bhi.n	800a26e <_printf_float+0x18a>
 800a22c:	3901      	subs	r1, #1
 800a22e:	465a      	mov	r2, fp
 800a230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a234:	9109      	str	r1, [sp, #36]	; 0x24
 800a236:	f7ff ff17 	bl	800a068 <__exponent>
 800a23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a23c:	1813      	adds	r3, r2, r0
 800a23e:	2a01      	cmp	r2, #1
 800a240:	4681      	mov	r9, r0
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	dc02      	bgt.n	800a24c <_printf_float+0x168>
 800a246:	6822      	ldr	r2, [r4, #0]
 800a248:	07d2      	lsls	r2, r2, #31
 800a24a:	d501      	bpl.n	800a250 <_printf_float+0x16c>
 800a24c:	3301      	adds	r3, #1
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a254:	2b00      	cmp	r3, #0
 800a256:	d09c      	beq.n	800a192 <_printf_float+0xae>
 800a258:	232d      	movs	r3, #45	; 0x2d
 800a25a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a25e:	e798      	b.n	800a192 <_printf_float+0xae>
 800a260:	9a06      	ldr	r2, [sp, #24]
 800a262:	2a47      	cmp	r2, #71	; 0x47
 800a264:	d1be      	bne.n	800a1e4 <_printf_float+0x100>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1bc      	bne.n	800a1e4 <_printf_float+0x100>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e7b9      	b.n	800a1e2 <_printf_float+0xfe>
 800a26e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a272:	d118      	bne.n	800a2a6 <_printf_float+0x1c2>
 800a274:	2900      	cmp	r1, #0
 800a276:	6863      	ldr	r3, [r4, #4]
 800a278:	dd0b      	ble.n	800a292 <_printf_float+0x1ae>
 800a27a:	6121      	str	r1, [r4, #16]
 800a27c:	b913      	cbnz	r3, 800a284 <_printf_float+0x1a0>
 800a27e:	6822      	ldr	r2, [r4, #0]
 800a280:	07d0      	lsls	r0, r2, #31
 800a282:	d502      	bpl.n	800a28a <_printf_float+0x1a6>
 800a284:	3301      	adds	r3, #1
 800a286:	440b      	add	r3, r1
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a28c:	f04f 0900 	mov.w	r9, #0
 800a290:	e7de      	b.n	800a250 <_printf_float+0x16c>
 800a292:	b913      	cbnz	r3, 800a29a <_printf_float+0x1b6>
 800a294:	6822      	ldr	r2, [r4, #0]
 800a296:	07d2      	lsls	r2, r2, #31
 800a298:	d501      	bpl.n	800a29e <_printf_float+0x1ba>
 800a29a:	3302      	adds	r3, #2
 800a29c:	e7f4      	b.n	800a288 <_printf_float+0x1a4>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e7f2      	b.n	800a288 <_printf_float+0x1a4>
 800a2a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	db05      	blt.n	800a2b8 <_printf_float+0x1d4>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	6121      	str	r1, [r4, #16]
 800a2b0:	07d8      	lsls	r0, r3, #31
 800a2b2:	d5ea      	bpl.n	800a28a <_printf_float+0x1a6>
 800a2b4:	1c4b      	adds	r3, r1, #1
 800a2b6:	e7e7      	b.n	800a288 <_printf_float+0x1a4>
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	bfd4      	ite	le
 800a2bc:	f1c1 0202 	rsble	r2, r1, #2
 800a2c0:	2201      	movgt	r2, #1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	e7e0      	b.n	800a288 <_printf_float+0x1a4>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	055a      	lsls	r2, r3, #21
 800a2ca:	d407      	bmi.n	800a2dc <_printf_float+0x1f8>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	4642      	mov	r2, r8
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d12c      	bne.n	800a334 <_printf_float+0x250>
 800a2da:	e764      	b.n	800a1a6 <_printf_float+0xc2>
 800a2dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2e0:	f240 80e0 	bls.w	800a4a4 <_printf_float+0x3c0>
 800a2e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f7f6 fc24 	bl	8000b38 <__aeabi_dcmpeq>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d034      	beq.n	800a35e <_printf_float+0x27a>
 800a2f4:	4a37      	ldr	r2, [pc, #220]	; (800a3d4 <_printf_float+0x2f0>)
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f af51 	beq.w	800a1a6 <_printf_float+0xc2>
 800a304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a308:	429a      	cmp	r2, r3
 800a30a:	db02      	blt.n	800a312 <_printf_float+0x22e>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07d8      	lsls	r0, r3, #31
 800a310:	d510      	bpl.n	800a334 <_printf_float+0x250>
 800a312:	ee18 3a10 	vmov	r3, s16
 800a316:	4652      	mov	r2, sl
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	f43f af41 	beq.w	800a1a6 <_printf_float+0xc2>
 800a324:	f04f 0800 	mov.w	r8, #0
 800a328:	f104 091a 	add.w	r9, r4, #26
 800a32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32e:	3b01      	subs	r3, #1
 800a330:	4543      	cmp	r3, r8
 800a332:	dc09      	bgt.n	800a348 <_printf_float+0x264>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	079b      	lsls	r3, r3, #30
 800a338:	f100 8105 	bmi.w	800a546 <_printf_float+0x462>
 800a33c:	68e0      	ldr	r0, [r4, #12]
 800a33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a340:	4298      	cmp	r0, r3
 800a342:	bfb8      	it	lt
 800a344:	4618      	movlt	r0, r3
 800a346:	e730      	b.n	800a1aa <_printf_float+0xc6>
 800a348:	2301      	movs	r3, #1
 800a34a:	464a      	mov	r2, r9
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	47b8      	blx	r7
 800a352:	3001      	adds	r0, #1
 800a354:	f43f af27 	beq.w	800a1a6 <_printf_float+0xc2>
 800a358:	f108 0801 	add.w	r8, r8, #1
 800a35c:	e7e6      	b.n	800a32c <_printf_float+0x248>
 800a35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	dc39      	bgt.n	800a3d8 <_printf_float+0x2f4>
 800a364:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <_printf_float+0x2f0>)
 800a366:	2301      	movs	r3, #1
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f af19 	beq.w	800a1a6 <_printf_float+0xc2>
 800a374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a378:	4313      	orrs	r3, r2
 800a37a:	d102      	bne.n	800a382 <_printf_float+0x29e>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07d9      	lsls	r1, r3, #31
 800a380:	d5d8      	bpl.n	800a334 <_printf_float+0x250>
 800a382:	ee18 3a10 	vmov	r3, s16
 800a386:	4652      	mov	r2, sl
 800a388:	4631      	mov	r1, r6
 800a38a:	4628      	mov	r0, r5
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	f43f af09 	beq.w	800a1a6 <_printf_float+0xc2>
 800a394:	f04f 0900 	mov.w	r9, #0
 800a398:	f104 0a1a 	add.w	sl, r4, #26
 800a39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39e:	425b      	negs	r3, r3
 800a3a0:	454b      	cmp	r3, r9
 800a3a2:	dc01      	bgt.n	800a3a8 <_printf_float+0x2c4>
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a6:	e792      	b.n	800a2ce <_printf_float+0x1ea>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f aef7 	beq.w	800a1a6 <_printf_float+0xc2>
 800a3b8:	f109 0901 	add.w	r9, r9, #1
 800a3bc:	e7ee      	b.n	800a39c <_printf_float+0x2b8>
 800a3be:	bf00      	nop
 800a3c0:	7fefffff 	.word	0x7fefffff
 800a3c4:	0800d070 	.word	0x0800d070
 800a3c8:	0800d074 	.word	0x0800d074
 800a3cc:	0800d07c 	.word	0x0800d07c
 800a3d0:	0800d078 	.word	0x0800d078
 800a3d4:	0800d080 	.word	0x0800d080
 800a3d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	bfa8      	it	ge
 800a3e0:	461a      	movge	r2, r3
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	4691      	mov	r9, r2
 800a3e6:	dc37      	bgt.n	800a458 <_printf_float+0x374>
 800a3e8:	f04f 0b00 	mov.w	fp, #0
 800a3ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f0:	f104 021a 	add.w	r2, r4, #26
 800a3f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3f6:	9305      	str	r3, [sp, #20]
 800a3f8:	eba3 0309 	sub.w	r3, r3, r9
 800a3fc:	455b      	cmp	r3, fp
 800a3fe:	dc33      	bgt.n	800a468 <_printf_float+0x384>
 800a400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a404:	429a      	cmp	r2, r3
 800a406:	db3b      	blt.n	800a480 <_printf_float+0x39c>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	07da      	lsls	r2, r3, #31
 800a40c:	d438      	bmi.n	800a480 <_printf_float+0x39c>
 800a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a410:	9a05      	ldr	r2, [sp, #20]
 800a412:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a414:	1a9a      	subs	r2, r3, r2
 800a416:	eba3 0901 	sub.w	r9, r3, r1
 800a41a:	4591      	cmp	r9, r2
 800a41c:	bfa8      	it	ge
 800a41e:	4691      	movge	r9, r2
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	dc35      	bgt.n	800a492 <_printf_float+0x3ae>
 800a426:	f04f 0800 	mov.w	r8, #0
 800a42a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a42e:	f104 0a1a 	add.w	sl, r4, #26
 800a432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	eba3 0309 	sub.w	r3, r3, r9
 800a43c:	4543      	cmp	r3, r8
 800a43e:	f77f af79 	ble.w	800a334 <_printf_float+0x250>
 800a442:	2301      	movs	r3, #1
 800a444:	4652      	mov	r2, sl
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	f43f aeaa 	beq.w	800a1a6 <_printf_float+0xc2>
 800a452:	f108 0801 	add.w	r8, r8, #1
 800a456:	e7ec      	b.n	800a432 <_printf_float+0x34e>
 800a458:	4613      	mov	r3, r2
 800a45a:	4631      	mov	r1, r6
 800a45c:	4642      	mov	r2, r8
 800a45e:	4628      	mov	r0, r5
 800a460:	47b8      	blx	r7
 800a462:	3001      	adds	r0, #1
 800a464:	d1c0      	bne.n	800a3e8 <_printf_float+0x304>
 800a466:	e69e      	b.n	800a1a6 <_printf_float+0xc2>
 800a468:	2301      	movs	r3, #1
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	9205      	str	r2, [sp, #20]
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	f43f ae97 	beq.w	800a1a6 <_printf_float+0xc2>
 800a478:	9a05      	ldr	r2, [sp, #20]
 800a47a:	f10b 0b01 	add.w	fp, fp, #1
 800a47e:	e7b9      	b.n	800a3f4 <_printf_float+0x310>
 800a480:	ee18 3a10 	vmov	r3, s16
 800a484:	4652      	mov	r2, sl
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	d1be      	bne.n	800a40e <_printf_float+0x32a>
 800a490:	e689      	b.n	800a1a6 <_printf_float+0xc2>
 800a492:	9a05      	ldr	r2, [sp, #20]
 800a494:	464b      	mov	r3, r9
 800a496:	4442      	add	r2, r8
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d1c1      	bne.n	800a426 <_printf_float+0x342>
 800a4a2:	e680      	b.n	800a1a6 <_printf_float+0xc2>
 800a4a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4a6:	2a01      	cmp	r2, #1
 800a4a8:	dc01      	bgt.n	800a4ae <_printf_float+0x3ca>
 800a4aa:	07db      	lsls	r3, r3, #31
 800a4ac:	d538      	bpl.n	800a520 <_printf_float+0x43c>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f ae74 	beq.w	800a1a6 <_printf_float+0xc2>
 800a4be:	ee18 3a10 	vmov	r3, s16
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f43f ae6b 	beq.w	800a1a6 <_printf_float+0xc2>
 800a4d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f7f6 fb2e 	bl	8000b38 <__aeabi_dcmpeq>
 800a4dc:	b9d8      	cbnz	r0, 800a516 <_printf_float+0x432>
 800a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e0:	f108 0201 	add.w	r2, r8, #1
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b8      	blx	r7
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d10e      	bne.n	800a50e <_printf_float+0x42a>
 800a4f0:	e659      	b.n	800a1a6 <_printf_float+0xc2>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4652      	mov	r2, sl
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f ae52 	beq.w	800a1a6 <_printf_float+0xc2>
 800a502:	f108 0801 	add.w	r8, r8, #1
 800a506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a508:	3b01      	subs	r3, #1
 800a50a:	4543      	cmp	r3, r8
 800a50c:	dcf1      	bgt.n	800a4f2 <_printf_float+0x40e>
 800a50e:	464b      	mov	r3, r9
 800a510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a514:	e6dc      	b.n	800a2d0 <_printf_float+0x1ec>
 800a516:	f04f 0800 	mov.w	r8, #0
 800a51a:	f104 0a1a 	add.w	sl, r4, #26
 800a51e:	e7f2      	b.n	800a506 <_printf_float+0x422>
 800a520:	2301      	movs	r3, #1
 800a522:	4642      	mov	r2, r8
 800a524:	e7df      	b.n	800a4e6 <_printf_float+0x402>
 800a526:	2301      	movs	r3, #1
 800a528:	464a      	mov	r2, r9
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	f43f ae38 	beq.w	800a1a6 <_printf_float+0xc2>
 800a536:	f108 0801 	add.w	r8, r8, #1
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a53e:	1a5b      	subs	r3, r3, r1
 800a540:	4543      	cmp	r3, r8
 800a542:	dcf0      	bgt.n	800a526 <_printf_float+0x442>
 800a544:	e6fa      	b.n	800a33c <_printf_float+0x258>
 800a546:	f04f 0800 	mov.w	r8, #0
 800a54a:	f104 0919 	add.w	r9, r4, #25
 800a54e:	e7f4      	b.n	800a53a <_printf_float+0x456>

0800a550 <_printf_common>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	4616      	mov	r6, r2
 800a556:	4699      	mov	r9, r3
 800a558:	688a      	ldr	r2, [r1, #8]
 800a55a:	690b      	ldr	r3, [r1, #16]
 800a55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a560:	4293      	cmp	r3, r2
 800a562:	bfb8      	it	lt
 800a564:	4613      	movlt	r3, r2
 800a566:	6033      	str	r3, [r6, #0]
 800a568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a56c:	4607      	mov	r7, r0
 800a56e:	460c      	mov	r4, r1
 800a570:	b10a      	cbz	r2, 800a576 <_printf_common+0x26>
 800a572:	3301      	adds	r3, #1
 800a574:	6033      	str	r3, [r6, #0]
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	0699      	lsls	r1, r3, #26
 800a57a:	bf42      	ittt	mi
 800a57c:	6833      	ldrmi	r3, [r6, #0]
 800a57e:	3302      	addmi	r3, #2
 800a580:	6033      	strmi	r3, [r6, #0]
 800a582:	6825      	ldr	r5, [r4, #0]
 800a584:	f015 0506 	ands.w	r5, r5, #6
 800a588:	d106      	bne.n	800a598 <_printf_common+0x48>
 800a58a:	f104 0a19 	add.w	sl, r4, #25
 800a58e:	68e3      	ldr	r3, [r4, #12]
 800a590:	6832      	ldr	r2, [r6, #0]
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	42ab      	cmp	r3, r5
 800a596:	dc26      	bgt.n	800a5e6 <_printf_common+0x96>
 800a598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a59c:	1e13      	subs	r3, r2, #0
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	bf18      	it	ne
 800a5a2:	2301      	movne	r3, #1
 800a5a4:	0692      	lsls	r2, r2, #26
 800a5a6:	d42b      	bmi.n	800a600 <_printf_common+0xb0>
 800a5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	47c0      	blx	r8
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d01e      	beq.n	800a5f4 <_printf_common+0xa4>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	68e5      	ldr	r5, [r4, #12]
 800a5ba:	6832      	ldr	r2, [r6, #0]
 800a5bc:	f003 0306 	and.w	r3, r3, #6
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	bf08      	it	eq
 800a5c4:	1aad      	subeq	r5, r5, r2
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	bf0c      	ite	eq
 800a5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5d0:	2500      	movne	r5, #0
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	bfc4      	itt	gt
 800a5d6:	1a9b      	subgt	r3, r3, r2
 800a5d8:	18ed      	addgt	r5, r5, r3
 800a5da:	2600      	movs	r6, #0
 800a5dc:	341a      	adds	r4, #26
 800a5de:	42b5      	cmp	r5, r6
 800a5e0:	d11a      	bne.n	800a618 <_printf_common+0xc8>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e008      	b.n	800a5f8 <_printf_common+0xa8>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	47c0      	blx	r8
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d103      	bne.n	800a5fc <_printf_common+0xac>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	e7c6      	b.n	800a58e <_printf_common+0x3e>
 800a600:	18e1      	adds	r1, r4, r3
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	2030      	movs	r0, #48	; 0x30
 800a606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a60a:	4422      	add	r2, r4
 800a60c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a614:	3302      	adds	r3, #2
 800a616:	e7c7      	b.n	800a5a8 <_printf_common+0x58>
 800a618:	2301      	movs	r3, #1
 800a61a:	4622      	mov	r2, r4
 800a61c:	4649      	mov	r1, r9
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	3001      	adds	r0, #1
 800a624:	d0e6      	beq.n	800a5f4 <_printf_common+0xa4>
 800a626:	3601      	adds	r6, #1
 800a628:	e7d9      	b.n	800a5de <_printf_common+0x8e>
	...

0800a62c <_printf_i>:
 800a62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	7e0f      	ldrb	r7, [r1, #24]
 800a632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a634:	2f78      	cmp	r7, #120	; 0x78
 800a636:	4691      	mov	r9, r2
 800a638:	4680      	mov	r8, r0
 800a63a:	460c      	mov	r4, r1
 800a63c:	469a      	mov	sl, r3
 800a63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a642:	d807      	bhi.n	800a654 <_printf_i+0x28>
 800a644:	2f62      	cmp	r7, #98	; 0x62
 800a646:	d80a      	bhi.n	800a65e <_printf_i+0x32>
 800a648:	2f00      	cmp	r7, #0
 800a64a:	f000 80d8 	beq.w	800a7fe <_printf_i+0x1d2>
 800a64e:	2f58      	cmp	r7, #88	; 0x58
 800a650:	f000 80a3 	beq.w	800a79a <_printf_i+0x16e>
 800a654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a65c:	e03a      	b.n	800a6d4 <_printf_i+0xa8>
 800a65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a662:	2b15      	cmp	r3, #21
 800a664:	d8f6      	bhi.n	800a654 <_printf_i+0x28>
 800a666:	a101      	add	r1, pc, #4	; (adr r1, 800a66c <_printf_i+0x40>)
 800a668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a66c:	0800a6c5 	.word	0x0800a6c5
 800a670:	0800a6d9 	.word	0x0800a6d9
 800a674:	0800a655 	.word	0x0800a655
 800a678:	0800a655 	.word	0x0800a655
 800a67c:	0800a655 	.word	0x0800a655
 800a680:	0800a655 	.word	0x0800a655
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a655 	.word	0x0800a655
 800a68c:	0800a655 	.word	0x0800a655
 800a690:	0800a655 	.word	0x0800a655
 800a694:	0800a655 	.word	0x0800a655
 800a698:	0800a7e5 	.word	0x0800a7e5
 800a69c:	0800a709 	.word	0x0800a709
 800a6a0:	0800a7c7 	.word	0x0800a7c7
 800a6a4:	0800a655 	.word	0x0800a655
 800a6a8:	0800a655 	.word	0x0800a655
 800a6ac:	0800a807 	.word	0x0800a807
 800a6b0:	0800a655 	.word	0x0800a655
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a655 	.word	0x0800a655
 800a6bc:	0800a655 	.word	0x0800a655
 800a6c0:	0800a7cf 	.word	0x0800a7cf
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	1d1a      	adds	r2, r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	602a      	str	r2, [r5, #0]
 800a6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e0a3      	b.n	800a820 <_printf_i+0x1f4>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	6829      	ldr	r1, [r5, #0]
 800a6dc:	0606      	lsls	r6, r0, #24
 800a6de:	f101 0304 	add.w	r3, r1, #4
 800a6e2:	d50a      	bpl.n	800a6fa <_printf_i+0xce>
 800a6e4:	680e      	ldr	r6, [r1, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	da03      	bge.n	800a6f4 <_printf_i+0xc8>
 800a6ec:	232d      	movs	r3, #45	; 0x2d
 800a6ee:	4276      	negs	r6, r6
 800a6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f4:	485e      	ldr	r0, [pc, #376]	; (800a870 <_printf_i+0x244>)
 800a6f6:	230a      	movs	r3, #10
 800a6f8:	e019      	b.n	800a72e <_printf_i+0x102>
 800a6fa:	680e      	ldr	r6, [r1, #0]
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a702:	bf18      	it	ne
 800a704:	b236      	sxthne	r6, r6
 800a706:	e7ef      	b.n	800a6e8 <_printf_i+0xbc>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	6820      	ldr	r0, [r4, #0]
 800a70c:	1d19      	adds	r1, r3, #4
 800a70e:	6029      	str	r1, [r5, #0]
 800a710:	0601      	lsls	r1, r0, #24
 800a712:	d501      	bpl.n	800a718 <_printf_i+0xec>
 800a714:	681e      	ldr	r6, [r3, #0]
 800a716:	e002      	b.n	800a71e <_printf_i+0xf2>
 800a718:	0646      	lsls	r6, r0, #25
 800a71a:	d5fb      	bpl.n	800a714 <_printf_i+0xe8>
 800a71c:	881e      	ldrh	r6, [r3, #0]
 800a71e:	4854      	ldr	r0, [pc, #336]	; (800a870 <_printf_i+0x244>)
 800a720:	2f6f      	cmp	r7, #111	; 0x6f
 800a722:	bf0c      	ite	eq
 800a724:	2308      	moveq	r3, #8
 800a726:	230a      	movne	r3, #10
 800a728:	2100      	movs	r1, #0
 800a72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a72e:	6865      	ldr	r5, [r4, #4]
 800a730:	60a5      	str	r5, [r4, #8]
 800a732:	2d00      	cmp	r5, #0
 800a734:	bfa2      	ittt	ge
 800a736:	6821      	ldrge	r1, [r4, #0]
 800a738:	f021 0104 	bicge.w	r1, r1, #4
 800a73c:	6021      	strge	r1, [r4, #0]
 800a73e:	b90e      	cbnz	r6, 800a744 <_printf_i+0x118>
 800a740:	2d00      	cmp	r5, #0
 800a742:	d04d      	beq.n	800a7e0 <_printf_i+0x1b4>
 800a744:	4615      	mov	r5, r2
 800a746:	fbb6 f1f3 	udiv	r1, r6, r3
 800a74a:	fb03 6711 	mls	r7, r3, r1, r6
 800a74e:	5dc7      	ldrb	r7, [r0, r7]
 800a750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a754:	4637      	mov	r7, r6
 800a756:	42bb      	cmp	r3, r7
 800a758:	460e      	mov	r6, r1
 800a75a:	d9f4      	bls.n	800a746 <_printf_i+0x11a>
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d10b      	bne.n	800a778 <_printf_i+0x14c>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	07de      	lsls	r6, r3, #31
 800a764:	d508      	bpl.n	800a778 <_printf_i+0x14c>
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	6861      	ldr	r1, [r4, #4]
 800a76a:	4299      	cmp	r1, r3
 800a76c:	bfde      	ittt	le
 800a76e:	2330      	movle	r3, #48	; 0x30
 800a770:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a774:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a778:	1b52      	subs	r2, r2, r5
 800a77a:	6122      	str	r2, [r4, #16]
 800a77c:	f8cd a000 	str.w	sl, [sp]
 800a780:	464b      	mov	r3, r9
 800a782:	aa03      	add	r2, sp, #12
 800a784:	4621      	mov	r1, r4
 800a786:	4640      	mov	r0, r8
 800a788:	f7ff fee2 	bl	800a550 <_printf_common>
 800a78c:	3001      	adds	r0, #1
 800a78e:	d14c      	bne.n	800a82a <_printf_i+0x1fe>
 800a790:	f04f 30ff 	mov.w	r0, #4294967295
 800a794:	b004      	add	sp, #16
 800a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79a:	4835      	ldr	r0, [pc, #212]	; (800a870 <_printf_i+0x244>)
 800a79c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7a8:	6029      	str	r1, [r5, #0]
 800a7aa:	061d      	lsls	r5, r3, #24
 800a7ac:	d514      	bpl.n	800a7d8 <_printf_i+0x1ac>
 800a7ae:	07df      	lsls	r7, r3, #31
 800a7b0:	bf44      	itt	mi
 800a7b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7b6:	6023      	strmi	r3, [r4, #0]
 800a7b8:	b91e      	cbnz	r6, 800a7c2 <_printf_i+0x196>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	f023 0320 	bic.w	r3, r3, #32
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	2310      	movs	r3, #16
 800a7c4:	e7b0      	b.n	800a728 <_printf_i+0xfc>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	f043 0320 	orr.w	r3, r3, #32
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	2378      	movs	r3, #120	; 0x78
 800a7d0:	4828      	ldr	r0, [pc, #160]	; (800a874 <_printf_i+0x248>)
 800a7d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7d6:	e7e3      	b.n	800a7a0 <_printf_i+0x174>
 800a7d8:	0659      	lsls	r1, r3, #25
 800a7da:	bf48      	it	mi
 800a7dc:	b2b6      	uxthmi	r6, r6
 800a7de:	e7e6      	b.n	800a7ae <_printf_i+0x182>
 800a7e0:	4615      	mov	r5, r2
 800a7e2:	e7bb      	b.n	800a75c <_printf_i+0x130>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	6826      	ldr	r6, [r4, #0]
 800a7e8:	6961      	ldr	r1, [r4, #20]
 800a7ea:	1d18      	adds	r0, r3, #4
 800a7ec:	6028      	str	r0, [r5, #0]
 800a7ee:	0635      	lsls	r5, r6, #24
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	d501      	bpl.n	800a7f8 <_printf_i+0x1cc>
 800a7f4:	6019      	str	r1, [r3, #0]
 800a7f6:	e002      	b.n	800a7fe <_printf_i+0x1d2>
 800a7f8:	0670      	lsls	r0, r6, #25
 800a7fa:	d5fb      	bpl.n	800a7f4 <_printf_i+0x1c8>
 800a7fc:	8019      	strh	r1, [r3, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	6123      	str	r3, [r4, #16]
 800a802:	4615      	mov	r5, r2
 800a804:	e7ba      	b.n	800a77c <_printf_i+0x150>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	1d1a      	adds	r2, r3, #4
 800a80a:	602a      	str	r2, [r5, #0]
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	6862      	ldr	r2, [r4, #4]
 800a810:	2100      	movs	r1, #0
 800a812:	4628      	mov	r0, r5
 800a814:	f7f5 fd1c 	bl	8000250 <memchr>
 800a818:	b108      	cbz	r0, 800a81e <_printf_i+0x1f2>
 800a81a:	1b40      	subs	r0, r0, r5
 800a81c:	6060      	str	r0, [r4, #4]
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	2300      	movs	r3, #0
 800a824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a828:	e7a8      	b.n	800a77c <_printf_i+0x150>
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	462a      	mov	r2, r5
 800a82e:	4649      	mov	r1, r9
 800a830:	4640      	mov	r0, r8
 800a832:	47d0      	blx	sl
 800a834:	3001      	adds	r0, #1
 800a836:	d0ab      	beq.n	800a790 <_printf_i+0x164>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	079b      	lsls	r3, r3, #30
 800a83c:	d413      	bmi.n	800a866 <_printf_i+0x23a>
 800a83e:	68e0      	ldr	r0, [r4, #12]
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	4298      	cmp	r0, r3
 800a844:	bfb8      	it	lt
 800a846:	4618      	movlt	r0, r3
 800a848:	e7a4      	b.n	800a794 <_printf_i+0x168>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4632      	mov	r2, r6
 800a84e:	4649      	mov	r1, r9
 800a850:	4640      	mov	r0, r8
 800a852:	47d0      	blx	sl
 800a854:	3001      	adds	r0, #1
 800a856:	d09b      	beq.n	800a790 <_printf_i+0x164>
 800a858:	3501      	adds	r5, #1
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	9903      	ldr	r1, [sp, #12]
 800a85e:	1a5b      	subs	r3, r3, r1
 800a860:	42ab      	cmp	r3, r5
 800a862:	dcf2      	bgt.n	800a84a <_printf_i+0x21e>
 800a864:	e7eb      	b.n	800a83e <_printf_i+0x212>
 800a866:	2500      	movs	r5, #0
 800a868:	f104 0619 	add.w	r6, r4, #25
 800a86c:	e7f5      	b.n	800a85a <_printf_i+0x22e>
 800a86e:	bf00      	nop
 800a870:	0800d082 	.word	0x0800d082
 800a874:	0800d093 	.word	0x0800d093

0800a878 <iprintf>:
 800a878:	b40f      	push	{r0, r1, r2, r3}
 800a87a:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <iprintf+0x2c>)
 800a87c:	b513      	push	{r0, r1, r4, lr}
 800a87e:	681c      	ldr	r4, [r3, #0]
 800a880:	b124      	cbz	r4, 800a88c <iprintf+0x14>
 800a882:	69a3      	ldr	r3, [r4, #24]
 800a884:	b913      	cbnz	r3, 800a88c <iprintf+0x14>
 800a886:	4620      	mov	r0, r4
 800a888:	f001 f808 	bl	800b89c <__sinit>
 800a88c:	ab05      	add	r3, sp, #20
 800a88e:	9a04      	ldr	r2, [sp, #16]
 800a890:	68a1      	ldr	r1, [r4, #8]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	4620      	mov	r0, r4
 800a896:	f001 fecf 	bl	800c638 <_vfiprintf_r>
 800a89a:	b002      	add	sp, #8
 800a89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a0:	b004      	add	sp, #16
 800a8a2:	4770      	bx	lr
 800a8a4:	200001cc 	.word	0x200001cc

0800a8a8 <siprintf>:
 800a8a8:	b40e      	push	{r1, r2, r3}
 800a8aa:	b500      	push	{lr}
 800a8ac:	b09c      	sub	sp, #112	; 0x70
 800a8ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a8b0:	9002      	str	r0, [sp, #8]
 800a8b2:	9006      	str	r0, [sp, #24]
 800a8b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8b8:	4809      	ldr	r0, [pc, #36]	; (800a8e0 <siprintf+0x38>)
 800a8ba:	9107      	str	r1, [sp, #28]
 800a8bc:	9104      	str	r1, [sp, #16]
 800a8be:	4909      	ldr	r1, [pc, #36]	; (800a8e4 <siprintf+0x3c>)
 800a8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	6800      	ldr	r0, [r0, #0]
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	a902      	add	r1, sp, #8
 800a8cc:	f001 fd8a 	bl	800c3e4 <_svfiprintf_r>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	b01c      	add	sp, #112	; 0x70
 800a8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8dc:	b003      	add	sp, #12
 800a8de:	4770      	bx	lr
 800a8e0:	200001cc 	.word	0x200001cc
 800a8e4:	ffff0208 	.word	0xffff0208

0800a8e8 <strtok>:
 800a8e8:	4b16      	ldr	r3, [pc, #88]	; (800a944 <strtok+0x5c>)
 800a8ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8ec:	681e      	ldr	r6, [r3, #0]
 800a8ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b9fc      	cbnz	r4, 800a934 <strtok+0x4c>
 800a8f4:	2050      	movs	r0, #80	; 0x50
 800a8f6:	9101      	str	r1, [sp, #4]
 800a8f8:	f001 f888 	bl	800ba0c <malloc>
 800a8fc:	9901      	ldr	r1, [sp, #4]
 800a8fe:	65b0      	str	r0, [r6, #88]	; 0x58
 800a900:	4602      	mov	r2, r0
 800a902:	b920      	cbnz	r0, 800a90e <strtok+0x26>
 800a904:	4b10      	ldr	r3, [pc, #64]	; (800a948 <strtok+0x60>)
 800a906:	4811      	ldr	r0, [pc, #68]	; (800a94c <strtok+0x64>)
 800a908:	2157      	movs	r1, #87	; 0x57
 800a90a:	f000 f8d5 	bl	800aab8 <__assert_func>
 800a90e:	e9c0 4400 	strd	r4, r4, [r0]
 800a912:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a916:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a91a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a91e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a922:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a926:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a92a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a92e:	6184      	str	r4, [r0, #24]
 800a930:	7704      	strb	r4, [r0, #28]
 800a932:	6244      	str	r4, [r0, #36]	; 0x24
 800a934:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a936:	2301      	movs	r3, #1
 800a938:	4628      	mov	r0, r5
 800a93a:	b002      	add	sp, #8
 800a93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a940:	f000 b806 	b.w	800a950 <__strtok_r>
 800a944:	200001cc 	.word	0x200001cc
 800a948:	0800d0a4 	.word	0x0800d0a4
 800a94c:	0800d0bb 	.word	0x0800d0bb

0800a950 <__strtok_r>:
 800a950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a952:	b908      	cbnz	r0, 800a958 <__strtok_r+0x8>
 800a954:	6810      	ldr	r0, [r2, #0]
 800a956:	b188      	cbz	r0, 800a97c <__strtok_r+0x2c>
 800a958:	4604      	mov	r4, r0
 800a95a:	4620      	mov	r0, r4
 800a95c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a960:	460f      	mov	r7, r1
 800a962:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a966:	b91e      	cbnz	r6, 800a970 <__strtok_r+0x20>
 800a968:	b965      	cbnz	r5, 800a984 <__strtok_r+0x34>
 800a96a:	6015      	str	r5, [r2, #0]
 800a96c:	4628      	mov	r0, r5
 800a96e:	e005      	b.n	800a97c <__strtok_r+0x2c>
 800a970:	42b5      	cmp	r5, r6
 800a972:	d1f6      	bne.n	800a962 <__strtok_r+0x12>
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1f0      	bne.n	800a95a <__strtok_r+0xa>
 800a978:	6014      	str	r4, [r2, #0]
 800a97a:	7003      	strb	r3, [r0, #0]
 800a97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a97e:	461c      	mov	r4, r3
 800a980:	e00c      	b.n	800a99c <__strtok_r+0x4c>
 800a982:	b915      	cbnz	r5, 800a98a <__strtok_r+0x3a>
 800a984:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a988:	460e      	mov	r6, r1
 800a98a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a98e:	42ab      	cmp	r3, r5
 800a990:	d1f7      	bne.n	800a982 <__strtok_r+0x32>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0f3      	beq.n	800a97e <__strtok_r+0x2e>
 800a996:	2300      	movs	r3, #0
 800a998:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a99c:	6014      	str	r4, [r2, #0]
 800a99e:	e7ed      	b.n	800a97c <__strtok_r+0x2c>

0800a9a0 <_strtol_l.constprop.0>:
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a6:	d001      	beq.n	800a9ac <_strtol_l.constprop.0+0xc>
 800a9a8:	2b24      	cmp	r3, #36	; 0x24
 800a9aa:	d906      	bls.n	800a9ba <_strtol_l.constprop.0+0x1a>
 800a9ac:	f7ff fac8 	bl	8009f40 <__errno>
 800a9b0:	2316      	movs	r3, #22
 800a9b2:	6003      	str	r3, [r0, #0]
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aaa0 <_strtol_l.constprop.0+0x100>
 800a9be:	460d      	mov	r5, r1
 800a9c0:	462e      	mov	r6, r5
 800a9c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a9ca:	f017 0708 	ands.w	r7, r7, #8
 800a9ce:	d1f7      	bne.n	800a9c0 <_strtol_l.constprop.0+0x20>
 800a9d0:	2c2d      	cmp	r4, #45	; 0x2d
 800a9d2:	d132      	bne.n	800aa3a <_strtol_l.constprop.0+0x9a>
 800a9d4:	782c      	ldrb	r4, [r5, #0]
 800a9d6:	2701      	movs	r7, #1
 800a9d8:	1cb5      	adds	r5, r6, #2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d05b      	beq.n	800aa96 <_strtol_l.constprop.0+0xf6>
 800a9de:	2b10      	cmp	r3, #16
 800a9e0:	d109      	bne.n	800a9f6 <_strtol_l.constprop.0+0x56>
 800a9e2:	2c30      	cmp	r4, #48	; 0x30
 800a9e4:	d107      	bne.n	800a9f6 <_strtol_l.constprop.0+0x56>
 800a9e6:	782c      	ldrb	r4, [r5, #0]
 800a9e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9ec:	2c58      	cmp	r4, #88	; 0x58
 800a9ee:	d14d      	bne.n	800aa8c <_strtol_l.constprop.0+0xec>
 800a9f0:	786c      	ldrb	r4, [r5, #1]
 800a9f2:	2310      	movs	r3, #16
 800a9f4:	3502      	adds	r5, #2
 800a9f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9fe:	f04f 0c00 	mov.w	ip, #0
 800aa02:	fbb8 f9f3 	udiv	r9, r8, r3
 800aa06:	4666      	mov	r6, ip
 800aa08:	fb03 8a19 	mls	sl, r3, r9, r8
 800aa0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aa10:	f1be 0f09 	cmp.w	lr, #9
 800aa14:	d816      	bhi.n	800aa44 <_strtol_l.constprop.0+0xa4>
 800aa16:	4674      	mov	r4, lr
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	dd24      	ble.n	800aa66 <_strtol_l.constprop.0+0xc6>
 800aa1c:	f1bc 0f00 	cmp.w	ip, #0
 800aa20:	db1e      	blt.n	800aa60 <_strtol_l.constprop.0+0xc0>
 800aa22:	45b1      	cmp	r9, r6
 800aa24:	d31c      	bcc.n	800aa60 <_strtol_l.constprop.0+0xc0>
 800aa26:	d101      	bne.n	800aa2c <_strtol_l.constprop.0+0x8c>
 800aa28:	45a2      	cmp	sl, r4
 800aa2a:	db19      	blt.n	800aa60 <_strtol_l.constprop.0+0xc0>
 800aa2c:	fb06 4603 	mla	r6, r6, r3, r4
 800aa30:	f04f 0c01 	mov.w	ip, #1
 800aa34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa38:	e7e8      	b.n	800aa0c <_strtol_l.constprop.0+0x6c>
 800aa3a:	2c2b      	cmp	r4, #43	; 0x2b
 800aa3c:	bf04      	itt	eq
 800aa3e:	782c      	ldrbeq	r4, [r5, #0]
 800aa40:	1cb5      	addeq	r5, r6, #2
 800aa42:	e7ca      	b.n	800a9da <_strtol_l.constprop.0+0x3a>
 800aa44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aa48:	f1be 0f19 	cmp.w	lr, #25
 800aa4c:	d801      	bhi.n	800aa52 <_strtol_l.constprop.0+0xb2>
 800aa4e:	3c37      	subs	r4, #55	; 0x37
 800aa50:	e7e2      	b.n	800aa18 <_strtol_l.constprop.0+0x78>
 800aa52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aa56:	f1be 0f19 	cmp.w	lr, #25
 800aa5a:	d804      	bhi.n	800aa66 <_strtol_l.constprop.0+0xc6>
 800aa5c:	3c57      	subs	r4, #87	; 0x57
 800aa5e:	e7db      	b.n	800aa18 <_strtol_l.constprop.0+0x78>
 800aa60:	f04f 3cff 	mov.w	ip, #4294967295
 800aa64:	e7e6      	b.n	800aa34 <_strtol_l.constprop.0+0x94>
 800aa66:	f1bc 0f00 	cmp.w	ip, #0
 800aa6a:	da05      	bge.n	800aa78 <_strtol_l.constprop.0+0xd8>
 800aa6c:	2322      	movs	r3, #34	; 0x22
 800aa6e:	6003      	str	r3, [r0, #0]
 800aa70:	4646      	mov	r6, r8
 800aa72:	b942      	cbnz	r2, 800aa86 <_strtol_l.constprop.0+0xe6>
 800aa74:	4630      	mov	r0, r6
 800aa76:	e79e      	b.n	800a9b6 <_strtol_l.constprop.0+0x16>
 800aa78:	b107      	cbz	r7, 800aa7c <_strtol_l.constprop.0+0xdc>
 800aa7a:	4276      	negs	r6, r6
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	d0f9      	beq.n	800aa74 <_strtol_l.constprop.0+0xd4>
 800aa80:	f1bc 0f00 	cmp.w	ip, #0
 800aa84:	d000      	beq.n	800aa88 <_strtol_l.constprop.0+0xe8>
 800aa86:	1e69      	subs	r1, r5, #1
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	e7f3      	b.n	800aa74 <_strtol_l.constprop.0+0xd4>
 800aa8c:	2430      	movs	r4, #48	; 0x30
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1b1      	bne.n	800a9f6 <_strtol_l.constprop.0+0x56>
 800aa92:	2308      	movs	r3, #8
 800aa94:	e7af      	b.n	800a9f6 <_strtol_l.constprop.0+0x56>
 800aa96:	2c30      	cmp	r4, #48	; 0x30
 800aa98:	d0a5      	beq.n	800a9e6 <_strtol_l.constprop.0+0x46>
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	e7ab      	b.n	800a9f6 <_strtol_l.constprop.0+0x56>
 800aa9e:	bf00      	nop
 800aaa0:	0800d155 	.word	0x0800d155

0800aaa4 <strtol>:
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	460a      	mov	r2, r1
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	4802      	ldr	r0, [pc, #8]	; (800aab4 <strtol+0x10>)
 800aaac:	6800      	ldr	r0, [r0, #0]
 800aaae:	f7ff bf77 	b.w	800a9a0 <_strtol_l.constprop.0>
 800aab2:	bf00      	nop
 800aab4:	200001cc 	.word	0x200001cc

0800aab8 <__assert_func>:
 800aab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaba:	4614      	mov	r4, r2
 800aabc:	461a      	mov	r2, r3
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <__assert_func+0x2c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4605      	mov	r5, r0
 800aac4:	68d8      	ldr	r0, [r3, #12]
 800aac6:	b14c      	cbz	r4, 800aadc <__assert_func+0x24>
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <__assert_func+0x30>)
 800aaca:	9100      	str	r1, [sp, #0]
 800aacc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aad0:	4906      	ldr	r1, [pc, #24]	; (800aaec <__assert_func+0x34>)
 800aad2:	462b      	mov	r3, r5
 800aad4:	f000 ff60 	bl	800b998 <fiprintf>
 800aad8:	f002 f804 	bl	800cae4 <abort>
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <__assert_func+0x38>)
 800aade:	461c      	mov	r4, r3
 800aae0:	e7f3      	b.n	800aaca <__assert_func+0x12>
 800aae2:	bf00      	nop
 800aae4:	200001cc 	.word	0x200001cc
 800aae8:	0800d118 	.word	0x0800d118
 800aaec:	0800d125 	.word	0x0800d125
 800aaf0:	0800d153 	.word	0x0800d153

0800aaf4 <quorem>:
 800aaf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	6903      	ldr	r3, [r0, #16]
 800aafa:	690c      	ldr	r4, [r1, #16]
 800aafc:	42a3      	cmp	r3, r4
 800aafe:	4607      	mov	r7, r0
 800ab00:	f2c0 8081 	blt.w	800ac06 <quorem+0x112>
 800ab04:	3c01      	subs	r4, #1
 800ab06:	f101 0814 	add.w	r8, r1, #20
 800ab0a:	f100 0514 	add.w	r5, r0, #20
 800ab0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab28:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab2c:	d331      	bcc.n	800ab92 <quorem+0x9e>
 800ab2e:	f04f 0e00 	mov.w	lr, #0
 800ab32:	4640      	mov	r0, r8
 800ab34:	46ac      	mov	ip, r5
 800ab36:	46f2      	mov	sl, lr
 800ab38:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab3c:	b293      	uxth	r3, r2
 800ab3e:	fb06 e303 	mla	r3, r6, r3, lr
 800ab42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	ebaa 0303 	sub.w	r3, sl, r3
 800ab4c:	f8dc a000 	ldr.w	sl, [ip]
 800ab50:	0c12      	lsrs	r2, r2, #16
 800ab52:	fa13 f38a 	uxtah	r3, r3, sl
 800ab56:	fb06 e202 	mla	r2, r6, r2, lr
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	9b00      	ldr	r3, [sp, #0]
 800ab5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab62:	b292      	uxth	r2, r2
 800ab64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab6c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab70:	4581      	cmp	r9, r0
 800ab72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab76:	f84c 3b04 	str.w	r3, [ip], #4
 800ab7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab7e:	d2db      	bcs.n	800ab38 <quorem+0x44>
 800ab80:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab84:	b92b      	cbnz	r3, 800ab92 <quorem+0x9e>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	3b04      	subs	r3, #4
 800ab8a:	429d      	cmp	r5, r3
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	d32e      	bcc.n	800abee <quorem+0xfa>
 800ab90:	613c      	str	r4, [r7, #16]
 800ab92:	4638      	mov	r0, r7
 800ab94:	f001 f9d2 	bl	800bf3c <__mcmp>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	db24      	blt.n	800abe6 <quorem+0xf2>
 800ab9c:	3601      	adds	r6, #1
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f04f 0c00 	mov.w	ip, #0
 800aba4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aba8:	f8d0 e000 	ldr.w	lr, [r0]
 800abac:	b293      	uxth	r3, r2
 800abae:	ebac 0303 	sub.w	r3, ip, r3
 800abb2:	0c12      	lsrs	r2, r2, #16
 800abb4:	fa13 f38e 	uxtah	r3, r3, lr
 800abb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800abbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abc6:	45c1      	cmp	r9, r8
 800abc8:	f840 3b04 	str.w	r3, [r0], #4
 800abcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abd0:	d2e8      	bcs.n	800aba4 <quorem+0xb0>
 800abd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abda:	b922      	cbnz	r2, 800abe6 <quorem+0xf2>
 800abdc:	3b04      	subs	r3, #4
 800abde:	429d      	cmp	r5, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	d30a      	bcc.n	800abfa <quorem+0x106>
 800abe4:	613c      	str	r4, [r7, #16]
 800abe6:	4630      	mov	r0, r6
 800abe8:	b003      	add	sp, #12
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	6812      	ldr	r2, [r2, #0]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	2a00      	cmp	r2, #0
 800abf4:	d1cc      	bne.n	800ab90 <quorem+0x9c>
 800abf6:	3c01      	subs	r4, #1
 800abf8:	e7c7      	b.n	800ab8a <quorem+0x96>
 800abfa:	6812      	ldr	r2, [r2, #0]
 800abfc:	3b04      	subs	r3, #4
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	d1f0      	bne.n	800abe4 <quorem+0xf0>
 800ac02:	3c01      	subs	r4, #1
 800ac04:	e7eb      	b.n	800abde <quorem+0xea>
 800ac06:	2000      	movs	r0, #0
 800ac08:	e7ee      	b.n	800abe8 <quorem+0xf4>
 800ac0a:	0000      	movs	r0, r0
 800ac0c:	0000      	movs	r0, r0
	...

0800ac10 <_dtoa_r>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ed2d 8b04 	vpush	{d8-d9}
 800ac18:	ec57 6b10 	vmov	r6, r7, d0
 800ac1c:	b093      	sub	sp, #76	; 0x4c
 800ac1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac24:	9106      	str	r1, [sp, #24]
 800ac26:	ee10 aa10 	vmov	sl, s0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac30:	46bb      	mov	fp, r7
 800ac32:	b975      	cbnz	r5, 800ac52 <_dtoa_r+0x42>
 800ac34:	2010      	movs	r0, #16
 800ac36:	f000 fee9 	bl	800ba0c <malloc>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	6260      	str	r0, [r4, #36]	; 0x24
 800ac3e:	b920      	cbnz	r0, 800ac4a <_dtoa_r+0x3a>
 800ac40:	4ba7      	ldr	r3, [pc, #668]	; (800aee0 <_dtoa_r+0x2d0>)
 800ac42:	21ea      	movs	r1, #234	; 0xea
 800ac44:	48a7      	ldr	r0, [pc, #668]	; (800aee4 <_dtoa_r+0x2d4>)
 800ac46:	f7ff ff37 	bl	800aab8 <__assert_func>
 800ac4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac4e:	6005      	str	r5, [r0, #0]
 800ac50:	60c5      	str	r5, [r0, #12]
 800ac52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac54:	6819      	ldr	r1, [r3, #0]
 800ac56:	b151      	cbz	r1, 800ac6e <_dtoa_r+0x5e>
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	604a      	str	r2, [r1, #4]
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	4093      	lsls	r3, r2
 800ac60:	608b      	str	r3, [r1, #8]
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 ff28 	bl	800bab8 <_Bfree>
 800ac68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	1e3b      	subs	r3, r7, #0
 800ac70:	bfaa      	itet	ge
 800ac72:	2300      	movge	r3, #0
 800ac74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac78:	f8c8 3000 	strge.w	r3, [r8]
 800ac7c:	4b9a      	ldr	r3, [pc, #616]	; (800aee8 <_dtoa_r+0x2d8>)
 800ac7e:	bfbc      	itt	lt
 800ac80:	2201      	movlt	r2, #1
 800ac82:	f8c8 2000 	strlt.w	r2, [r8]
 800ac86:	ea33 030b 	bics.w	r3, r3, fp
 800ac8a:	d11b      	bne.n	800acc4 <_dtoa_r+0xb4>
 800ac8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac98:	4333      	orrs	r3, r6
 800ac9a:	f000 8592 	beq.w	800b7c2 <_dtoa_r+0xbb2>
 800ac9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca0:	b963      	cbnz	r3, 800acbc <_dtoa_r+0xac>
 800aca2:	4b92      	ldr	r3, [pc, #584]	; (800aeec <_dtoa_r+0x2dc>)
 800aca4:	e022      	b.n	800acec <_dtoa_r+0xdc>
 800aca6:	4b92      	ldr	r3, [pc, #584]	; (800aef0 <_dtoa_r+0x2e0>)
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	3308      	adds	r3, #8
 800acac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	9801      	ldr	r0, [sp, #4]
 800acb2:	b013      	add	sp, #76	; 0x4c
 800acb4:	ecbd 8b04 	vpop	{d8-d9}
 800acb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbc:	4b8b      	ldr	r3, [pc, #556]	; (800aeec <_dtoa_r+0x2dc>)
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	3303      	adds	r3, #3
 800acc2:	e7f3      	b.n	800acac <_dtoa_r+0x9c>
 800acc4:	2200      	movs	r2, #0
 800acc6:	2300      	movs	r3, #0
 800acc8:	4650      	mov	r0, sl
 800acca:	4659      	mov	r1, fp
 800accc:	f7f5 ff34 	bl	8000b38 <__aeabi_dcmpeq>
 800acd0:	ec4b ab19 	vmov	d9, sl, fp
 800acd4:	4680      	mov	r8, r0
 800acd6:	b158      	cbz	r0, 800acf0 <_dtoa_r+0xe0>
 800acd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acda:	2301      	movs	r3, #1
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 856b 	beq.w	800b7bc <_dtoa_r+0xbac>
 800ace6:	4883      	ldr	r0, [pc, #524]	; (800aef4 <_dtoa_r+0x2e4>)
 800ace8:	6018      	str	r0, [r3, #0]
 800acea:	1e43      	subs	r3, r0, #1
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	e7df      	b.n	800acb0 <_dtoa_r+0xa0>
 800acf0:	ec4b ab10 	vmov	d0, sl, fp
 800acf4:	aa10      	add	r2, sp, #64	; 0x40
 800acf6:	a911      	add	r1, sp, #68	; 0x44
 800acf8:	4620      	mov	r0, r4
 800acfa:	f001 f9c5 	bl	800c088 <__d2b>
 800acfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad02:	ee08 0a10 	vmov	s16, r0
 800ad06:	2d00      	cmp	r5, #0
 800ad08:	f000 8084 	beq.w	800ae14 <_dtoa_r+0x204>
 800ad0c:	ee19 3a90 	vmov	r3, s19
 800ad10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad18:	4656      	mov	r6, sl
 800ad1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad26:	4b74      	ldr	r3, [pc, #464]	; (800aef8 <_dtoa_r+0x2e8>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 fae3 	bl	80002f8 <__aeabi_dsub>
 800ad32:	a365      	add	r3, pc, #404	; (adr r3, 800aec8 <_dtoa_r+0x2b8>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fc96 	bl	8000668 <__aeabi_dmul>
 800ad3c:	a364      	add	r3, pc, #400	; (adr r3, 800aed0 <_dtoa_r+0x2c0>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fadb 	bl	80002fc <__adddf3>
 800ad46:	4606      	mov	r6, r0
 800ad48:	4628      	mov	r0, r5
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	f7f5 fc22 	bl	8000594 <__aeabi_i2d>
 800ad50:	a361      	add	r3, pc, #388	; (adr r3, 800aed8 <_dtoa_r+0x2c8>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fc87 	bl	8000668 <__aeabi_dmul>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 facb 	bl	80002fc <__adddf3>
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	f7f5 ff2d 	bl	8000bc8 <__aeabi_d2iz>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	9000      	str	r0, [sp, #0]
 800ad72:	2300      	movs	r3, #0
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 fee8 	bl	8000b4c <__aeabi_dcmplt>
 800ad7c:	b150      	cbz	r0, 800ad94 <_dtoa_r+0x184>
 800ad7e:	9800      	ldr	r0, [sp, #0]
 800ad80:	f7f5 fc08 	bl	8000594 <__aeabi_i2d>
 800ad84:	4632      	mov	r2, r6
 800ad86:	463b      	mov	r3, r7
 800ad88:	f7f5 fed6 	bl	8000b38 <__aeabi_dcmpeq>
 800ad8c:	b910      	cbnz	r0, 800ad94 <_dtoa_r+0x184>
 800ad8e:	9b00      	ldr	r3, [sp, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	9b00      	ldr	r3, [sp, #0]
 800ad96:	2b16      	cmp	r3, #22
 800ad98:	d85a      	bhi.n	800ae50 <_dtoa_r+0x240>
 800ad9a:	9a00      	ldr	r2, [sp, #0]
 800ad9c:	4b57      	ldr	r3, [pc, #348]	; (800aefc <_dtoa_r+0x2ec>)
 800ad9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	ec51 0b19 	vmov	r0, r1, d9
 800adaa:	f7f5 fecf 	bl	8000b4c <__aeabi_dcmplt>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d050      	beq.n	800ae54 <_dtoa_r+0x244>
 800adb2:	9b00      	ldr	r3, [sp, #0]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	2300      	movs	r3, #0
 800adba:	930b      	str	r3, [sp, #44]	; 0x2c
 800adbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adbe:	1b5d      	subs	r5, r3, r5
 800adc0:	1e6b      	subs	r3, r5, #1
 800adc2:	9305      	str	r3, [sp, #20]
 800adc4:	bf45      	ittet	mi
 800adc6:	f1c5 0301 	rsbmi	r3, r5, #1
 800adca:	9304      	strmi	r3, [sp, #16]
 800adcc:	2300      	movpl	r3, #0
 800adce:	2300      	movmi	r3, #0
 800add0:	bf4c      	ite	mi
 800add2:	9305      	strmi	r3, [sp, #20]
 800add4:	9304      	strpl	r3, [sp, #16]
 800add6:	9b00      	ldr	r3, [sp, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	db3d      	blt.n	800ae58 <_dtoa_r+0x248>
 800addc:	9b05      	ldr	r3, [sp, #20]
 800adde:	9a00      	ldr	r2, [sp, #0]
 800ade0:	920a      	str	r2, [sp, #40]	; 0x28
 800ade2:	4413      	add	r3, r2
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	2300      	movs	r3, #0
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	2b09      	cmp	r3, #9
 800adee:	f200 8089 	bhi.w	800af04 <_dtoa_r+0x2f4>
 800adf2:	2b05      	cmp	r3, #5
 800adf4:	bfc4      	itt	gt
 800adf6:	3b04      	subgt	r3, #4
 800adf8:	9306      	strgt	r3, [sp, #24]
 800adfa:	9b06      	ldr	r3, [sp, #24]
 800adfc:	f1a3 0302 	sub.w	r3, r3, #2
 800ae00:	bfcc      	ite	gt
 800ae02:	2500      	movgt	r5, #0
 800ae04:	2501      	movle	r5, #1
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	f200 8087 	bhi.w	800af1a <_dtoa_r+0x30a>
 800ae0c:	e8df f003 	tbb	[pc, r3]
 800ae10:	59383a2d 	.word	0x59383a2d
 800ae14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae18:	441d      	add	r5, r3
 800ae1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	bfc1      	itttt	gt
 800ae22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae32:	bfda      	itte	le
 800ae34:	f1c3 0320 	rsble	r3, r3, #32
 800ae38:	fa06 f003 	lslle.w	r0, r6, r3
 800ae3c:	4318      	orrgt	r0, r3
 800ae3e:	f7f5 fb99 	bl	8000574 <__aeabi_ui2d>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4606      	mov	r6, r0
 800ae46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae4a:	3d01      	subs	r5, #1
 800ae4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae4e:	e76a      	b.n	800ad26 <_dtoa_r+0x116>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e7b2      	b.n	800adba <_dtoa_r+0x1aa>
 800ae54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae56:	e7b1      	b.n	800adbc <_dtoa_r+0x1ac>
 800ae58:	9b04      	ldr	r3, [sp, #16]
 800ae5a:	9a00      	ldr	r2, [sp, #0]
 800ae5c:	1a9b      	subs	r3, r3, r2
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	4253      	negs	r3, r2
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	2300      	movs	r3, #0
 800ae66:	930a      	str	r3, [sp, #40]	; 0x28
 800ae68:	e7bf      	b.n	800adea <_dtoa_r+0x1da>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	9308      	str	r3, [sp, #32]
 800ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dc55      	bgt.n	800af20 <_dtoa_r+0x310>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7e:	e00c      	b.n	800ae9a <_dtoa_r+0x28a>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7f3      	b.n	800ae6c <_dtoa_r+0x25c>
 800ae84:	2300      	movs	r3, #0
 800ae86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae88:	9308      	str	r3, [sp, #32]
 800ae8a:	9b00      	ldr	r3, [sp, #0]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	3301      	adds	r3, #1
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	bfb8      	it	lt
 800ae98:	2301      	movlt	r3, #1
 800ae9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	6042      	str	r2, [r0, #4]
 800aea0:	2204      	movs	r2, #4
 800aea2:	f102 0614 	add.w	r6, r2, #20
 800aea6:	429e      	cmp	r6, r3
 800aea8:	6841      	ldr	r1, [r0, #4]
 800aeaa:	d93d      	bls.n	800af28 <_dtoa_r+0x318>
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fdc3 	bl	800ba38 <_Balloc>
 800aeb2:	9001      	str	r0, [sp, #4]
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d13b      	bne.n	800af30 <_dtoa_r+0x320>
 800aeb8:	4b11      	ldr	r3, [pc, #68]	; (800af00 <_dtoa_r+0x2f0>)
 800aeba:	4602      	mov	r2, r0
 800aebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aec0:	e6c0      	b.n	800ac44 <_dtoa_r+0x34>
 800aec2:	2301      	movs	r3, #1
 800aec4:	e7df      	b.n	800ae86 <_dtoa_r+0x276>
 800aec6:	bf00      	nop
 800aec8:	636f4361 	.word	0x636f4361
 800aecc:	3fd287a7 	.word	0x3fd287a7
 800aed0:	8b60c8b3 	.word	0x8b60c8b3
 800aed4:	3fc68a28 	.word	0x3fc68a28
 800aed8:	509f79fb 	.word	0x509f79fb
 800aedc:	3fd34413 	.word	0x3fd34413
 800aee0:	0800d0a4 	.word	0x0800d0a4
 800aee4:	0800d262 	.word	0x0800d262
 800aee8:	7ff00000 	.word	0x7ff00000
 800aeec:	0800d25e 	.word	0x0800d25e
 800aef0:	0800d255 	.word	0x0800d255
 800aef4:	0800d081 	.word	0x0800d081
 800aef8:	3ff80000 	.word	0x3ff80000
 800aefc:	0800d3b8 	.word	0x0800d3b8
 800af00:	0800d2bd 	.word	0x0800d2bd
 800af04:	2501      	movs	r5, #1
 800af06:	2300      	movs	r3, #0
 800af08:	9306      	str	r3, [sp, #24]
 800af0a:	9508      	str	r5, [sp, #32]
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295
 800af10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af14:	2200      	movs	r2, #0
 800af16:	2312      	movs	r3, #18
 800af18:	e7b0      	b.n	800ae7c <_dtoa_r+0x26c>
 800af1a:	2301      	movs	r3, #1
 800af1c:	9308      	str	r3, [sp, #32]
 800af1e:	e7f5      	b.n	800af0c <_dtoa_r+0x2fc>
 800af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af26:	e7b8      	b.n	800ae9a <_dtoa_r+0x28a>
 800af28:	3101      	adds	r1, #1
 800af2a:	6041      	str	r1, [r0, #4]
 800af2c:	0052      	lsls	r2, r2, #1
 800af2e:	e7b8      	b.n	800aea2 <_dtoa_r+0x292>
 800af30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af32:	9a01      	ldr	r2, [sp, #4]
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	2b0e      	cmp	r3, #14
 800af3a:	f200 809d 	bhi.w	800b078 <_dtoa_r+0x468>
 800af3e:	2d00      	cmp	r5, #0
 800af40:	f000 809a 	beq.w	800b078 <_dtoa_r+0x468>
 800af44:	9b00      	ldr	r3, [sp, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	dd32      	ble.n	800afb0 <_dtoa_r+0x3a0>
 800af4a:	4ab7      	ldr	r2, [pc, #732]	; (800b228 <_dtoa_r+0x618>)
 800af4c:	f003 030f 	and.w	r3, r3, #15
 800af50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af58:	9b00      	ldr	r3, [sp, #0]
 800af5a:	05d8      	lsls	r0, r3, #23
 800af5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af60:	d516      	bpl.n	800af90 <_dtoa_r+0x380>
 800af62:	4bb2      	ldr	r3, [pc, #712]	; (800b22c <_dtoa_r+0x61c>)
 800af64:	ec51 0b19 	vmov	r0, r1, d9
 800af68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af6c:	f7f5 fca6 	bl	80008bc <__aeabi_ddiv>
 800af70:	f007 070f 	and.w	r7, r7, #15
 800af74:	4682      	mov	sl, r0
 800af76:	468b      	mov	fp, r1
 800af78:	2503      	movs	r5, #3
 800af7a:	4eac      	ldr	r6, [pc, #688]	; (800b22c <_dtoa_r+0x61c>)
 800af7c:	b957      	cbnz	r7, 800af94 <_dtoa_r+0x384>
 800af7e:	4642      	mov	r2, r8
 800af80:	464b      	mov	r3, r9
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 fc99 	bl	80008bc <__aeabi_ddiv>
 800af8a:	4682      	mov	sl, r0
 800af8c:	468b      	mov	fp, r1
 800af8e:	e028      	b.n	800afe2 <_dtoa_r+0x3d2>
 800af90:	2502      	movs	r5, #2
 800af92:	e7f2      	b.n	800af7a <_dtoa_r+0x36a>
 800af94:	07f9      	lsls	r1, r7, #31
 800af96:	d508      	bpl.n	800afaa <_dtoa_r+0x39a>
 800af98:	4640      	mov	r0, r8
 800af9a:	4649      	mov	r1, r9
 800af9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afa0:	f7f5 fb62 	bl	8000668 <__aeabi_dmul>
 800afa4:	3501      	adds	r5, #1
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	107f      	asrs	r7, r7, #1
 800afac:	3608      	adds	r6, #8
 800afae:	e7e5      	b.n	800af7c <_dtoa_r+0x36c>
 800afb0:	f000 809b 	beq.w	800b0ea <_dtoa_r+0x4da>
 800afb4:	9b00      	ldr	r3, [sp, #0]
 800afb6:	4f9d      	ldr	r7, [pc, #628]	; (800b22c <_dtoa_r+0x61c>)
 800afb8:	425e      	negs	r6, r3
 800afba:	4b9b      	ldr	r3, [pc, #620]	; (800b228 <_dtoa_r+0x618>)
 800afbc:	f006 020f 	and.w	r2, r6, #15
 800afc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	ec51 0b19 	vmov	r0, r1, d9
 800afcc:	f7f5 fb4c 	bl	8000668 <__aeabi_dmul>
 800afd0:	1136      	asrs	r6, r6, #4
 800afd2:	4682      	mov	sl, r0
 800afd4:	468b      	mov	fp, r1
 800afd6:	2300      	movs	r3, #0
 800afd8:	2502      	movs	r5, #2
 800afda:	2e00      	cmp	r6, #0
 800afdc:	d17a      	bne.n	800b0d4 <_dtoa_r+0x4c4>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1d3      	bne.n	800af8a <_dtoa_r+0x37a>
 800afe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8082 	beq.w	800b0ee <_dtoa_r+0x4de>
 800afea:	4b91      	ldr	r3, [pc, #580]	; (800b230 <_dtoa_r+0x620>)
 800afec:	2200      	movs	r2, #0
 800afee:	4650      	mov	r0, sl
 800aff0:	4659      	mov	r1, fp
 800aff2:	f7f5 fdab 	bl	8000b4c <__aeabi_dcmplt>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d079      	beq.n	800b0ee <_dtoa_r+0x4de>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d076      	beq.n	800b0ee <_dtoa_r+0x4de>
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd36      	ble.n	800b074 <_dtoa_r+0x464>
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	4650      	mov	r0, sl
 800b00a:	4659      	mov	r1, fp
 800b00c:	1e5f      	subs	r7, r3, #1
 800b00e:	2200      	movs	r2, #0
 800b010:	4b88      	ldr	r3, [pc, #544]	; (800b234 <_dtoa_r+0x624>)
 800b012:	f7f5 fb29 	bl	8000668 <__aeabi_dmul>
 800b016:	9e02      	ldr	r6, [sp, #8]
 800b018:	4682      	mov	sl, r0
 800b01a:	468b      	mov	fp, r1
 800b01c:	3501      	adds	r5, #1
 800b01e:	4628      	mov	r0, r5
 800b020:	f7f5 fab8 	bl	8000594 <__aeabi_i2d>
 800b024:	4652      	mov	r2, sl
 800b026:	465b      	mov	r3, fp
 800b028:	f7f5 fb1e 	bl	8000668 <__aeabi_dmul>
 800b02c:	4b82      	ldr	r3, [pc, #520]	; (800b238 <_dtoa_r+0x628>)
 800b02e:	2200      	movs	r2, #0
 800b030:	f7f5 f964 	bl	80002fc <__adddf3>
 800b034:	46d0      	mov	r8, sl
 800b036:	46d9      	mov	r9, fp
 800b038:	4682      	mov	sl, r0
 800b03a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b03e:	2e00      	cmp	r6, #0
 800b040:	d158      	bne.n	800b0f4 <_dtoa_r+0x4e4>
 800b042:	4b7e      	ldr	r3, [pc, #504]	; (800b23c <_dtoa_r+0x62c>)
 800b044:	2200      	movs	r2, #0
 800b046:	4640      	mov	r0, r8
 800b048:	4649      	mov	r1, r9
 800b04a:	f7f5 f955 	bl	80002f8 <__aeabi_dsub>
 800b04e:	4652      	mov	r2, sl
 800b050:	465b      	mov	r3, fp
 800b052:	4680      	mov	r8, r0
 800b054:	4689      	mov	r9, r1
 800b056:	f7f5 fd97 	bl	8000b88 <__aeabi_dcmpgt>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f040 8295 	bne.w	800b58a <_dtoa_r+0x97a>
 800b060:	4652      	mov	r2, sl
 800b062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b066:	4640      	mov	r0, r8
 800b068:	4649      	mov	r1, r9
 800b06a:	f7f5 fd6f 	bl	8000b4c <__aeabi_dcmplt>
 800b06e:	2800      	cmp	r0, #0
 800b070:	f040 8289 	bne.w	800b586 <_dtoa_r+0x976>
 800b074:	ec5b ab19 	vmov	sl, fp, d9
 800b078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f2c0 8148 	blt.w	800b310 <_dtoa_r+0x700>
 800b080:	9a00      	ldr	r2, [sp, #0]
 800b082:	2a0e      	cmp	r2, #14
 800b084:	f300 8144 	bgt.w	800b310 <_dtoa_r+0x700>
 800b088:	4b67      	ldr	r3, [pc, #412]	; (800b228 <_dtoa_r+0x618>)
 800b08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b08e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	f280 80d5 	bge.w	800b244 <_dtoa_r+0x634>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f300 80d1 	bgt.w	800b244 <_dtoa_r+0x634>
 800b0a2:	f040 826f 	bne.w	800b584 <_dtoa_r+0x974>
 800b0a6:	4b65      	ldr	r3, [pc, #404]	; (800b23c <_dtoa_r+0x62c>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 fadb 	bl	8000668 <__aeabi_dmul>
 800b0b2:	4652      	mov	r2, sl
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	f7f5 fd5d 	bl	8000b74 <__aeabi_dcmpge>
 800b0ba:	9e03      	ldr	r6, [sp, #12]
 800b0bc:	4637      	mov	r7, r6
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f040 8245 	bne.w	800b54e <_dtoa_r+0x93e>
 800b0c4:	9d01      	ldr	r5, [sp, #4]
 800b0c6:	2331      	movs	r3, #49	; 0x31
 800b0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b0cc:	9b00      	ldr	r3, [sp, #0]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	e240      	b.n	800b556 <_dtoa_r+0x946>
 800b0d4:	07f2      	lsls	r2, r6, #31
 800b0d6:	d505      	bpl.n	800b0e4 <_dtoa_r+0x4d4>
 800b0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0dc:	f7f5 fac4 	bl	8000668 <__aeabi_dmul>
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	1076      	asrs	r6, r6, #1
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	e777      	b.n	800afda <_dtoa_r+0x3ca>
 800b0ea:	2502      	movs	r5, #2
 800b0ec:	e779      	b.n	800afe2 <_dtoa_r+0x3d2>
 800b0ee:	9f00      	ldr	r7, [sp, #0]
 800b0f0:	9e03      	ldr	r6, [sp, #12]
 800b0f2:	e794      	b.n	800b01e <_dtoa_r+0x40e>
 800b0f4:	9901      	ldr	r1, [sp, #4]
 800b0f6:	4b4c      	ldr	r3, [pc, #304]	; (800b228 <_dtoa_r+0x618>)
 800b0f8:	4431      	add	r1, r6
 800b0fa:	910d      	str	r1, [sp, #52]	; 0x34
 800b0fc:	9908      	ldr	r1, [sp, #32]
 800b0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b106:	2900      	cmp	r1, #0
 800b108:	d043      	beq.n	800b192 <_dtoa_r+0x582>
 800b10a:	494d      	ldr	r1, [pc, #308]	; (800b240 <_dtoa_r+0x630>)
 800b10c:	2000      	movs	r0, #0
 800b10e:	f7f5 fbd5 	bl	80008bc <__aeabi_ddiv>
 800b112:	4652      	mov	r2, sl
 800b114:	465b      	mov	r3, fp
 800b116:	f7f5 f8ef 	bl	80002f8 <__aeabi_dsub>
 800b11a:	9d01      	ldr	r5, [sp, #4]
 800b11c:	4682      	mov	sl, r0
 800b11e:	468b      	mov	fp, r1
 800b120:	4649      	mov	r1, r9
 800b122:	4640      	mov	r0, r8
 800b124:	f7f5 fd50 	bl	8000bc8 <__aeabi_d2iz>
 800b128:	4606      	mov	r6, r0
 800b12a:	f7f5 fa33 	bl	8000594 <__aeabi_i2d>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 f8df 	bl	80002f8 <__aeabi_dsub>
 800b13a:	3630      	adds	r6, #48	; 0x30
 800b13c:	f805 6b01 	strb.w	r6, [r5], #1
 800b140:	4652      	mov	r2, sl
 800b142:	465b      	mov	r3, fp
 800b144:	4680      	mov	r8, r0
 800b146:	4689      	mov	r9, r1
 800b148:	f7f5 fd00 	bl	8000b4c <__aeabi_dcmplt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d163      	bne.n	800b218 <_dtoa_r+0x608>
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	4936      	ldr	r1, [pc, #216]	; (800b230 <_dtoa_r+0x620>)
 800b156:	2000      	movs	r0, #0
 800b158:	f7f5 f8ce 	bl	80002f8 <__aeabi_dsub>
 800b15c:	4652      	mov	r2, sl
 800b15e:	465b      	mov	r3, fp
 800b160:	f7f5 fcf4 	bl	8000b4c <__aeabi_dcmplt>
 800b164:	2800      	cmp	r0, #0
 800b166:	f040 80b5 	bne.w	800b2d4 <_dtoa_r+0x6c4>
 800b16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b16c:	429d      	cmp	r5, r3
 800b16e:	d081      	beq.n	800b074 <_dtoa_r+0x464>
 800b170:	4b30      	ldr	r3, [pc, #192]	; (800b234 <_dtoa_r+0x624>)
 800b172:	2200      	movs	r2, #0
 800b174:	4650      	mov	r0, sl
 800b176:	4659      	mov	r1, fp
 800b178:	f7f5 fa76 	bl	8000668 <__aeabi_dmul>
 800b17c:	4b2d      	ldr	r3, [pc, #180]	; (800b234 <_dtoa_r+0x624>)
 800b17e:	4682      	mov	sl, r0
 800b180:	468b      	mov	fp, r1
 800b182:	4640      	mov	r0, r8
 800b184:	4649      	mov	r1, r9
 800b186:	2200      	movs	r2, #0
 800b188:	f7f5 fa6e 	bl	8000668 <__aeabi_dmul>
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	e7c6      	b.n	800b120 <_dtoa_r+0x510>
 800b192:	4650      	mov	r0, sl
 800b194:	4659      	mov	r1, fp
 800b196:	f7f5 fa67 	bl	8000668 <__aeabi_dmul>
 800b19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b19c:	9d01      	ldr	r5, [sp, #4]
 800b19e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1a0:	4682      	mov	sl, r0
 800b1a2:	468b      	mov	fp, r1
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	f7f5 fd0e 	bl	8000bc8 <__aeabi_d2iz>
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	f7f5 f9f1 	bl	8000594 <__aeabi_i2d>
 800b1b2:	3630      	adds	r6, #48	; 0x30
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	f7f5 f89c 	bl	80002f8 <__aeabi_dsub>
 800b1c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4689      	mov	r9, r1
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	d124      	bne.n	800b21c <_dtoa_r+0x60c>
 800b1d2:	4b1b      	ldr	r3, [pc, #108]	; (800b240 <_dtoa_r+0x630>)
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	f7f5 f890 	bl	80002fc <__adddf3>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	f7f5 fcd0 	bl	8000b88 <__aeabi_dcmpgt>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d173      	bne.n	800b2d4 <_dtoa_r+0x6c4>
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	465b      	mov	r3, fp
 800b1f0:	4913      	ldr	r1, [pc, #76]	; (800b240 <_dtoa_r+0x630>)
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f7f5 f880 	bl	80002f8 <__aeabi_dsub>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 fca4 	bl	8000b4c <__aeabi_dcmplt>
 800b204:	2800      	cmp	r0, #0
 800b206:	f43f af35 	beq.w	800b074 <_dtoa_r+0x464>
 800b20a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b20c:	1e6b      	subs	r3, r5, #1
 800b20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b214:	2b30      	cmp	r3, #48	; 0x30
 800b216:	d0f8      	beq.n	800b20a <_dtoa_r+0x5fa>
 800b218:	9700      	str	r7, [sp, #0]
 800b21a:	e049      	b.n	800b2b0 <_dtoa_r+0x6a0>
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <_dtoa_r+0x624>)
 800b21e:	f7f5 fa23 	bl	8000668 <__aeabi_dmul>
 800b222:	4680      	mov	r8, r0
 800b224:	4689      	mov	r9, r1
 800b226:	e7bd      	b.n	800b1a4 <_dtoa_r+0x594>
 800b228:	0800d3b8 	.word	0x0800d3b8
 800b22c:	0800d390 	.word	0x0800d390
 800b230:	3ff00000 	.word	0x3ff00000
 800b234:	40240000 	.word	0x40240000
 800b238:	401c0000 	.word	0x401c0000
 800b23c:	40140000 	.word	0x40140000
 800b240:	3fe00000 	.word	0x3fe00000
 800b244:	9d01      	ldr	r5, [sp, #4]
 800b246:	4656      	mov	r6, sl
 800b248:	465f      	mov	r7, fp
 800b24a:	4642      	mov	r2, r8
 800b24c:	464b      	mov	r3, r9
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fb33 	bl	80008bc <__aeabi_ddiv>
 800b256:	f7f5 fcb7 	bl	8000bc8 <__aeabi_d2iz>
 800b25a:	4682      	mov	sl, r0
 800b25c:	f7f5 f99a 	bl	8000594 <__aeabi_i2d>
 800b260:	4642      	mov	r2, r8
 800b262:	464b      	mov	r3, r9
 800b264:	f7f5 fa00 	bl	8000668 <__aeabi_dmul>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4630      	mov	r0, r6
 800b26e:	4639      	mov	r1, r7
 800b270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b274:	f7f5 f840 	bl	80002f8 <__aeabi_dsub>
 800b278:	f805 6b01 	strb.w	r6, [r5], #1
 800b27c:	9e01      	ldr	r6, [sp, #4]
 800b27e:	9f03      	ldr	r7, [sp, #12]
 800b280:	1bae      	subs	r6, r5, r6
 800b282:	42b7      	cmp	r7, r6
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	d135      	bne.n	800b2f6 <_dtoa_r+0x6e6>
 800b28a:	f7f5 f837 	bl	80002fc <__adddf3>
 800b28e:	4642      	mov	r2, r8
 800b290:	464b      	mov	r3, r9
 800b292:	4606      	mov	r6, r0
 800b294:	460f      	mov	r7, r1
 800b296:	f7f5 fc77 	bl	8000b88 <__aeabi_dcmpgt>
 800b29a:	b9d0      	cbnz	r0, 800b2d2 <_dtoa_r+0x6c2>
 800b29c:	4642      	mov	r2, r8
 800b29e:	464b      	mov	r3, r9
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 fc48 	bl	8000b38 <__aeabi_dcmpeq>
 800b2a8:	b110      	cbz	r0, 800b2b0 <_dtoa_r+0x6a0>
 800b2aa:	f01a 0f01 	tst.w	sl, #1
 800b2ae:	d110      	bne.n	800b2d2 <_dtoa_r+0x6c2>
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	ee18 1a10 	vmov	r1, s16
 800b2b6:	f000 fbff 	bl	800bab8 <_Bfree>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	9800      	ldr	r0, [sp, #0]
 800b2be:	702b      	strb	r3, [r5, #0]
 800b2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	6018      	str	r0, [r3, #0]
 800b2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f43f acf1 	beq.w	800acb0 <_dtoa_r+0xa0>
 800b2ce:	601d      	str	r5, [r3, #0]
 800b2d0:	e4ee      	b.n	800acb0 <_dtoa_r+0xa0>
 800b2d2:	9f00      	ldr	r7, [sp, #0]
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2dc:	2a39      	cmp	r2, #57	; 0x39
 800b2de:	d106      	bne.n	800b2ee <_dtoa_r+0x6de>
 800b2e0:	9a01      	ldr	r2, [sp, #4]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d1f7      	bne.n	800b2d6 <_dtoa_r+0x6c6>
 800b2e6:	9901      	ldr	r1, [sp, #4]
 800b2e8:	2230      	movs	r2, #48	; 0x30
 800b2ea:	3701      	adds	r7, #1
 800b2ec:	700a      	strb	r2, [r1, #0]
 800b2ee:	781a      	ldrb	r2, [r3, #0]
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e790      	b.n	800b218 <_dtoa_r+0x608>
 800b2f6:	4ba6      	ldr	r3, [pc, #664]	; (800b590 <_dtoa_r+0x980>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f7f5 f9b5 	bl	8000668 <__aeabi_dmul>
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	4606      	mov	r6, r0
 800b304:	460f      	mov	r7, r1
 800b306:	f7f5 fc17 	bl	8000b38 <__aeabi_dcmpeq>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d09d      	beq.n	800b24a <_dtoa_r+0x63a>
 800b30e:	e7cf      	b.n	800b2b0 <_dtoa_r+0x6a0>
 800b310:	9a08      	ldr	r2, [sp, #32]
 800b312:	2a00      	cmp	r2, #0
 800b314:	f000 80d7 	beq.w	800b4c6 <_dtoa_r+0x8b6>
 800b318:	9a06      	ldr	r2, [sp, #24]
 800b31a:	2a01      	cmp	r2, #1
 800b31c:	f300 80ba 	bgt.w	800b494 <_dtoa_r+0x884>
 800b320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b322:	2a00      	cmp	r2, #0
 800b324:	f000 80b2 	beq.w	800b48c <_dtoa_r+0x87c>
 800b328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b32c:	9e07      	ldr	r6, [sp, #28]
 800b32e:	9d04      	ldr	r5, [sp, #16]
 800b330:	9a04      	ldr	r2, [sp, #16]
 800b332:	441a      	add	r2, r3
 800b334:	9204      	str	r2, [sp, #16]
 800b336:	9a05      	ldr	r2, [sp, #20]
 800b338:	2101      	movs	r1, #1
 800b33a:	441a      	add	r2, r3
 800b33c:	4620      	mov	r0, r4
 800b33e:	9205      	str	r2, [sp, #20]
 800b340:	f000 fc72 	bl	800bc28 <__i2b>
 800b344:	4607      	mov	r7, r0
 800b346:	2d00      	cmp	r5, #0
 800b348:	dd0c      	ble.n	800b364 <_dtoa_r+0x754>
 800b34a:	9b05      	ldr	r3, [sp, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd09      	ble.n	800b364 <_dtoa_r+0x754>
 800b350:	42ab      	cmp	r3, r5
 800b352:	9a04      	ldr	r2, [sp, #16]
 800b354:	bfa8      	it	ge
 800b356:	462b      	movge	r3, r5
 800b358:	1ad2      	subs	r2, r2, r3
 800b35a:	9204      	str	r2, [sp, #16]
 800b35c:	9a05      	ldr	r2, [sp, #20]
 800b35e:	1aed      	subs	r5, r5, r3
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	9305      	str	r3, [sp, #20]
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	b31b      	cbz	r3, 800b3b0 <_dtoa_r+0x7a0>
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80af 	beq.w	800b4ce <_dtoa_r+0x8be>
 800b370:	2e00      	cmp	r6, #0
 800b372:	dd13      	ble.n	800b39c <_dtoa_r+0x78c>
 800b374:	4639      	mov	r1, r7
 800b376:	4632      	mov	r2, r6
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fd15 	bl	800bda8 <__pow5mult>
 800b37e:	ee18 2a10 	vmov	r2, s16
 800b382:	4601      	mov	r1, r0
 800b384:	4607      	mov	r7, r0
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fc64 	bl	800bc54 <__multiply>
 800b38c:	ee18 1a10 	vmov	r1, s16
 800b390:	4680      	mov	r8, r0
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fb90 	bl	800bab8 <_Bfree>
 800b398:	ee08 8a10 	vmov	s16, r8
 800b39c:	9b07      	ldr	r3, [sp, #28]
 800b39e:	1b9a      	subs	r2, r3, r6
 800b3a0:	d006      	beq.n	800b3b0 <_dtoa_r+0x7a0>
 800b3a2:	ee18 1a10 	vmov	r1, s16
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fcfe 	bl	800bda8 <__pow5mult>
 800b3ac:	ee08 0a10 	vmov	s16, r0
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 fc38 	bl	800bc28 <__i2b>
 800b3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	4606      	mov	r6, r0
 800b3be:	f340 8088 	ble.w	800b4d2 <_dtoa_r+0x8c2>
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fcee 	bl	800bda8 <__pow5mult>
 800b3cc:	9b06      	ldr	r3, [sp, #24]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	f340 8081 	ble.w	800b4d8 <_dtoa_r+0x8c8>
 800b3d6:	f04f 0800 	mov.w	r8, #0
 800b3da:	6933      	ldr	r3, [r6, #16]
 800b3dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3e0:	6918      	ldr	r0, [r3, #16]
 800b3e2:	f000 fbd1 	bl	800bb88 <__hi0bits>
 800b3e6:	f1c0 0020 	rsb	r0, r0, #32
 800b3ea:	9b05      	ldr	r3, [sp, #20]
 800b3ec:	4418      	add	r0, r3
 800b3ee:	f010 001f 	ands.w	r0, r0, #31
 800b3f2:	f000 8092 	beq.w	800b51a <_dtoa_r+0x90a>
 800b3f6:	f1c0 0320 	rsb	r3, r0, #32
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	f340 808a 	ble.w	800b514 <_dtoa_r+0x904>
 800b400:	f1c0 001c 	rsb	r0, r0, #28
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	4403      	add	r3, r0
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	4403      	add	r3, r0
 800b40e:	4405      	add	r5, r0
 800b410:	9305      	str	r3, [sp, #20]
 800b412:	9b04      	ldr	r3, [sp, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	dd07      	ble.n	800b428 <_dtoa_r+0x818>
 800b418:	ee18 1a10 	vmov	r1, s16
 800b41c:	461a      	mov	r2, r3
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 fd1c 	bl	800be5c <__lshift>
 800b424:	ee08 0a10 	vmov	s16, r0
 800b428:	9b05      	ldr	r3, [sp, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	dd05      	ble.n	800b43a <_dtoa_r+0x82a>
 800b42e:	4631      	mov	r1, r6
 800b430:	461a      	mov	r2, r3
 800b432:	4620      	mov	r0, r4
 800b434:	f000 fd12 	bl	800be5c <__lshift>
 800b438:	4606      	mov	r6, r0
 800b43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d06e      	beq.n	800b51e <_dtoa_r+0x90e>
 800b440:	ee18 0a10 	vmov	r0, s16
 800b444:	4631      	mov	r1, r6
 800b446:	f000 fd79 	bl	800bf3c <__mcmp>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	da67      	bge.n	800b51e <_dtoa_r+0x90e>
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	3b01      	subs	r3, #1
 800b452:	ee18 1a10 	vmov	r1, s16
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	220a      	movs	r2, #10
 800b45a:	2300      	movs	r3, #0
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fb4d 	bl	800bafc <__multadd>
 800b462:	9b08      	ldr	r3, [sp, #32]
 800b464:	ee08 0a10 	vmov	s16, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 81b1 	beq.w	800b7d0 <_dtoa_r+0xbc0>
 800b46e:	2300      	movs	r3, #0
 800b470:	4639      	mov	r1, r7
 800b472:	220a      	movs	r2, #10
 800b474:	4620      	mov	r0, r4
 800b476:	f000 fb41 	bl	800bafc <__multadd>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	4607      	mov	r7, r0
 800b480:	f300 808e 	bgt.w	800b5a0 <_dtoa_r+0x990>
 800b484:	9b06      	ldr	r3, [sp, #24]
 800b486:	2b02      	cmp	r3, #2
 800b488:	dc51      	bgt.n	800b52e <_dtoa_r+0x91e>
 800b48a:	e089      	b.n	800b5a0 <_dtoa_r+0x990>
 800b48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b492:	e74b      	b.n	800b32c <_dtoa_r+0x71c>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	1e5e      	subs	r6, r3, #1
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	42b3      	cmp	r3, r6
 800b49c:	bfbf      	itttt	lt
 800b49e:	9b07      	ldrlt	r3, [sp, #28]
 800b4a0:	9607      	strlt	r6, [sp, #28]
 800b4a2:	1af2      	sublt	r2, r6, r3
 800b4a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4a6:	bfb6      	itet	lt
 800b4a8:	189b      	addlt	r3, r3, r2
 800b4aa:	1b9e      	subge	r6, r3, r6
 800b4ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	bfb8      	it	lt
 800b4b2:	2600      	movlt	r6, #0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bfb7      	itett	lt
 800b4b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b4bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b4c0:	1a9d      	sublt	r5, r3, r2
 800b4c2:	2300      	movlt	r3, #0
 800b4c4:	e734      	b.n	800b330 <_dtoa_r+0x720>
 800b4c6:	9e07      	ldr	r6, [sp, #28]
 800b4c8:	9d04      	ldr	r5, [sp, #16]
 800b4ca:	9f08      	ldr	r7, [sp, #32]
 800b4cc:	e73b      	b.n	800b346 <_dtoa_r+0x736>
 800b4ce:	9a07      	ldr	r2, [sp, #28]
 800b4d0:	e767      	b.n	800b3a2 <_dtoa_r+0x792>
 800b4d2:	9b06      	ldr	r3, [sp, #24]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	dc18      	bgt.n	800b50a <_dtoa_r+0x8fa>
 800b4d8:	f1ba 0f00 	cmp.w	sl, #0
 800b4dc:	d115      	bne.n	800b50a <_dtoa_r+0x8fa>
 800b4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4e2:	b993      	cbnz	r3, 800b50a <_dtoa_r+0x8fa>
 800b4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4e8:	0d1b      	lsrs	r3, r3, #20
 800b4ea:	051b      	lsls	r3, r3, #20
 800b4ec:	b183      	cbz	r3, 800b510 <_dtoa_r+0x900>
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	9b05      	ldr	r3, [sp, #20]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	f04f 0801 	mov.w	r8, #1
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b500:	2b00      	cmp	r3, #0
 800b502:	f47f af6a 	bne.w	800b3da <_dtoa_r+0x7ca>
 800b506:	2001      	movs	r0, #1
 800b508:	e76f      	b.n	800b3ea <_dtoa_r+0x7da>
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	e7f6      	b.n	800b4fe <_dtoa_r+0x8ee>
 800b510:	4698      	mov	r8, r3
 800b512:	e7f4      	b.n	800b4fe <_dtoa_r+0x8ee>
 800b514:	f43f af7d 	beq.w	800b412 <_dtoa_r+0x802>
 800b518:	4618      	mov	r0, r3
 800b51a:	301c      	adds	r0, #28
 800b51c:	e772      	b.n	800b404 <_dtoa_r+0x7f4>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	dc37      	bgt.n	800b594 <_dtoa_r+0x984>
 800b524:	9b06      	ldr	r3, [sp, #24]
 800b526:	2b02      	cmp	r3, #2
 800b528:	dd34      	ble.n	800b594 <_dtoa_r+0x984>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	9302      	str	r3, [sp, #8]
 800b52e:	9b02      	ldr	r3, [sp, #8]
 800b530:	b96b      	cbnz	r3, 800b54e <_dtoa_r+0x93e>
 800b532:	4631      	mov	r1, r6
 800b534:	2205      	movs	r2, #5
 800b536:	4620      	mov	r0, r4
 800b538:	f000 fae0 	bl	800bafc <__multadd>
 800b53c:	4601      	mov	r1, r0
 800b53e:	4606      	mov	r6, r0
 800b540:	ee18 0a10 	vmov	r0, s16
 800b544:	f000 fcfa 	bl	800bf3c <__mcmp>
 800b548:	2800      	cmp	r0, #0
 800b54a:	f73f adbb 	bgt.w	800b0c4 <_dtoa_r+0x4b4>
 800b54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b550:	9d01      	ldr	r5, [sp, #4]
 800b552:	43db      	mvns	r3, r3
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	f04f 0800 	mov.w	r8, #0
 800b55a:	4631      	mov	r1, r6
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 faab 	bl	800bab8 <_Bfree>
 800b562:	2f00      	cmp	r7, #0
 800b564:	f43f aea4 	beq.w	800b2b0 <_dtoa_r+0x6a0>
 800b568:	f1b8 0f00 	cmp.w	r8, #0
 800b56c:	d005      	beq.n	800b57a <_dtoa_r+0x96a>
 800b56e:	45b8      	cmp	r8, r7
 800b570:	d003      	beq.n	800b57a <_dtoa_r+0x96a>
 800b572:	4641      	mov	r1, r8
 800b574:	4620      	mov	r0, r4
 800b576:	f000 fa9f 	bl	800bab8 <_Bfree>
 800b57a:	4639      	mov	r1, r7
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fa9b 	bl	800bab8 <_Bfree>
 800b582:	e695      	b.n	800b2b0 <_dtoa_r+0x6a0>
 800b584:	2600      	movs	r6, #0
 800b586:	4637      	mov	r7, r6
 800b588:	e7e1      	b.n	800b54e <_dtoa_r+0x93e>
 800b58a:	9700      	str	r7, [sp, #0]
 800b58c:	4637      	mov	r7, r6
 800b58e:	e599      	b.n	800b0c4 <_dtoa_r+0x4b4>
 800b590:	40240000 	.word	0x40240000
 800b594:	9b08      	ldr	r3, [sp, #32]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 80ca 	beq.w	800b730 <_dtoa_r+0xb20>
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	dd05      	ble.n	800b5b0 <_dtoa_r+0x9a0>
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fc57 	bl	800be5c <__lshift>
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	f1b8 0f00 	cmp.w	r8, #0
 800b5b4:	d05b      	beq.n	800b66e <_dtoa_r+0xa5e>
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fa3d 	bl	800ba38 <_Balloc>
 800b5be:	4605      	mov	r5, r0
 800b5c0:	b928      	cbnz	r0, 800b5ce <_dtoa_r+0x9be>
 800b5c2:	4b87      	ldr	r3, [pc, #540]	; (800b7e0 <_dtoa_r+0xbd0>)
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b5ca:	f7ff bb3b 	b.w	800ac44 <_dtoa_r+0x34>
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	3202      	adds	r2, #2
 800b5d2:	0092      	lsls	r2, r2, #2
 800b5d4:	f107 010c 	add.w	r1, r7, #12
 800b5d8:	300c      	adds	r0, #12
 800b5da:	f000 fa1f 	bl	800ba1c <memcpy>
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fc3a 	bl	800be5c <__lshift>
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	f103 0901 	add.w	r9, r3, #1
 800b5ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	9305      	str	r3, [sp, #20]
 800b5f6:	f00a 0301 	and.w	r3, sl, #1
 800b5fa:	46b8      	mov	r8, r7
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	4607      	mov	r7, r0
 800b600:	4631      	mov	r1, r6
 800b602:	ee18 0a10 	vmov	r0, s16
 800b606:	f7ff fa75 	bl	800aaf4 <quorem>
 800b60a:	4641      	mov	r1, r8
 800b60c:	9002      	str	r0, [sp, #8]
 800b60e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b612:	ee18 0a10 	vmov	r0, s16
 800b616:	f000 fc91 	bl	800bf3c <__mcmp>
 800b61a:	463a      	mov	r2, r7
 800b61c:	9003      	str	r0, [sp, #12]
 800b61e:	4631      	mov	r1, r6
 800b620:	4620      	mov	r0, r4
 800b622:	f000 fca7 	bl	800bf74 <__mdiff>
 800b626:	68c2      	ldr	r2, [r0, #12]
 800b628:	f109 3bff 	add.w	fp, r9, #4294967295
 800b62c:	4605      	mov	r5, r0
 800b62e:	bb02      	cbnz	r2, 800b672 <_dtoa_r+0xa62>
 800b630:	4601      	mov	r1, r0
 800b632:	ee18 0a10 	vmov	r0, s16
 800b636:	f000 fc81 	bl	800bf3c <__mcmp>
 800b63a:	4602      	mov	r2, r0
 800b63c:	4629      	mov	r1, r5
 800b63e:	4620      	mov	r0, r4
 800b640:	9207      	str	r2, [sp, #28]
 800b642:	f000 fa39 	bl	800bab8 <_Bfree>
 800b646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b64a:	ea43 0102 	orr.w	r1, r3, r2
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	430b      	orrs	r3, r1
 800b652:	464d      	mov	r5, r9
 800b654:	d10f      	bne.n	800b676 <_dtoa_r+0xa66>
 800b656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b65a:	d02a      	beq.n	800b6b2 <_dtoa_r+0xaa2>
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dd02      	ble.n	800b668 <_dtoa_r+0xa58>
 800b662:	9b02      	ldr	r3, [sp, #8]
 800b664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b668:	f88b a000 	strb.w	sl, [fp]
 800b66c:	e775      	b.n	800b55a <_dtoa_r+0x94a>
 800b66e:	4638      	mov	r0, r7
 800b670:	e7ba      	b.n	800b5e8 <_dtoa_r+0x9d8>
 800b672:	2201      	movs	r2, #1
 800b674:	e7e2      	b.n	800b63c <_dtoa_r+0xa2c>
 800b676:	9b03      	ldr	r3, [sp, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db04      	blt.n	800b686 <_dtoa_r+0xa76>
 800b67c:	9906      	ldr	r1, [sp, #24]
 800b67e:	430b      	orrs	r3, r1
 800b680:	9904      	ldr	r1, [sp, #16]
 800b682:	430b      	orrs	r3, r1
 800b684:	d122      	bne.n	800b6cc <_dtoa_r+0xabc>
 800b686:	2a00      	cmp	r2, #0
 800b688:	ddee      	ble.n	800b668 <_dtoa_r+0xa58>
 800b68a:	ee18 1a10 	vmov	r1, s16
 800b68e:	2201      	movs	r2, #1
 800b690:	4620      	mov	r0, r4
 800b692:	f000 fbe3 	bl	800be5c <__lshift>
 800b696:	4631      	mov	r1, r6
 800b698:	ee08 0a10 	vmov	s16, r0
 800b69c:	f000 fc4e 	bl	800bf3c <__mcmp>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	dc03      	bgt.n	800b6ac <_dtoa_r+0xa9c>
 800b6a4:	d1e0      	bne.n	800b668 <_dtoa_r+0xa58>
 800b6a6:	f01a 0f01 	tst.w	sl, #1
 800b6aa:	d0dd      	beq.n	800b668 <_dtoa_r+0xa58>
 800b6ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6b0:	d1d7      	bne.n	800b662 <_dtoa_r+0xa52>
 800b6b2:	2339      	movs	r3, #57	; 0x39
 800b6b4:	f88b 3000 	strb.w	r3, [fp]
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6c2:	2a39      	cmp	r2, #57	; 0x39
 800b6c4:	d071      	beq.n	800b7aa <_dtoa_r+0xb9a>
 800b6c6:	3201      	adds	r2, #1
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	e746      	b.n	800b55a <_dtoa_r+0x94a>
 800b6cc:	2a00      	cmp	r2, #0
 800b6ce:	dd07      	ble.n	800b6e0 <_dtoa_r+0xad0>
 800b6d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6d4:	d0ed      	beq.n	800b6b2 <_dtoa_r+0xaa2>
 800b6d6:	f10a 0301 	add.w	r3, sl, #1
 800b6da:	f88b 3000 	strb.w	r3, [fp]
 800b6de:	e73c      	b.n	800b55a <_dtoa_r+0x94a>
 800b6e0:	9b05      	ldr	r3, [sp, #20]
 800b6e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6e6:	4599      	cmp	r9, r3
 800b6e8:	d047      	beq.n	800b77a <_dtoa_r+0xb6a>
 800b6ea:	ee18 1a10 	vmov	r1, s16
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	220a      	movs	r2, #10
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 fa02 	bl	800bafc <__multadd>
 800b6f8:	45b8      	cmp	r8, r7
 800b6fa:	ee08 0a10 	vmov	s16, r0
 800b6fe:	f04f 0300 	mov.w	r3, #0
 800b702:	f04f 020a 	mov.w	r2, #10
 800b706:	4641      	mov	r1, r8
 800b708:	4620      	mov	r0, r4
 800b70a:	d106      	bne.n	800b71a <_dtoa_r+0xb0a>
 800b70c:	f000 f9f6 	bl	800bafc <__multadd>
 800b710:	4680      	mov	r8, r0
 800b712:	4607      	mov	r7, r0
 800b714:	f109 0901 	add.w	r9, r9, #1
 800b718:	e772      	b.n	800b600 <_dtoa_r+0x9f0>
 800b71a:	f000 f9ef 	bl	800bafc <__multadd>
 800b71e:	4639      	mov	r1, r7
 800b720:	4680      	mov	r8, r0
 800b722:	2300      	movs	r3, #0
 800b724:	220a      	movs	r2, #10
 800b726:	4620      	mov	r0, r4
 800b728:	f000 f9e8 	bl	800bafc <__multadd>
 800b72c:	4607      	mov	r7, r0
 800b72e:	e7f1      	b.n	800b714 <_dtoa_r+0xb04>
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	9302      	str	r3, [sp, #8]
 800b734:	9d01      	ldr	r5, [sp, #4]
 800b736:	ee18 0a10 	vmov	r0, s16
 800b73a:	4631      	mov	r1, r6
 800b73c:	f7ff f9da 	bl	800aaf4 <quorem>
 800b740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	f805 ab01 	strb.w	sl, [r5], #1
 800b74a:	1aea      	subs	r2, r5, r3
 800b74c:	9b02      	ldr	r3, [sp, #8]
 800b74e:	4293      	cmp	r3, r2
 800b750:	dd09      	ble.n	800b766 <_dtoa_r+0xb56>
 800b752:	ee18 1a10 	vmov	r1, s16
 800b756:	2300      	movs	r3, #0
 800b758:	220a      	movs	r2, #10
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 f9ce 	bl	800bafc <__multadd>
 800b760:	ee08 0a10 	vmov	s16, r0
 800b764:	e7e7      	b.n	800b736 <_dtoa_r+0xb26>
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	bfc8      	it	gt
 800b76c:	461d      	movgt	r5, r3
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	bfd8      	it	le
 800b772:	2501      	movle	r5, #1
 800b774:	441d      	add	r5, r3
 800b776:	f04f 0800 	mov.w	r8, #0
 800b77a:	ee18 1a10 	vmov	r1, s16
 800b77e:	2201      	movs	r2, #1
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fb6b 	bl	800be5c <__lshift>
 800b786:	4631      	mov	r1, r6
 800b788:	ee08 0a10 	vmov	s16, r0
 800b78c:	f000 fbd6 	bl	800bf3c <__mcmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	dc91      	bgt.n	800b6b8 <_dtoa_r+0xaa8>
 800b794:	d102      	bne.n	800b79c <_dtoa_r+0xb8c>
 800b796:	f01a 0f01 	tst.w	sl, #1
 800b79a:	d18d      	bne.n	800b6b8 <_dtoa_r+0xaa8>
 800b79c:	462b      	mov	r3, r5
 800b79e:	461d      	mov	r5, r3
 800b7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7a4:	2a30      	cmp	r2, #48	; 0x30
 800b7a6:	d0fa      	beq.n	800b79e <_dtoa_r+0xb8e>
 800b7a8:	e6d7      	b.n	800b55a <_dtoa_r+0x94a>
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d184      	bne.n	800b6ba <_dtoa_r+0xaaa>
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	2331      	movs	r3, #49	; 0x31
 800b7b8:	7013      	strb	r3, [r2, #0]
 800b7ba:	e6ce      	b.n	800b55a <_dtoa_r+0x94a>
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <_dtoa_r+0xbd4>)
 800b7be:	f7ff ba95 	b.w	800acec <_dtoa_r+0xdc>
 800b7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f47f aa6e 	bne.w	800aca6 <_dtoa_r+0x96>
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <_dtoa_r+0xbd8>)
 800b7cc:	f7ff ba8e 	b.w	800acec <_dtoa_r+0xdc>
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dcae      	bgt.n	800b734 <_dtoa_r+0xb24>
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	f73f aea8 	bgt.w	800b52e <_dtoa_r+0x91e>
 800b7de:	e7a9      	b.n	800b734 <_dtoa_r+0xb24>
 800b7e0:	0800d2bd 	.word	0x0800d2bd
 800b7e4:	0800d080 	.word	0x0800d080
 800b7e8:	0800d255 	.word	0x0800d255

0800b7ec <std>:
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7fa:	6083      	str	r3, [r0, #8]
 800b7fc:	8181      	strh	r1, [r0, #12]
 800b7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800b800:	81c2      	strh	r2, [r0, #14]
 800b802:	6183      	str	r3, [r0, #24]
 800b804:	4619      	mov	r1, r3
 800b806:	2208      	movs	r2, #8
 800b808:	305c      	adds	r0, #92	; 0x5c
 800b80a:	f7fe fbc3 	bl	8009f94 <memset>
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <std+0x38>)
 800b810:	6263      	str	r3, [r4, #36]	; 0x24
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <std+0x3c>)
 800b814:	62a3      	str	r3, [r4, #40]	; 0x28
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x40>)
 800b818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <std+0x44>)
 800b81c:	6224      	str	r4, [r4, #32]
 800b81e:	6323      	str	r3, [r4, #48]	; 0x30
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	0800c8b9 	.word	0x0800c8b9
 800b828:	0800c8db 	.word	0x0800c8db
 800b82c:	0800c913 	.word	0x0800c913
 800b830:	0800c937 	.word	0x0800c937

0800b834 <_cleanup_r>:
 800b834:	4901      	ldr	r1, [pc, #4]	; (800b83c <_cleanup_r+0x8>)
 800b836:	f000 b8c1 	b.w	800b9bc <_fwalk_reent>
 800b83a:	bf00      	nop
 800b83c:	0800cc21 	.word	0x0800cc21

0800b840 <__sfmoreglue>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	2268      	movs	r2, #104	; 0x68
 800b844:	1e4d      	subs	r5, r1, #1
 800b846:	4355      	muls	r5, r2
 800b848:	460e      	mov	r6, r1
 800b84a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b84e:	f000 fcf9 	bl	800c244 <_malloc_r>
 800b852:	4604      	mov	r4, r0
 800b854:	b140      	cbz	r0, 800b868 <__sfmoreglue+0x28>
 800b856:	2100      	movs	r1, #0
 800b858:	e9c0 1600 	strd	r1, r6, [r0]
 800b85c:	300c      	adds	r0, #12
 800b85e:	60a0      	str	r0, [r4, #8]
 800b860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b864:	f7fe fb96 	bl	8009f94 <memset>
 800b868:	4620      	mov	r0, r4
 800b86a:	bd70      	pop	{r4, r5, r6, pc}

0800b86c <__sfp_lock_acquire>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__sfp_lock_acquire+0x8>)
 800b86e:	f000 b8ca 	b.w	800ba06 <__retarget_lock_acquire_recursive>
 800b872:	bf00      	nop
 800b874:	2000074d 	.word	0x2000074d

0800b878 <__sfp_lock_release>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__sfp_lock_release+0x8>)
 800b87a:	f000 b8c5 	b.w	800ba08 <__retarget_lock_release_recursive>
 800b87e:	bf00      	nop
 800b880:	2000074d 	.word	0x2000074d

0800b884 <__sinit_lock_acquire>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__sinit_lock_acquire+0x8>)
 800b886:	f000 b8be 	b.w	800ba06 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	2000074e 	.word	0x2000074e

0800b890 <__sinit_lock_release>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__sinit_lock_release+0x8>)
 800b892:	f000 b8b9 	b.w	800ba08 <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	2000074e 	.word	0x2000074e

0800b89c <__sinit>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f7ff fff0 	bl	800b884 <__sinit_lock_acquire>
 800b8a4:	69a3      	ldr	r3, [r4, #24]
 800b8a6:	b11b      	cbz	r3, 800b8b0 <__sinit+0x14>
 800b8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ac:	f7ff bff0 	b.w	800b890 <__sinit_lock_release>
 800b8b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8b4:	6523      	str	r3, [r4, #80]	; 0x50
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <__sinit+0x68>)
 800b8b8:	4a13      	ldr	r2, [pc, #76]	; (800b908 <__sinit+0x6c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	bf04      	itt	eq
 800b8c2:	2301      	moveq	r3, #1
 800b8c4:	61a3      	streq	r3, [r4, #24]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f820 	bl	800b90c <__sfp>
 800b8cc:	6060      	str	r0, [r4, #4]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 f81c 	bl	800b90c <__sfp>
 800b8d4:	60a0      	str	r0, [r4, #8]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f818 	bl	800b90c <__sfp>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	60e0      	str	r0, [r4, #12]
 800b8e0:	2104      	movs	r1, #4
 800b8e2:	6860      	ldr	r0, [r4, #4]
 800b8e4:	f7ff ff82 	bl	800b7ec <std>
 800b8e8:	68a0      	ldr	r0, [r4, #8]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	2109      	movs	r1, #9
 800b8ee:	f7ff ff7d 	bl	800b7ec <std>
 800b8f2:	68e0      	ldr	r0, [r4, #12]
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	2112      	movs	r1, #18
 800b8f8:	f7ff ff78 	bl	800b7ec <std>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	61a3      	str	r3, [r4, #24]
 800b900:	e7d2      	b.n	800b8a8 <__sinit+0xc>
 800b902:	bf00      	nop
 800b904:	0800d06c 	.word	0x0800d06c
 800b908:	0800b835 	.word	0x0800b835

0800b90c <__sfp>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	4607      	mov	r7, r0
 800b910:	f7ff ffac 	bl	800b86c <__sfp_lock_acquire>
 800b914:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <__sfp+0x84>)
 800b916:	681e      	ldr	r6, [r3, #0]
 800b918:	69b3      	ldr	r3, [r6, #24]
 800b91a:	b913      	cbnz	r3, 800b922 <__sfp+0x16>
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff ffbd 	bl	800b89c <__sinit>
 800b922:	3648      	adds	r6, #72	; 0x48
 800b924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b928:	3b01      	subs	r3, #1
 800b92a:	d503      	bpl.n	800b934 <__sfp+0x28>
 800b92c:	6833      	ldr	r3, [r6, #0]
 800b92e:	b30b      	cbz	r3, 800b974 <__sfp+0x68>
 800b930:	6836      	ldr	r6, [r6, #0]
 800b932:	e7f7      	b.n	800b924 <__sfp+0x18>
 800b934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b938:	b9d5      	cbnz	r5, 800b970 <__sfp+0x64>
 800b93a:	4b16      	ldr	r3, [pc, #88]	; (800b994 <__sfp+0x88>)
 800b93c:	60e3      	str	r3, [r4, #12]
 800b93e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b942:	6665      	str	r5, [r4, #100]	; 0x64
 800b944:	f000 f85e 	bl	800ba04 <__retarget_lock_init_recursive>
 800b948:	f7ff ff96 	bl	800b878 <__sfp_lock_release>
 800b94c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b954:	6025      	str	r5, [r4, #0]
 800b956:	61a5      	str	r5, [r4, #24]
 800b958:	2208      	movs	r2, #8
 800b95a:	4629      	mov	r1, r5
 800b95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b960:	f7fe fb18 	bl	8009f94 <memset>
 800b964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b96c:	4620      	mov	r0, r4
 800b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b970:	3468      	adds	r4, #104	; 0x68
 800b972:	e7d9      	b.n	800b928 <__sfp+0x1c>
 800b974:	2104      	movs	r1, #4
 800b976:	4638      	mov	r0, r7
 800b978:	f7ff ff62 	bl	800b840 <__sfmoreglue>
 800b97c:	4604      	mov	r4, r0
 800b97e:	6030      	str	r0, [r6, #0]
 800b980:	2800      	cmp	r0, #0
 800b982:	d1d5      	bne.n	800b930 <__sfp+0x24>
 800b984:	f7ff ff78 	bl	800b878 <__sfp_lock_release>
 800b988:	230c      	movs	r3, #12
 800b98a:	603b      	str	r3, [r7, #0]
 800b98c:	e7ee      	b.n	800b96c <__sfp+0x60>
 800b98e:	bf00      	nop
 800b990:	0800d06c 	.word	0x0800d06c
 800b994:	ffff0001 	.word	0xffff0001

0800b998 <fiprintf>:
 800b998:	b40e      	push	{r1, r2, r3}
 800b99a:	b503      	push	{r0, r1, lr}
 800b99c:	4601      	mov	r1, r0
 800b99e:	ab03      	add	r3, sp, #12
 800b9a0:	4805      	ldr	r0, [pc, #20]	; (800b9b8 <fiprintf+0x20>)
 800b9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a6:	6800      	ldr	r0, [r0, #0]
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	f000 fe45 	bl	800c638 <_vfiprintf_r>
 800b9ae:	b002      	add	sp, #8
 800b9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b4:	b003      	add	sp, #12
 800b9b6:	4770      	bx	lr
 800b9b8:	200001cc 	.word	0x200001cc

0800b9bc <_fwalk_reent>:
 800b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	4688      	mov	r8, r1
 800b9c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9c8:	2700      	movs	r7, #0
 800b9ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b9d2:	d505      	bpl.n	800b9e0 <_fwalk_reent+0x24>
 800b9d4:	6824      	ldr	r4, [r4, #0]
 800b9d6:	2c00      	cmp	r4, #0
 800b9d8:	d1f7      	bne.n	800b9ca <_fwalk_reent+0xe>
 800b9da:	4638      	mov	r0, r7
 800b9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e0:	89ab      	ldrh	r3, [r5, #12]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d907      	bls.n	800b9f6 <_fwalk_reent+0x3a>
 800b9e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	d003      	beq.n	800b9f6 <_fwalk_reent+0x3a>
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	47c0      	blx	r8
 800b9f4:	4307      	orrs	r7, r0
 800b9f6:	3568      	adds	r5, #104	; 0x68
 800b9f8:	e7e9      	b.n	800b9ce <_fwalk_reent+0x12>
	...

0800b9fc <_localeconv_r>:
 800b9fc:	4800      	ldr	r0, [pc, #0]	; (800ba00 <_localeconv_r+0x4>)
 800b9fe:	4770      	bx	lr
 800ba00:	20000320 	.word	0x20000320

0800ba04 <__retarget_lock_init_recursive>:
 800ba04:	4770      	bx	lr

0800ba06 <__retarget_lock_acquire_recursive>:
 800ba06:	4770      	bx	lr

0800ba08 <__retarget_lock_release_recursive>:
 800ba08:	4770      	bx	lr
	...

0800ba0c <malloc>:
 800ba0c:	4b02      	ldr	r3, [pc, #8]	; (800ba18 <malloc+0xc>)
 800ba0e:	4601      	mov	r1, r0
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	f000 bc17 	b.w	800c244 <_malloc_r>
 800ba16:	bf00      	nop
 800ba18:	200001cc 	.word	0x200001cc

0800ba1c <memcpy>:
 800ba1c:	440a      	add	r2, r1
 800ba1e:	4291      	cmp	r1, r2
 800ba20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba24:	d100      	bne.n	800ba28 <memcpy+0xc>
 800ba26:	4770      	bx	lr
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba32:	4291      	cmp	r1, r2
 800ba34:	d1f9      	bne.n	800ba2a <memcpy+0xe>
 800ba36:	bd10      	pop	{r4, pc}

0800ba38 <_Balloc>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	b976      	cbnz	r6, 800ba60 <_Balloc+0x28>
 800ba42:	2010      	movs	r0, #16
 800ba44:	f7ff ffe2 	bl	800ba0c <malloc>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba4c:	b920      	cbnz	r0, 800ba58 <_Balloc+0x20>
 800ba4e:	4b18      	ldr	r3, [pc, #96]	; (800bab0 <_Balloc+0x78>)
 800ba50:	4818      	ldr	r0, [pc, #96]	; (800bab4 <_Balloc+0x7c>)
 800ba52:	2166      	movs	r1, #102	; 0x66
 800ba54:	f7ff f830 	bl	800aab8 <__assert_func>
 800ba58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba5c:	6006      	str	r6, [r0, #0]
 800ba5e:	60c6      	str	r6, [r0, #12]
 800ba60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba62:	68f3      	ldr	r3, [r6, #12]
 800ba64:	b183      	cbz	r3, 800ba88 <_Balloc+0x50>
 800ba66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba6e:	b9b8      	cbnz	r0, 800baa0 <_Balloc+0x68>
 800ba70:	2101      	movs	r1, #1
 800ba72:	fa01 f605 	lsl.w	r6, r1, r5
 800ba76:	1d72      	adds	r2, r6, #5
 800ba78:	0092      	lsls	r2, r2, #2
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fb60 	bl	800c140 <_calloc_r>
 800ba80:	b160      	cbz	r0, 800ba9c <_Balloc+0x64>
 800ba82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba86:	e00e      	b.n	800baa6 <_Balloc+0x6e>
 800ba88:	2221      	movs	r2, #33	; 0x21
 800ba8a:	2104      	movs	r1, #4
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fb57 	bl	800c140 <_calloc_r>
 800ba92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba94:	60f0      	str	r0, [r6, #12]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e4      	bne.n	800ba66 <_Balloc+0x2e>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	6802      	ldr	r2, [r0, #0]
 800baa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baa6:	2300      	movs	r3, #0
 800baa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baac:	e7f7      	b.n	800ba9e <_Balloc+0x66>
 800baae:	bf00      	nop
 800bab0:	0800d0a4 	.word	0x0800d0a4
 800bab4:	0800d330 	.word	0x0800d330

0800bab8 <_Bfree>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800babc:	4605      	mov	r5, r0
 800babe:	460c      	mov	r4, r1
 800bac0:	b976      	cbnz	r6, 800bae0 <_Bfree+0x28>
 800bac2:	2010      	movs	r0, #16
 800bac4:	f7ff ffa2 	bl	800ba0c <malloc>
 800bac8:	4602      	mov	r2, r0
 800baca:	6268      	str	r0, [r5, #36]	; 0x24
 800bacc:	b920      	cbnz	r0, 800bad8 <_Bfree+0x20>
 800bace:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <_Bfree+0x3c>)
 800bad0:	4809      	ldr	r0, [pc, #36]	; (800baf8 <_Bfree+0x40>)
 800bad2:	218a      	movs	r1, #138	; 0x8a
 800bad4:	f7fe fff0 	bl	800aab8 <__assert_func>
 800bad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800badc:	6006      	str	r6, [r0, #0]
 800bade:	60c6      	str	r6, [r0, #12]
 800bae0:	b13c      	cbz	r4, 800baf2 <_Bfree+0x3a>
 800bae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bae4:	6862      	ldr	r2, [r4, #4]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baec:	6021      	str	r1, [r4, #0]
 800baee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	0800d0a4 	.word	0x0800d0a4
 800baf8:	0800d330 	.word	0x0800d330

0800bafc <__multadd>:
 800bafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb00:	690d      	ldr	r5, [r1, #16]
 800bb02:	4607      	mov	r7, r0
 800bb04:	460c      	mov	r4, r1
 800bb06:	461e      	mov	r6, r3
 800bb08:	f101 0c14 	add.w	ip, r1, #20
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb12:	b299      	uxth	r1, r3
 800bb14:	fb02 6101 	mla	r1, r2, r1, r6
 800bb18:	0c1e      	lsrs	r6, r3, #16
 800bb1a:	0c0b      	lsrs	r3, r1, #16
 800bb1c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb20:	b289      	uxth	r1, r1
 800bb22:	3001      	adds	r0, #1
 800bb24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb28:	4285      	cmp	r5, r0
 800bb2a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb32:	dcec      	bgt.n	800bb0e <__multadd+0x12>
 800bb34:	b30e      	cbz	r6, 800bb7a <__multadd+0x7e>
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	dc19      	bgt.n	800bb70 <__multadd+0x74>
 800bb3c:	6861      	ldr	r1, [r4, #4]
 800bb3e:	4638      	mov	r0, r7
 800bb40:	3101      	adds	r1, #1
 800bb42:	f7ff ff79 	bl	800ba38 <_Balloc>
 800bb46:	4680      	mov	r8, r0
 800bb48:	b928      	cbnz	r0, 800bb56 <__multadd+0x5a>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <__multadd+0x84>)
 800bb4e:	480d      	ldr	r0, [pc, #52]	; (800bb84 <__multadd+0x88>)
 800bb50:	21b5      	movs	r1, #181	; 0xb5
 800bb52:	f7fe ffb1 	bl	800aab8 <__assert_func>
 800bb56:	6922      	ldr	r2, [r4, #16]
 800bb58:	3202      	adds	r2, #2
 800bb5a:	f104 010c 	add.w	r1, r4, #12
 800bb5e:	0092      	lsls	r2, r2, #2
 800bb60:	300c      	adds	r0, #12
 800bb62:	f7ff ff5b 	bl	800ba1c <memcpy>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f7ff ffa5 	bl	800bab8 <_Bfree>
 800bb6e:	4644      	mov	r4, r8
 800bb70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb74:	3501      	adds	r5, #1
 800bb76:	615e      	str	r6, [r3, #20]
 800bb78:	6125      	str	r5, [r4, #16]
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb80:	0800d2bd 	.word	0x0800d2bd
 800bb84:	0800d330 	.word	0x0800d330

0800bb88 <__hi0bits>:
 800bb88:	0c03      	lsrs	r3, r0, #16
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	b9d3      	cbnz	r3, 800bbc4 <__hi0bits+0x3c>
 800bb8e:	0400      	lsls	r0, r0, #16
 800bb90:	2310      	movs	r3, #16
 800bb92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb96:	bf04      	itt	eq
 800bb98:	0200      	lsleq	r0, r0, #8
 800bb9a:	3308      	addeq	r3, #8
 800bb9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bba0:	bf04      	itt	eq
 800bba2:	0100      	lsleq	r0, r0, #4
 800bba4:	3304      	addeq	r3, #4
 800bba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbaa:	bf04      	itt	eq
 800bbac:	0080      	lsleq	r0, r0, #2
 800bbae:	3302      	addeq	r3, #2
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	db05      	blt.n	800bbc0 <__hi0bits+0x38>
 800bbb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbb8:	f103 0301 	add.w	r3, r3, #1
 800bbbc:	bf08      	it	eq
 800bbbe:	2320      	moveq	r3, #32
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	4770      	bx	lr
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e7e4      	b.n	800bb92 <__hi0bits+0xa>

0800bbc8 <__lo0bits>:
 800bbc8:	6803      	ldr	r3, [r0, #0]
 800bbca:	f013 0207 	ands.w	r2, r3, #7
 800bbce:	4601      	mov	r1, r0
 800bbd0:	d00b      	beq.n	800bbea <__lo0bits+0x22>
 800bbd2:	07da      	lsls	r2, r3, #31
 800bbd4:	d423      	bmi.n	800bc1e <__lo0bits+0x56>
 800bbd6:	0798      	lsls	r0, r3, #30
 800bbd8:	bf49      	itett	mi
 800bbda:	085b      	lsrmi	r3, r3, #1
 800bbdc:	089b      	lsrpl	r3, r3, #2
 800bbde:	2001      	movmi	r0, #1
 800bbe0:	600b      	strmi	r3, [r1, #0]
 800bbe2:	bf5c      	itt	pl
 800bbe4:	600b      	strpl	r3, [r1, #0]
 800bbe6:	2002      	movpl	r0, #2
 800bbe8:	4770      	bx	lr
 800bbea:	b298      	uxth	r0, r3
 800bbec:	b9a8      	cbnz	r0, 800bc1a <__lo0bits+0x52>
 800bbee:	0c1b      	lsrs	r3, r3, #16
 800bbf0:	2010      	movs	r0, #16
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	b90a      	cbnz	r2, 800bbfa <__lo0bits+0x32>
 800bbf6:	3008      	adds	r0, #8
 800bbf8:	0a1b      	lsrs	r3, r3, #8
 800bbfa:	071a      	lsls	r2, r3, #28
 800bbfc:	bf04      	itt	eq
 800bbfe:	091b      	lsreq	r3, r3, #4
 800bc00:	3004      	addeq	r0, #4
 800bc02:	079a      	lsls	r2, r3, #30
 800bc04:	bf04      	itt	eq
 800bc06:	089b      	lsreq	r3, r3, #2
 800bc08:	3002      	addeq	r0, #2
 800bc0a:	07da      	lsls	r2, r3, #31
 800bc0c:	d403      	bmi.n	800bc16 <__lo0bits+0x4e>
 800bc0e:	085b      	lsrs	r3, r3, #1
 800bc10:	f100 0001 	add.w	r0, r0, #1
 800bc14:	d005      	beq.n	800bc22 <__lo0bits+0x5a>
 800bc16:	600b      	str	r3, [r1, #0]
 800bc18:	4770      	bx	lr
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	e7e9      	b.n	800bbf2 <__lo0bits+0x2a>
 800bc1e:	2000      	movs	r0, #0
 800bc20:	4770      	bx	lr
 800bc22:	2020      	movs	r0, #32
 800bc24:	4770      	bx	lr
	...

0800bc28 <__i2b>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	f7ff ff03 	bl	800ba38 <_Balloc>
 800bc32:	4602      	mov	r2, r0
 800bc34:	b928      	cbnz	r0, 800bc42 <__i2b+0x1a>
 800bc36:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <__i2b+0x24>)
 800bc38:	4805      	ldr	r0, [pc, #20]	; (800bc50 <__i2b+0x28>)
 800bc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc3e:	f7fe ff3b 	bl	800aab8 <__assert_func>
 800bc42:	2301      	movs	r3, #1
 800bc44:	6144      	str	r4, [r0, #20]
 800bc46:	6103      	str	r3, [r0, #16]
 800bc48:	bd10      	pop	{r4, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0800d2bd 	.word	0x0800d2bd
 800bc50:	0800d330 	.word	0x0800d330

0800bc54 <__multiply>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4691      	mov	r9, r2
 800bc5a:	690a      	ldr	r2, [r1, #16]
 800bc5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	bfb8      	it	lt
 800bc64:	460b      	movlt	r3, r1
 800bc66:	460c      	mov	r4, r1
 800bc68:	bfbc      	itt	lt
 800bc6a:	464c      	movlt	r4, r9
 800bc6c:	4699      	movlt	r9, r3
 800bc6e:	6927      	ldr	r7, [r4, #16]
 800bc70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	6861      	ldr	r1, [r4, #4]
 800bc78:	eb07 060a 	add.w	r6, r7, sl
 800bc7c:	42b3      	cmp	r3, r6
 800bc7e:	b085      	sub	sp, #20
 800bc80:	bfb8      	it	lt
 800bc82:	3101      	addlt	r1, #1
 800bc84:	f7ff fed8 	bl	800ba38 <_Balloc>
 800bc88:	b930      	cbnz	r0, 800bc98 <__multiply+0x44>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	4b44      	ldr	r3, [pc, #272]	; (800bda0 <__multiply+0x14c>)
 800bc8e:	4845      	ldr	r0, [pc, #276]	; (800bda4 <__multiply+0x150>)
 800bc90:	f240 115d 	movw	r1, #349	; 0x15d
 800bc94:	f7fe ff10 	bl	800aab8 <__assert_func>
 800bc98:	f100 0514 	add.w	r5, r0, #20
 800bc9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bca0:	462b      	mov	r3, r5
 800bca2:	2200      	movs	r2, #0
 800bca4:	4543      	cmp	r3, r8
 800bca6:	d321      	bcc.n	800bcec <__multiply+0x98>
 800bca8:	f104 0314 	add.w	r3, r4, #20
 800bcac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcb0:	f109 0314 	add.w	r3, r9, #20
 800bcb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcb8:	9202      	str	r2, [sp, #8]
 800bcba:	1b3a      	subs	r2, r7, r4
 800bcbc:	3a15      	subs	r2, #21
 800bcbe:	f022 0203 	bic.w	r2, r2, #3
 800bcc2:	3204      	adds	r2, #4
 800bcc4:	f104 0115 	add.w	r1, r4, #21
 800bcc8:	428f      	cmp	r7, r1
 800bcca:	bf38      	it	cc
 800bccc:	2204      	movcc	r2, #4
 800bcce:	9201      	str	r2, [sp, #4]
 800bcd0:	9a02      	ldr	r2, [sp, #8]
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d80c      	bhi.n	800bcf2 <__multiply+0x9e>
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	dd03      	ble.n	800bce4 <__multiply+0x90>
 800bcdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d05a      	beq.n	800bd9a <__multiply+0x146>
 800bce4:	6106      	str	r6, [r0, #16]
 800bce6:	b005      	add	sp, #20
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	f843 2b04 	str.w	r2, [r3], #4
 800bcf0:	e7d8      	b.n	800bca4 <__multiply+0x50>
 800bcf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcf6:	f1ba 0f00 	cmp.w	sl, #0
 800bcfa:	d024      	beq.n	800bd46 <__multiply+0xf2>
 800bcfc:	f104 0e14 	add.w	lr, r4, #20
 800bd00:	46a9      	mov	r9, r5
 800bd02:	f04f 0c00 	mov.w	ip, #0
 800bd06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd0a:	f8d9 1000 	ldr.w	r1, [r9]
 800bd0e:	fa1f fb82 	uxth.w	fp, r2
 800bd12:	b289      	uxth	r1, r1
 800bd14:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd1c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd20:	4461      	add	r1, ip
 800bd22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd26:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd2e:	b289      	uxth	r1, r1
 800bd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd34:	4577      	cmp	r7, lr
 800bd36:	f849 1b04 	str.w	r1, [r9], #4
 800bd3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd3e:	d8e2      	bhi.n	800bd06 <__multiply+0xb2>
 800bd40:	9a01      	ldr	r2, [sp, #4]
 800bd42:	f845 c002 	str.w	ip, [r5, r2]
 800bd46:	9a03      	ldr	r2, [sp, #12]
 800bd48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	f1b9 0f00 	cmp.w	r9, #0
 800bd52:	d020      	beq.n	800bd96 <__multiply+0x142>
 800bd54:	6829      	ldr	r1, [r5, #0]
 800bd56:	f104 0c14 	add.w	ip, r4, #20
 800bd5a:	46ae      	mov	lr, r5
 800bd5c:	f04f 0a00 	mov.w	sl, #0
 800bd60:	f8bc b000 	ldrh.w	fp, [ip]
 800bd64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd68:	fb09 220b 	mla	r2, r9, fp, r2
 800bd6c:	4492      	add	sl, r2
 800bd6e:	b289      	uxth	r1, r1
 800bd70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bd74:	f84e 1b04 	str.w	r1, [lr], #4
 800bd78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd7c:	f8be 1000 	ldrh.w	r1, [lr]
 800bd80:	0c12      	lsrs	r2, r2, #16
 800bd82:	fb09 1102 	mla	r1, r9, r2, r1
 800bd86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bd8a:	4567      	cmp	r7, ip
 800bd8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd90:	d8e6      	bhi.n	800bd60 <__multiply+0x10c>
 800bd92:	9a01      	ldr	r2, [sp, #4]
 800bd94:	50a9      	str	r1, [r5, r2]
 800bd96:	3504      	adds	r5, #4
 800bd98:	e79a      	b.n	800bcd0 <__multiply+0x7c>
 800bd9a:	3e01      	subs	r6, #1
 800bd9c:	e79c      	b.n	800bcd8 <__multiply+0x84>
 800bd9e:	bf00      	nop
 800bda0:	0800d2bd 	.word	0x0800d2bd
 800bda4:	0800d330 	.word	0x0800d330

0800bda8 <__pow5mult>:
 800bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdac:	4615      	mov	r5, r2
 800bdae:	f012 0203 	ands.w	r2, r2, #3
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	d007      	beq.n	800bdc8 <__pow5mult+0x20>
 800bdb8:	4c25      	ldr	r4, [pc, #148]	; (800be50 <__pow5mult+0xa8>)
 800bdba:	3a01      	subs	r2, #1
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdc2:	f7ff fe9b 	bl	800bafc <__multadd>
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	10ad      	asrs	r5, r5, #2
 800bdca:	d03d      	beq.n	800be48 <__pow5mult+0xa0>
 800bdcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdce:	b97c      	cbnz	r4, 800bdf0 <__pow5mult+0x48>
 800bdd0:	2010      	movs	r0, #16
 800bdd2:	f7ff fe1b 	bl	800ba0c <malloc>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	6270      	str	r0, [r6, #36]	; 0x24
 800bdda:	b928      	cbnz	r0, 800bde8 <__pow5mult+0x40>
 800bddc:	4b1d      	ldr	r3, [pc, #116]	; (800be54 <__pow5mult+0xac>)
 800bdde:	481e      	ldr	r0, [pc, #120]	; (800be58 <__pow5mult+0xb0>)
 800bde0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bde4:	f7fe fe68 	bl	800aab8 <__assert_func>
 800bde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdec:	6004      	str	r4, [r0, #0]
 800bdee:	60c4      	str	r4, [r0, #12]
 800bdf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdf8:	b94c      	cbnz	r4, 800be0e <__pow5mult+0x66>
 800bdfa:	f240 2171 	movw	r1, #625	; 0x271
 800bdfe:	4630      	mov	r0, r6
 800be00:	f7ff ff12 	bl	800bc28 <__i2b>
 800be04:	2300      	movs	r3, #0
 800be06:	f8c8 0008 	str.w	r0, [r8, #8]
 800be0a:	4604      	mov	r4, r0
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	f04f 0900 	mov.w	r9, #0
 800be12:	07eb      	lsls	r3, r5, #31
 800be14:	d50a      	bpl.n	800be2c <__pow5mult+0x84>
 800be16:	4639      	mov	r1, r7
 800be18:	4622      	mov	r2, r4
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ff1a 	bl	800bc54 <__multiply>
 800be20:	4639      	mov	r1, r7
 800be22:	4680      	mov	r8, r0
 800be24:	4630      	mov	r0, r6
 800be26:	f7ff fe47 	bl	800bab8 <_Bfree>
 800be2a:	4647      	mov	r7, r8
 800be2c:	106d      	asrs	r5, r5, #1
 800be2e:	d00b      	beq.n	800be48 <__pow5mult+0xa0>
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	b938      	cbnz	r0, 800be44 <__pow5mult+0x9c>
 800be34:	4622      	mov	r2, r4
 800be36:	4621      	mov	r1, r4
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ff0b 	bl	800bc54 <__multiply>
 800be3e:	6020      	str	r0, [r4, #0]
 800be40:	f8c0 9000 	str.w	r9, [r0]
 800be44:	4604      	mov	r4, r0
 800be46:	e7e4      	b.n	800be12 <__pow5mult+0x6a>
 800be48:	4638      	mov	r0, r7
 800be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4e:	bf00      	nop
 800be50:	0800d480 	.word	0x0800d480
 800be54:	0800d0a4 	.word	0x0800d0a4
 800be58:	0800d330 	.word	0x0800d330

0800be5c <__lshift>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	460c      	mov	r4, r1
 800be62:	6849      	ldr	r1, [r1, #4]
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	4607      	mov	r7, r0
 800be6e:	4691      	mov	r9, r2
 800be70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be74:	f108 0601 	add.w	r6, r8, #1
 800be78:	42b3      	cmp	r3, r6
 800be7a:	db0b      	blt.n	800be94 <__lshift+0x38>
 800be7c:	4638      	mov	r0, r7
 800be7e:	f7ff fddb 	bl	800ba38 <_Balloc>
 800be82:	4605      	mov	r5, r0
 800be84:	b948      	cbnz	r0, 800be9a <__lshift+0x3e>
 800be86:	4602      	mov	r2, r0
 800be88:	4b2a      	ldr	r3, [pc, #168]	; (800bf34 <__lshift+0xd8>)
 800be8a:	482b      	ldr	r0, [pc, #172]	; (800bf38 <__lshift+0xdc>)
 800be8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be90:	f7fe fe12 	bl	800aab8 <__assert_func>
 800be94:	3101      	adds	r1, #1
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	e7ee      	b.n	800be78 <__lshift+0x1c>
 800be9a:	2300      	movs	r3, #0
 800be9c:	f100 0114 	add.w	r1, r0, #20
 800bea0:	f100 0210 	add.w	r2, r0, #16
 800bea4:	4618      	mov	r0, r3
 800bea6:	4553      	cmp	r3, sl
 800bea8:	db37      	blt.n	800bf1a <__lshift+0xbe>
 800beaa:	6920      	ldr	r0, [r4, #16]
 800beac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beb0:	f104 0314 	add.w	r3, r4, #20
 800beb4:	f019 091f 	ands.w	r9, r9, #31
 800beb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bebc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bec0:	d02f      	beq.n	800bf22 <__lshift+0xc6>
 800bec2:	f1c9 0e20 	rsb	lr, r9, #32
 800bec6:	468a      	mov	sl, r1
 800bec8:	f04f 0c00 	mov.w	ip, #0
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	fa02 f209 	lsl.w	r2, r2, r9
 800bed2:	ea42 020c 	orr.w	r2, r2, ip
 800bed6:	f84a 2b04 	str.w	r2, [sl], #4
 800beda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bede:	4298      	cmp	r0, r3
 800bee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bee4:	d8f2      	bhi.n	800becc <__lshift+0x70>
 800bee6:	1b03      	subs	r3, r0, r4
 800bee8:	3b15      	subs	r3, #21
 800beea:	f023 0303 	bic.w	r3, r3, #3
 800beee:	3304      	adds	r3, #4
 800bef0:	f104 0215 	add.w	r2, r4, #21
 800bef4:	4290      	cmp	r0, r2
 800bef6:	bf38      	it	cc
 800bef8:	2304      	movcc	r3, #4
 800befa:	f841 c003 	str.w	ip, [r1, r3]
 800befe:	f1bc 0f00 	cmp.w	ip, #0
 800bf02:	d001      	beq.n	800bf08 <__lshift+0xac>
 800bf04:	f108 0602 	add.w	r6, r8, #2
 800bf08:	3e01      	subs	r6, #1
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	612e      	str	r6, [r5, #16]
 800bf0e:	4621      	mov	r1, r4
 800bf10:	f7ff fdd2 	bl	800bab8 <_Bfree>
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf1e:	3301      	adds	r3, #1
 800bf20:	e7c1      	b.n	800bea6 <__lshift+0x4a>
 800bf22:	3904      	subs	r1, #4
 800bf24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf28:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf2c:	4298      	cmp	r0, r3
 800bf2e:	d8f9      	bhi.n	800bf24 <__lshift+0xc8>
 800bf30:	e7ea      	b.n	800bf08 <__lshift+0xac>
 800bf32:	bf00      	nop
 800bf34:	0800d2bd 	.word	0x0800d2bd
 800bf38:	0800d330 	.word	0x0800d330

0800bf3c <__mcmp>:
 800bf3c:	b530      	push	{r4, r5, lr}
 800bf3e:	6902      	ldr	r2, [r0, #16]
 800bf40:	690c      	ldr	r4, [r1, #16]
 800bf42:	1b12      	subs	r2, r2, r4
 800bf44:	d10e      	bne.n	800bf64 <__mcmp+0x28>
 800bf46:	f100 0314 	add.w	r3, r0, #20
 800bf4a:	3114      	adds	r1, #20
 800bf4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	d003      	beq.n	800bf68 <__mcmp+0x2c>
 800bf60:	d305      	bcc.n	800bf6e <__mcmp+0x32>
 800bf62:	2201      	movs	r2, #1
 800bf64:	4610      	mov	r0, r2
 800bf66:	bd30      	pop	{r4, r5, pc}
 800bf68:	4283      	cmp	r3, r0
 800bf6a:	d3f3      	bcc.n	800bf54 <__mcmp+0x18>
 800bf6c:	e7fa      	b.n	800bf64 <__mcmp+0x28>
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	e7f7      	b.n	800bf64 <__mcmp+0x28>

0800bf74 <__mdiff>:
 800bf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	460c      	mov	r4, r1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4690      	mov	r8, r2
 800bf82:	f7ff ffdb 	bl	800bf3c <__mcmp>
 800bf86:	1e05      	subs	r5, r0, #0
 800bf88:	d110      	bne.n	800bfac <__mdiff+0x38>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff fd53 	bl	800ba38 <_Balloc>
 800bf92:	b930      	cbnz	r0, 800bfa2 <__mdiff+0x2e>
 800bf94:	4b3a      	ldr	r3, [pc, #232]	; (800c080 <__mdiff+0x10c>)
 800bf96:	4602      	mov	r2, r0
 800bf98:	f240 2132 	movw	r1, #562	; 0x232
 800bf9c:	4839      	ldr	r0, [pc, #228]	; (800c084 <__mdiff+0x110>)
 800bf9e:	f7fe fd8b 	bl	800aab8 <__assert_func>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	bfa4      	itt	ge
 800bfae:	4643      	movge	r3, r8
 800bfb0:	46a0      	movge	r8, r4
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfb8:	bfa6      	itte	ge
 800bfba:	461c      	movge	r4, r3
 800bfbc:	2500      	movge	r5, #0
 800bfbe:	2501      	movlt	r5, #1
 800bfc0:	f7ff fd3a 	bl	800ba38 <_Balloc>
 800bfc4:	b920      	cbnz	r0, 800bfd0 <__mdiff+0x5c>
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	; (800c080 <__mdiff+0x10c>)
 800bfc8:	4602      	mov	r2, r0
 800bfca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfce:	e7e5      	b.n	800bf9c <__mdiff+0x28>
 800bfd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfd4:	6926      	ldr	r6, [r4, #16]
 800bfd6:	60c5      	str	r5, [r0, #12]
 800bfd8:	f104 0914 	add.w	r9, r4, #20
 800bfdc:	f108 0514 	add.w	r5, r8, #20
 800bfe0:	f100 0e14 	add.w	lr, r0, #20
 800bfe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfec:	f108 0210 	add.w	r2, r8, #16
 800bff0:	46f2      	mov	sl, lr
 800bff2:	2100      	movs	r1, #0
 800bff4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bffc:	fa1f f883 	uxth.w	r8, r3
 800c000:	fa11 f18b 	uxtah	r1, r1, fp
 800c004:	0c1b      	lsrs	r3, r3, #16
 800c006:	eba1 0808 	sub.w	r8, r1, r8
 800c00a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c00e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c012:	fa1f f888 	uxth.w	r8, r8
 800c016:	1419      	asrs	r1, r3, #16
 800c018:	454e      	cmp	r6, r9
 800c01a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c01e:	f84a 3b04 	str.w	r3, [sl], #4
 800c022:	d8e7      	bhi.n	800bff4 <__mdiff+0x80>
 800c024:	1b33      	subs	r3, r6, r4
 800c026:	3b15      	subs	r3, #21
 800c028:	f023 0303 	bic.w	r3, r3, #3
 800c02c:	3304      	adds	r3, #4
 800c02e:	3415      	adds	r4, #21
 800c030:	42a6      	cmp	r6, r4
 800c032:	bf38      	it	cc
 800c034:	2304      	movcc	r3, #4
 800c036:	441d      	add	r5, r3
 800c038:	4473      	add	r3, lr
 800c03a:	469e      	mov	lr, r3
 800c03c:	462e      	mov	r6, r5
 800c03e:	4566      	cmp	r6, ip
 800c040:	d30e      	bcc.n	800c060 <__mdiff+0xec>
 800c042:	f10c 0203 	add.w	r2, ip, #3
 800c046:	1b52      	subs	r2, r2, r5
 800c048:	f022 0203 	bic.w	r2, r2, #3
 800c04c:	3d03      	subs	r5, #3
 800c04e:	45ac      	cmp	ip, r5
 800c050:	bf38      	it	cc
 800c052:	2200      	movcc	r2, #0
 800c054:	441a      	add	r2, r3
 800c056:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c05a:	b17b      	cbz	r3, 800c07c <__mdiff+0x108>
 800c05c:	6107      	str	r7, [r0, #16]
 800c05e:	e7a3      	b.n	800bfa8 <__mdiff+0x34>
 800c060:	f856 8b04 	ldr.w	r8, [r6], #4
 800c064:	fa11 f288 	uxtah	r2, r1, r8
 800c068:	1414      	asrs	r4, r2, #16
 800c06a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c06e:	b292      	uxth	r2, r2
 800c070:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c074:	f84e 2b04 	str.w	r2, [lr], #4
 800c078:	1421      	asrs	r1, r4, #16
 800c07a:	e7e0      	b.n	800c03e <__mdiff+0xca>
 800c07c:	3f01      	subs	r7, #1
 800c07e:	e7ea      	b.n	800c056 <__mdiff+0xe2>
 800c080:	0800d2bd 	.word	0x0800d2bd
 800c084:	0800d330 	.word	0x0800d330

0800c088 <__d2b>:
 800c088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	4689      	mov	r9, r1
 800c08e:	2101      	movs	r1, #1
 800c090:	ec57 6b10 	vmov	r6, r7, d0
 800c094:	4690      	mov	r8, r2
 800c096:	f7ff fccf 	bl	800ba38 <_Balloc>
 800c09a:	4604      	mov	r4, r0
 800c09c:	b930      	cbnz	r0, 800c0ac <__d2b+0x24>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	4b25      	ldr	r3, [pc, #148]	; (800c138 <__d2b+0xb0>)
 800c0a2:	4826      	ldr	r0, [pc, #152]	; (800c13c <__d2b+0xb4>)
 800c0a4:	f240 310a 	movw	r1, #778	; 0x30a
 800c0a8:	f7fe fd06 	bl	800aab8 <__assert_func>
 800c0ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0b4:	bb35      	cbnz	r5, 800c104 <__d2b+0x7c>
 800c0b6:	2e00      	cmp	r6, #0
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	d028      	beq.n	800c10e <__d2b+0x86>
 800c0bc:	4668      	mov	r0, sp
 800c0be:	9600      	str	r6, [sp, #0]
 800c0c0:	f7ff fd82 	bl	800bbc8 <__lo0bits>
 800c0c4:	9900      	ldr	r1, [sp, #0]
 800c0c6:	b300      	cbz	r0, 800c10a <__d2b+0x82>
 800c0c8:	9a01      	ldr	r2, [sp, #4]
 800c0ca:	f1c0 0320 	rsb	r3, r0, #32
 800c0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d2:	430b      	orrs	r3, r1
 800c0d4:	40c2      	lsrs	r2, r0
 800c0d6:	6163      	str	r3, [r4, #20]
 800c0d8:	9201      	str	r2, [sp, #4]
 800c0da:	9b01      	ldr	r3, [sp, #4]
 800c0dc:	61a3      	str	r3, [r4, #24]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bf14      	ite	ne
 800c0e2:	2202      	movne	r2, #2
 800c0e4:	2201      	moveq	r2, #1
 800c0e6:	6122      	str	r2, [r4, #16]
 800c0e8:	b1d5      	cbz	r5, 800c120 <__d2b+0x98>
 800c0ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0ee:	4405      	add	r5, r0
 800c0f0:	f8c9 5000 	str.w	r5, [r9]
 800c0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0f8:	f8c8 0000 	str.w	r0, [r8]
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	b003      	add	sp, #12
 800c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c108:	e7d5      	b.n	800c0b6 <__d2b+0x2e>
 800c10a:	6161      	str	r1, [r4, #20]
 800c10c:	e7e5      	b.n	800c0da <__d2b+0x52>
 800c10e:	a801      	add	r0, sp, #4
 800c110:	f7ff fd5a 	bl	800bbc8 <__lo0bits>
 800c114:	9b01      	ldr	r3, [sp, #4]
 800c116:	6163      	str	r3, [r4, #20]
 800c118:	2201      	movs	r2, #1
 800c11a:	6122      	str	r2, [r4, #16]
 800c11c:	3020      	adds	r0, #32
 800c11e:	e7e3      	b.n	800c0e8 <__d2b+0x60>
 800c120:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c128:	f8c9 0000 	str.w	r0, [r9]
 800c12c:	6918      	ldr	r0, [r3, #16]
 800c12e:	f7ff fd2b 	bl	800bb88 <__hi0bits>
 800c132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c136:	e7df      	b.n	800c0f8 <__d2b+0x70>
 800c138:	0800d2bd 	.word	0x0800d2bd
 800c13c:	0800d330 	.word	0x0800d330

0800c140 <_calloc_r>:
 800c140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c142:	fba1 2402 	umull	r2, r4, r1, r2
 800c146:	b94c      	cbnz	r4, 800c15c <_calloc_r+0x1c>
 800c148:	4611      	mov	r1, r2
 800c14a:	9201      	str	r2, [sp, #4]
 800c14c:	f000 f87a 	bl	800c244 <_malloc_r>
 800c150:	9a01      	ldr	r2, [sp, #4]
 800c152:	4605      	mov	r5, r0
 800c154:	b930      	cbnz	r0, 800c164 <_calloc_r+0x24>
 800c156:	4628      	mov	r0, r5
 800c158:	b003      	add	sp, #12
 800c15a:	bd30      	pop	{r4, r5, pc}
 800c15c:	220c      	movs	r2, #12
 800c15e:	6002      	str	r2, [r0, #0]
 800c160:	2500      	movs	r5, #0
 800c162:	e7f8      	b.n	800c156 <_calloc_r+0x16>
 800c164:	4621      	mov	r1, r4
 800c166:	f7fd ff15 	bl	8009f94 <memset>
 800c16a:	e7f4      	b.n	800c156 <_calloc_r+0x16>

0800c16c <_free_r>:
 800c16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c16e:	2900      	cmp	r1, #0
 800c170:	d044      	beq.n	800c1fc <_free_r+0x90>
 800c172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c176:	9001      	str	r0, [sp, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f1a1 0404 	sub.w	r4, r1, #4
 800c17e:	bfb8      	it	lt
 800c180:	18e4      	addlt	r4, r4, r3
 800c182:	f000 fe2d 	bl	800cde0 <__malloc_lock>
 800c186:	4a1e      	ldr	r2, [pc, #120]	; (800c200 <_free_r+0x94>)
 800c188:	9801      	ldr	r0, [sp, #4]
 800c18a:	6813      	ldr	r3, [r2, #0]
 800c18c:	b933      	cbnz	r3, 800c19c <_free_r+0x30>
 800c18e:	6063      	str	r3, [r4, #4]
 800c190:	6014      	str	r4, [r2, #0]
 800c192:	b003      	add	sp, #12
 800c194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c198:	f000 be28 	b.w	800cdec <__malloc_unlock>
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	d908      	bls.n	800c1b2 <_free_r+0x46>
 800c1a0:	6825      	ldr	r5, [r4, #0]
 800c1a2:	1961      	adds	r1, r4, r5
 800c1a4:	428b      	cmp	r3, r1
 800c1a6:	bf01      	itttt	eq
 800c1a8:	6819      	ldreq	r1, [r3, #0]
 800c1aa:	685b      	ldreq	r3, [r3, #4]
 800c1ac:	1949      	addeq	r1, r1, r5
 800c1ae:	6021      	streq	r1, [r4, #0]
 800c1b0:	e7ed      	b.n	800c18e <_free_r+0x22>
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	b10b      	cbz	r3, 800c1bc <_free_r+0x50>
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	d9fa      	bls.n	800c1b2 <_free_r+0x46>
 800c1bc:	6811      	ldr	r1, [r2, #0]
 800c1be:	1855      	adds	r5, r2, r1
 800c1c0:	42a5      	cmp	r5, r4
 800c1c2:	d10b      	bne.n	800c1dc <_free_r+0x70>
 800c1c4:	6824      	ldr	r4, [r4, #0]
 800c1c6:	4421      	add	r1, r4
 800c1c8:	1854      	adds	r4, r2, r1
 800c1ca:	42a3      	cmp	r3, r4
 800c1cc:	6011      	str	r1, [r2, #0]
 800c1ce:	d1e0      	bne.n	800c192 <_free_r+0x26>
 800c1d0:	681c      	ldr	r4, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	6053      	str	r3, [r2, #4]
 800c1d6:	4421      	add	r1, r4
 800c1d8:	6011      	str	r1, [r2, #0]
 800c1da:	e7da      	b.n	800c192 <_free_r+0x26>
 800c1dc:	d902      	bls.n	800c1e4 <_free_r+0x78>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	6003      	str	r3, [r0, #0]
 800c1e2:	e7d6      	b.n	800c192 <_free_r+0x26>
 800c1e4:	6825      	ldr	r5, [r4, #0]
 800c1e6:	1961      	adds	r1, r4, r5
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	bf04      	itt	eq
 800c1ec:	6819      	ldreq	r1, [r3, #0]
 800c1ee:	685b      	ldreq	r3, [r3, #4]
 800c1f0:	6063      	str	r3, [r4, #4]
 800c1f2:	bf04      	itt	eq
 800c1f4:	1949      	addeq	r1, r1, r5
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	6054      	str	r4, [r2, #4]
 800c1fa:	e7ca      	b.n	800c192 <_free_r+0x26>
 800c1fc:	b003      	add	sp, #12
 800c1fe:	bd30      	pop	{r4, r5, pc}
 800c200:	20000750 	.word	0x20000750

0800c204 <sbrk_aligned>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4e0e      	ldr	r6, [pc, #56]	; (800c240 <sbrk_aligned+0x3c>)
 800c208:	460c      	mov	r4, r1
 800c20a:	6831      	ldr	r1, [r6, #0]
 800c20c:	4605      	mov	r5, r0
 800c20e:	b911      	cbnz	r1, 800c216 <sbrk_aligned+0x12>
 800c210:	f000 fb42 	bl	800c898 <_sbrk_r>
 800c214:	6030      	str	r0, [r6, #0]
 800c216:	4621      	mov	r1, r4
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 fb3d 	bl	800c898 <_sbrk_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d00a      	beq.n	800c238 <sbrk_aligned+0x34>
 800c222:	1cc4      	adds	r4, r0, #3
 800c224:	f024 0403 	bic.w	r4, r4, #3
 800c228:	42a0      	cmp	r0, r4
 800c22a:	d007      	beq.n	800c23c <sbrk_aligned+0x38>
 800c22c:	1a21      	subs	r1, r4, r0
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 fb32 	bl	800c898 <_sbrk_r>
 800c234:	3001      	adds	r0, #1
 800c236:	d101      	bne.n	800c23c <sbrk_aligned+0x38>
 800c238:	f04f 34ff 	mov.w	r4, #4294967295
 800c23c:	4620      	mov	r0, r4
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	20000754 	.word	0x20000754

0800c244 <_malloc_r>:
 800c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	1ccd      	adds	r5, r1, #3
 800c24a:	f025 0503 	bic.w	r5, r5, #3
 800c24e:	3508      	adds	r5, #8
 800c250:	2d0c      	cmp	r5, #12
 800c252:	bf38      	it	cc
 800c254:	250c      	movcc	r5, #12
 800c256:	2d00      	cmp	r5, #0
 800c258:	4607      	mov	r7, r0
 800c25a:	db01      	blt.n	800c260 <_malloc_r+0x1c>
 800c25c:	42a9      	cmp	r1, r5
 800c25e:	d905      	bls.n	800c26c <_malloc_r+0x28>
 800c260:	230c      	movs	r3, #12
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	2600      	movs	r6, #0
 800c266:	4630      	mov	r0, r6
 800c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26c:	4e2e      	ldr	r6, [pc, #184]	; (800c328 <_malloc_r+0xe4>)
 800c26e:	f000 fdb7 	bl	800cde0 <__malloc_lock>
 800c272:	6833      	ldr	r3, [r6, #0]
 800c274:	461c      	mov	r4, r3
 800c276:	bb34      	cbnz	r4, 800c2c6 <_malloc_r+0x82>
 800c278:	4629      	mov	r1, r5
 800c27a:	4638      	mov	r0, r7
 800c27c:	f7ff ffc2 	bl	800c204 <sbrk_aligned>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	4604      	mov	r4, r0
 800c284:	d14d      	bne.n	800c322 <_malloc_r+0xde>
 800c286:	6834      	ldr	r4, [r6, #0]
 800c288:	4626      	mov	r6, r4
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	d140      	bne.n	800c310 <_malloc_r+0xcc>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	4631      	mov	r1, r6
 800c292:	4638      	mov	r0, r7
 800c294:	eb04 0803 	add.w	r8, r4, r3
 800c298:	f000 fafe 	bl	800c898 <_sbrk_r>
 800c29c:	4580      	cmp	r8, r0
 800c29e:	d13a      	bne.n	800c316 <_malloc_r+0xd2>
 800c2a0:	6821      	ldr	r1, [r4, #0]
 800c2a2:	3503      	adds	r5, #3
 800c2a4:	1a6d      	subs	r5, r5, r1
 800c2a6:	f025 0503 	bic.w	r5, r5, #3
 800c2aa:	3508      	adds	r5, #8
 800c2ac:	2d0c      	cmp	r5, #12
 800c2ae:	bf38      	it	cc
 800c2b0:	250c      	movcc	r5, #12
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f7ff ffa5 	bl	800c204 <sbrk_aligned>
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	d02b      	beq.n	800c316 <_malloc_r+0xd2>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	442b      	add	r3, r5
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	e00e      	b.n	800c2e4 <_malloc_r+0xa0>
 800c2c6:	6822      	ldr	r2, [r4, #0]
 800c2c8:	1b52      	subs	r2, r2, r5
 800c2ca:	d41e      	bmi.n	800c30a <_malloc_r+0xc6>
 800c2cc:	2a0b      	cmp	r2, #11
 800c2ce:	d916      	bls.n	800c2fe <_malloc_r+0xba>
 800c2d0:	1961      	adds	r1, r4, r5
 800c2d2:	42a3      	cmp	r3, r4
 800c2d4:	6025      	str	r5, [r4, #0]
 800c2d6:	bf18      	it	ne
 800c2d8:	6059      	strne	r1, [r3, #4]
 800c2da:	6863      	ldr	r3, [r4, #4]
 800c2dc:	bf08      	it	eq
 800c2de:	6031      	streq	r1, [r6, #0]
 800c2e0:	5162      	str	r2, [r4, r5]
 800c2e2:	604b      	str	r3, [r1, #4]
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f104 060b 	add.w	r6, r4, #11
 800c2ea:	f000 fd7f 	bl	800cdec <__malloc_unlock>
 800c2ee:	f026 0607 	bic.w	r6, r6, #7
 800c2f2:	1d23      	adds	r3, r4, #4
 800c2f4:	1af2      	subs	r2, r6, r3
 800c2f6:	d0b6      	beq.n	800c266 <_malloc_r+0x22>
 800c2f8:	1b9b      	subs	r3, r3, r6
 800c2fa:	50a3      	str	r3, [r4, r2]
 800c2fc:	e7b3      	b.n	800c266 <_malloc_r+0x22>
 800c2fe:	6862      	ldr	r2, [r4, #4]
 800c300:	42a3      	cmp	r3, r4
 800c302:	bf0c      	ite	eq
 800c304:	6032      	streq	r2, [r6, #0]
 800c306:	605a      	strne	r2, [r3, #4]
 800c308:	e7ec      	b.n	800c2e4 <_malloc_r+0xa0>
 800c30a:	4623      	mov	r3, r4
 800c30c:	6864      	ldr	r4, [r4, #4]
 800c30e:	e7b2      	b.n	800c276 <_malloc_r+0x32>
 800c310:	4634      	mov	r4, r6
 800c312:	6876      	ldr	r6, [r6, #4]
 800c314:	e7b9      	b.n	800c28a <_malloc_r+0x46>
 800c316:	230c      	movs	r3, #12
 800c318:	603b      	str	r3, [r7, #0]
 800c31a:	4638      	mov	r0, r7
 800c31c:	f000 fd66 	bl	800cdec <__malloc_unlock>
 800c320:	e7a1      	b.n	800c266 <_malloc_r+0x22>
 800c322:	6025      	str	r5, [r4, #0]
 800c324:	e7de      	b.n	800c2e4 <_malloc_r+0xa0>
 800c326:	bf00      	nop
 800c328:	20000750 	.word	0x20000750

0800c32c <__ssputs_r>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	688e      	ldr	r6, [r1, #8]
 800c332:	429e      	cmp	r6, r3
 800c334:	4682      	mov	sl, r0
 800c336:	460c      	mov	r4, r1
 800c338:	4690      	mov	r8, r2
 800c33a:	461f      	mov	r7, r3
 800c33c:	d838      	bhi.n	800c3b0 <__ssputs_r+0x84>
 800c33e:	898a      	ldrh	r2, [r1, #12]
 800c340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c344:	d032      	beq.n	800c3ac <__ssputs_r+0x80>
 800c346:	6825      	ldr	r5, [r4, #0]
 800c348:	6909      	ldr	r1, [r1, #16]
 800c34a:	eba5 0901 	sub.w	r9, r5, r1
 800c34e:	6965      	ldr	r5, [r4, #20]
 800c350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c358:	3301      	adds	r3, #1
 800c35a:	444b      	add	r3, r9
 800c35c:	106d      	asrs	r5, r5, #1
 800c35e:	429d      	cmp	r5, r3
 800c360:	bf38      	it	cc
 800c362:	461d      	movcc	r5, r3
 800c364:	0553      	lsls	r3, r2, #21
 800c366:	d531      	bpl.n	800c3cc <__ssputs_r+0xa0>
 800c368:	4629      	mov	r1, r5
 800c36a:	f7ff ff6b 	bl	800c244 <_malloc_r>
 800c36e:	4606      	mov	r6, r0
 800c370:	b950      	cbnz	r0, 800c388 <__ssputs_r+0x5c>
 800c372:	230c      	movs	r3, #12
 800c374:	f8ca 3000 	str.w	r3, [sl]
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c388:	6921      	ldr	r1, [r4, #16]
 800c38a:	464a      	mov	r2, r9
 800c38c:	f7ff fb46 	bl	800ba1c <memcpy>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	6126      	str	r6, [r4, #16]
 800c39e:	6165      	str	r5, [r4, #20]
 800c3a0:	444e      	add	r6, r9
 800c3a2:	eba5 0509 	sub.w	r5, r5, r9
 800c3a6:	6026      	str	r6, [r4, #0]
 800c3a8:	60a5      	str	r5, [r4, #8]
 800c3aa:	463e      	mov	r6, r7
 800c3ac:	42be      	cmp	r6, r7
 800c3ae:	d900      	bls.n	800c3b2 <__ssputs_r+0x86>
 800c3b0:	463e      	mov	r6, r7
 800c3b2:	6820      	ldr	r0, [r4, #0]
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	4641      	mov	r1, r8
 800c3b8:	f000 fcf8 	bl	800cdac <memmove>
 800c3bc:	68a3      	ldr	r3, [r4, #8]
 800c3be:	1b9b      	subs	r3, r3, r6
 800c3c0:	60a3      	str	r3, [r4, #8]
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	4433      	add	r3, r6
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e7db      	b.n	800c384 <__ssputs_r+0x58>
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	f000 fd13 	bl	800cdf8 <_realloc_r>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d1e1      	bne.n	800c39c <__ssputs_r+0x70>
 800c3d8:	6921      	ldr	r1, [r4, #16]
 800c3da:	4650      	mov	r0, sl
 800c3dc:	f7ff fec6 	bl	800c16c <_free_r>
 800c3e0:	e7c7      	b.n	800c372 <__ssputs_r+0x46>
	...

0800c3e4 <_svfiprintf_r>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	4698      	mov	r8, r3
 800c3ea:	898b      	ldrh	r3, [r1, #12]
 800c3ec:	061b      	lsls	r3, r3, #24
 800c3ee:	b09d      	sub	sp, #116	; 0x74
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	460d      	mov	r5, r1
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	d50e      	bpl.n	800c416 <_svfiprintf_r+0x32>
 800c3f8:	690b      	ldr	r3, [r1, #16]
 800c3fa:	b963      	cbnz	r3, 800c416 <_svfiprintf_r+0x32>
 800c3fc:	2140      	movs	r1, #64	; 0x40
 800c3fe:	f7ff ff21 	bl	800c244 <_malloc_r>
 800c402:	6028      	str	r0, [r5, #0]
 800c404:	6128      	str	r0, [r5, #16]
 800c406:	b920      	cbnz	r0, 800c412 <_svfiprintf_r+0x2e>
 800c408:	230c      	movs	r3, #12
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	e0d1      	b.n	800c5b6 <_svfiprintf_r+0x1d2>
 800c412:	2340      	movs	r3, #64	; 0x40
 800c414:	616b      	str	r3, [r5, #20]
 800c416:	2300      	movs	r3, #0
 800c418:	9309      	str	r3, [sp, #36]	; 0x24
 800c41a:	2320      	movs	r3, #32
 800c41c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c420:	f8cd 800c 	str.w	r8, [sp, #12]
 800c424:	2330      	movs	r3, #48	; 0x30
 800c426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5d0 <_svfiprintf_r+0x1ec>
 800c42a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c42e:	f04f 0901 	mov.w	r9, #1
 800c432:	4623      	mov	r3, r4
 800c434:	469a      	mov	sl, r3
 800c436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43a:	b10a      	cbz	r2, 800c440 <_svfiprintf_r+0x5c>
 800c43c:	2a25      	cmp	r2, #37	; 0x25
 800c43e:	d1f9      	bne.n	800c434 <_svfiprintf_r+0x50>
 800c440:	ebba 0b04 	subs.w	fp, sl, r4
 800c444:	d00b      	beq.n	800c45e <_svfiprintf_r+0x7a>
 800c446:	465b      	mov	r3, fp
 800c448:	4622      	mov	r2, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	4638      	mov	r0, r7
 800c44e:	f7ff ff6d 	bl	800c32c <__ssputs_r>
 800c452:	3001      	adds	r0, #1
 800c454:	f000 80aa 	beq.w	800c5ac <_svfiprintf_r+0x1c8>
 800c458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45a:	445a      	add	r2, fp
 800c45c:	9209      	str	r2, [sp, #36]	; 0x24
 800c45e:	f89a 3000 	ldrb.w	r3, [sl]
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 80a2 	beq.w	800c5ac <_svfiprintf_r+0x1c8>
 800c468:	2300      	movs	r3, #0
 800c46a:	f04f 32ff 	mov.w	r2, #4294967295
 800c46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c472:	f10a 0a01 	add.w	sl, sl, #1
 800c476:	9304      	str	r3, [sp, #16]
 800c478:	9307      	str	r3, [sp, #28]
 800c47a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47e:	931a      	str	r3, [sp, #104]	; 0x68
 800c480:	4654      	mov	r4, sl
 800c482:	2205      	movs	r2, #5
 800c484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c488:	4851      	ldr	r0, [pc, #324]	; (800c5d0 <_svfiprintf_r+0x1ec>)
 800c48a:	f7f3 fee1 	bl	8000250 <memchr>
 800c48e:	9a04      	ldr	r2, [sp, #16]
 800c490:	b9d8      	cbnz	r0, 800c4ca <_svfiprintf_r+0xe6>
 800c492:	06d0      	lsls	r0, r2, #27
 800c494:	bf44      	itt	mi
 800c496:	2320      	movmi	r3, #32
 800c498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c49c:	0711      	lsls	r1, r2, #28
 800c49e:	bf44      	itt	mi
 800c4a0:	232b      	movmi	r3, #43	; 0x2b
 800c4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ac:	d015      	beq.n	800c4da <_svfiprintf_r+0xf6>
 800c4ae:	9a07      	ldr	r2, [sp, #28]
 800c4b0:	4654      	mov	r4, sl
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	f04f 0c0a 	mov.w	ip, #10
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4be:	3b30      	subs	r3, #48	; 0x30
 800c4c0:	2b09      	cmp	r3, #9
 800c4c2:	d94e      	bls.n	800c562 <_svfiprintf_r+0x17e>
 800c4c4:	b1b0      	cbz	r0, 800c4f4 <_svfiprintf_r+0x110>
 800c4c6:	9207      	str	r2, [sp, #28]
 800c4c8:	e014      	b.n	800c4f4 <_svfiprintf_r+0x110>
 800c4ca:	eba0 0308 	sub.w	r3, r0, r8
 800c4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	46a2      	mov	sl, r4
 800c4d8:	e7d2      	b.n	800c480 <_svfiprintf_r+0x9c>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	1d19      	adds	r1, r3, #4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	9103      	str	r1, [sp, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	bfbb      	ittet	lt
 800c4e6:	425b      	neglt	r3, r3
 800c4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ec:	9307      	strge	r3, [sp, #28]
 800c4ee:	9307      	strlt	r3, [sp, #28]
 800c4f0:	bfb8      	it	lt
 800c4f2:	9204      	strlt	r2, [sp, #16]
 800c4f4:	7823      	ldrb	r3, [r4, #0]
 800c4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f8:	d10c      	bne.n	800c514 <_svfiprintf_r+0x130>
 800c4fa:	7863      	ldrb	r3, [r4, #1]
 800c4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fe:	d135      	bne.n	800c56c <_svfiprintf_r+0x188>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	1d1a      	adds	r2, r3, #4
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	9203      	str	r2, [sp, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bfb8      	it	lt
 800c50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c510:	3402      	adds	r4, #2
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5e0 <_svfiprintf_r+0x1fc>
 800c518:	7821      	ldrb	r1, [r4, #0]
 800c51a:	2203      	movs	r2, #3
 800c51c:	4650      	mov	r0, sl
 800c51e:	f7f3 fe97 	bl	8000250 <memchr>
 800c522:	b140      	cbz	r0, 800c536 <_svfiprintf_r+0x152>
 800c524:	2340      	movs	r3, #64	; 0x40
 800c526:	eba0 000a 	sub.w	r0, r0, sl
 800c52a:	fa03 f000 	lsl.w	r0, r3, r0
 800c52e:	9b04      	ldr	r3, [sp, #16]
 800c530:	4303      	orrs	r3, r0
 800c532:	3401      	adds	r4, #1
 800c534:	9304      	str	r3, [sp, #16]
 800c536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53a:	4826      	ldr	r0, [pc, #152]	; (800c5d4 <_svfiprintf_r+0x1f0>)
 800c53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c540:	2206      	movs	r2, #6
 800c542:	f7f3 fe85 	bl	8000250 <memchr>
 800c546:	2800      	cmp	r0, #0
 800c548:	d038      	beq.n	800c5bc <_svfiprintf_r+0x1d8>
 800c54a:	4b23      	ldr	r3, [pc, #140]	; (800c5d8 <_svfiprintf_r+0x1f4>)
 800c54c:	bb1b      	cbnz	r3, 800c596 <_svfiprintf_r+0x1b2>
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	3307      	adds	r3, #7
 800c552:	f023 0307 	bic.w	r3, r3, #7
 800c556:	3308      	adds	r3, #8
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55c:	4433      	add	r3, r6
 800c55e:	9309      	str	r3, [sp, #36]	; 0x24
 800c560:	e767      	b.n	800c432 <_svfiprintf_r+0x4e>
 800c562:	fb0c 3202 	mla	r2, ip, r2, r3
 800c566:	460c      	mov	r4, r1
 800c568:	2001      	movs	r0, #1
 800c56a:	e7a5      	b.n	800c4b8 <_svfiprintf_r+0xd4>
 800c56c:	2300      	movs	r3, #0
 800c56e:	3401      	adds	r4, #1
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	4619      	mov	r1, r3
 800c574:	f04f 0c0a 	mov.w	ip, #10
 800c578:	4620      	mov	r0, r4
 800c57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57e:	3a30      	subs	r2, #48	; 0x30
 800c580:	2a09      	cmp	r2, #9
 800c582:	d903      	bls.n	800c58c <_svfiprintf_r+0x1a8>
 800c584:	2b00      	cmp	r3, #0
 800c586:	d0c5      	beq.n	800c514 <_svfiprintf_r+0x130>
 800c588:	9105      	str	r1, [sp, #20]
 800c58a:	e7c3      	b.n	800c514 <_svfiprintf_r+0x130>
 800c58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c590:	4604      	mov	r4, r0
 800c592:	2301      	movs	r3, #1
 800c594:	e7f0      	b.n	800c578 <_svfiprintf_r+0x194>
 800c596:	ab03      	add	r3, sp, #12
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	462a      	mov	r2, r5
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <_svfiprintf_r+0x1f8>)
 800c59e:	a904      	add	r1, sp, #16
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7fd fd9f 	bl	800a0e4 <_printf_float>
 800c5a6:	1c42      	adds	r2, r0, #1
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	d1d6      	bne.n	800c55a <_svfiprintf_r+0x176>
 800c5ac:	89ab      	ldrh	r3, [r5, #12]
 800c5ae:	065b      	lsls	r3, r3, #25
 800c5b0:	f53f af2c 	bmi.w	800c40c <_svfiprintf_r+0x28>
 800c5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b6:	b01d      	add	sp, #116	; 0x74
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	ab03      	add	r3, sp, #12
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	462a      	mov	r2, r5
 800c5c2:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <_svfiprintf_r+0x1f8>)
 800c5c4:	a904      	add	r1, sp, #16
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	f7fe f830 	bl	800a62c <_printf_i>
 800c5cc:	e7eb      	b.n	800c5a6 <_svfiprintf_r+0x1c2>
 800c5ce:	bf00      	nop
 800c5d0:	0800d48c 	.word	0x0800d48c
 800c5d4:	0800d496 	.word	0x0800d496
 800c5d8:	0800a0e5 	.word	0x0800a0e5
 800c5dc:	0800c32d 	.word	0x0800c32d
 800c5e0:	0800d492 	.word	0x0800d492

0800c5e4 <__sfputc_r>:
 800c5e4:	6893      	ldr	r3, [r2, #8]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	b410      	push	{r4}
 800c5ec:	6093      	str	r3, [r2, #8]
 800c5ee:	da08      	bge.n	800c602 <__sfputc_r+0x1e>
 800c5f0:	6994      	ldr	r4, [r2, #24]
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	db01      	blt.n	800c5fa <__sfputc_r+0x16>
 800c5f6:	290a      	cmp	r1, #10
 800c5f8:	d103      	bne.n	800c602 <__sfputc_r+0x1e>
 800c5fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5fe:	f000 b99f 	b.w	800c940 <__swbuf_r>
 800c602:	6813      	ldr	r3, [r2, #0]
 800c604:	1c58      	adds	r0, r3, #1
 800c606:	6010      	str	r0, [r2, #0]
 800c608:	7019      	strb	r1, [r3, #0]
 800c60a:	4608      	mov	r0, r1
 800c60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <__sfputs_r>:
 800c612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	18d5      	adds	r5, r2, r3
 800c61c:	42ac      	cmp	r4, r5
 800c61e:	d101      	bne.n	800c624 <__sfputs_r+0x12>
 800c620:	2000      	movs	r0, #0
 800c622:	e007      	b.n	800c634 <__sfputs_r+0x22>
 800c624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c628:	463a      	mov	r2, r7
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ffda 	bl	800c5e4 <__sfputc_r>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d1f3      	bne.n	800c61c <__sfputs_r+0xa>
 800c634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c638 <_vfiprintf_r>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	460d      	mov	r5, r1
 800c63e:	b09d      	sub	sp, #116	; 0x74
 800c640:	4614      	mov	r4, r2
 800c642:	4698      	mov	r8, r3
 800c644:	4606      	mov	r6, r0
 800c646:	b118      	cbz	r0, 800c650 <_vfiprintf_r+0x18>
 800c648:	6983      	ldr	r3, [r0, #24]
 800c64a:	b90b      	cbnz	r3, 800c650 <_vfiprintf_r+0x18>
 800c64c:	f7ff f926 	bl	800b89c <__sinit>
 800c650:	4b89      	ldr	r3, [pc, #548]	; (800c878 <_vfiprintf_r+0x240>)
 800c652:	429d      	cmp	r5, r3
 800c654:	d11b      	bne.n	800c68e <_vfiprintf_r+0x56>
 800c656:	6875      	ldr	r5, [r6, #4]
 800c658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c65a:	07d9      	lsls	r1, r3, #31
 800c65c:	d405      	bmi.n	800c66a <_vfiprintf_r+0x32>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	059a      	lsls	r2, r3, #22
 800c662:	d402      	bmi.n	800c66a <_vfiprintf_r+0x32>
 800c664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c666:	f7ff f9ce 	bl	800ba06 <__retarget_lock_acquire_recursive>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	071b      	lsls	r3, r3, #28
 800c66e:	d501      	bpl.n	800c674 <_vfiprintf_r+0x3c>
 800c670:	692b      	ldr	r3, [r5, #16]
 800c672:	b9eb      	cbnz	r3, 800c6b0 <_vfiprintf_r+0x78>
 800c674:	4629      	mov	r1, r5
 800c676:	4630      	mov	r0, r6
 800c678:	f000 f9c6 	bl	800ca08 <__swsetup_r>
 800c67c:	b1c0      	cbz	r0, 800c6b0 <_vfiprintf_r+0x78>
 800c67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c680:	07dc      	lsls	r4, r3, #31
 800c682:	d50e      	bpl.n	800c6a2 <_vfiprintf_r+0x6a>
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	b01d      	add	sp, #116	; 0x74
 800c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68e:	4b7b      	ldr	r3, [pc, #492]	; (800c87c <_vfiprintf_r+0x244>)
 800c690:	429d      	cmp	r5, r3
 800c692:	d101      	bne.n	800c698 <_vfiprintf_r+0x60>
 800c694:	68b5      	ldr	r5, [r6, #8]
 800c696:	e7df      	b.n	800c658 <_vfiprintf_r+0x20>
 800c698:	4b79      	ldr	r3, [pc, #484]	; (800c880 <_vfiprintf_r+0x248>)
 800c69a:	429d      	cmp	r5, r3
 800c69c:	bf08      	it	eq
 800c69e:	68f5      	ldreq	r5, [r6, #12]
 800c6a0:	e7da      	b.n	800c658 <_vfiprintf_r+0x20>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	0598      	lsls	r0, r3, #22
 800c6a6:	d4ed      	bmi.n	800c684 <_vfiprintf_r+0x4c>
 800c6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6aa:	f7ff f9ad 	bl	800ba08 <__retarget_lock_release_recursive>
 800c6ae:	e7e9      	b.n	800c684 <_vfiprintf_r+0x4c>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6be:	2330      	movs	r3, #48	; 0x30
 800c6c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c884 <_vfiprintf_r+0x24c>
 800c6c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6c8:	f04f 0901 	mov.w	r9, #1
 800c6cc:	4623      	mov	r3, r4
 800c6ce:	469a      	mov	sl, r3
 800c6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d4:	b10a      	cbz	r2, 800c6da <_vfiprintf_r+0xa2>
 800c6d6:	2a25      	cmp	r2, #37	; 0x25
 800c6d8:	d1f9      	bne.n	800c6ce <_vfiprintf_r+0x96>
 800c6da:	ebba 0b04 	subs.w	fp, sl, r4
 800c6de:	d00b      	beq.n	800c6f8 <_vfiprintf_r+0xc0>
 800c6e0:	465b      	mov	r3, fp
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff ff93 	bl	800c612 <__sfputs_r>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	f000 80aa 	beq.w	800c846 <_vfiprintf_r+0x20e>
 800c6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f4:	445a      	add	r2, fp
 800c6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 80a2 	beq.w	800c846 <_vfiprintf_r+0x20e>
 800c702:	2300      	movs	r3, #0
 800c704:	f04f 32ff 	mov.w	r2, #4294967295
 800c708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70c:	f10a 0a01 	add.w	sl, sl, #1
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	9307      	str	r3, [sp, #28]
 800c714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c718:	931a      	str	r3, [sp, #104]	; 0x68
 800c71a:	4654      	mov	r4, sl
 800c71c:	2205      	movs	r2, #5
 800c71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c722:	4858      	ldr	r0, [pc, #352]	; (800c884 <_vfiprintf_r+0x24c>)
 800c724:	f7f3 fd94 	bl	8000250 <memchr>
 800c728:	9a04      	ldr	r2, [sp, #16]
 800c72a:	b9d8      	cbnz	r0, 800c764 <_vfiprintf_r+0x12c>
 800c72c:	06d1      	lsls	r1, r2, #27
 800c72e:	bf44      	itt	mi
 800c730:	2320      	movmi	r3, #32
 800c732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c736:	0713      	lsls	r3, r2, #28
 800c738:	bf44      	itt	mi
 800c73a:	232b      	movmi	r3, #43	; 0x2b
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c740:	f89a 3000 	ldrb.w	r3, [sl]
 800c744:	2b2a      	cmp	r3, #42	; 0x2a
 800c746:	d015      	beq.n	800c774 <_vfiprintf_r+0x13c>
 800c748:	9a07      	ldr	r2, [sp, #28]
 800c74a:	4654      	mov	r4, sl
 800c74c:	2000      	movs	r0, #0
 800c74e:	f04f 0c0a 	mov.w	ip, #10
 800c752:	4621      	mov	r1, r4
 800c754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c758:	3b30      	subs	r3, #48	; 0x30
 800c75a:	2b09      	cmp	r3, #9
 800c75c:	d94e      	bls.n	800c7fc <_vfiprintf_r+0x1c4>
 800c75e:	b1b0      	cbz	r0, 800c78e <_vfiprintf_r+0x156>
 800c760:	9207      	str	r2, [sp, #28]
 800c762:	e014      	b.n	800c78e <_vfiprintf_r+0x156>
 800c764:	eba0 0308 	sub.w	r3, r0, r8
 800c768:	fa09 f303 	lsl.w	r3, r9, r3
 800c76c:	4313      	orrs	r3, r2
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	46a2      	mov	sl, r4
 800c772:	e7d2      	b.n	800c71a <_vfiprintf_r+0xe2>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	1d19      	adds	r1, r3, #4
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	9103      	str	r1, [sp, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bfbb      	ittet	lt
 800c780:	425b      	neglt	r3, r3
 800c782:	f042 0202 	orrlt.w	r2, r2, #2
 800c786:	9307      	strge	r3, [sp, #28]
 800c788:	9307      	strlt	r3, [sp, #28]
 800c78a:	bfb8      	it	lt
 800c78c:	9204      	strlt	r2, [sp, #16]
 800c78e:	7823      	ldrb	r3, [r4, #0]
 800c790:	2b2e      	cmp	r3, #46	; 0x2e
 800c792:	d10c      	bne.n	800c7ae <_vfiprintf_r+0x176>
 800c794:	7863      	ldrb	r3, [r4, #1]
 800c796:	2b2a      	cmp	r3, #42	; 0x2a
 800c798:	d135      	bne.n	800c806 <_vfiprintf_r+0x1ce>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	1d1a      	adds	r2, r3, #4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	9203      	str	r2, [sp, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bfb8      	it	lt
 800c7a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7aa:	3402      	adds	r4, #2
 800c7ac:	9305      	str	r3, [sp, #20]
 800c7ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c894 <_vfiprintf_r+0x25c>
 800c7b2:	7821      	ldrb	r1, [r4, #0]
 800c7b4:	2203      	movs	r2, #3
 800c7b6:	4650      	mov	r0, sl
 800c7b8:	f7f3 fd4a 	bl	8000250 <memchr>
 800c7bc:	b140      	cbz	r0, 800c7d0 <_vfiprintf_r+0x198>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	eba0 000a 	sub.w	r0, r0, sl
 800c7c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	4303      	orrs	r3, r0
 800c7cc:	3401      	adds	r4, #1
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d4:	482c      	ldr	r0, [pc, #176]	; (800c888 <_vfiprintf_r+0x250>)
 800c7d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7da:	2206      	movs	r2, #6
 800c7dc:	f7f3 fd38 	bl	8000250 <memchr>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d03f      	beq.n	800c864 <_vfiprintf_r+0x22c>
 800c7e4:	4b29      	ldr	r3, [pc, #164]	; (800c88c <_vfiprintf_r+0x254>)
 800c7e6:	bb1b      	cbnz	r3, 800c830 <_vfiprintf_r+0x1f8>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	3307      	adds	r3, #7
 800c7ec:	f023 0307 	bic.w	r3, r3, #7
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f6:	443b      	add	r3, r7
 800c7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fa:	e767      	b.n	800c6cc <_vfiprintf_r+0x94>
 800c7fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c800:	460c      	mov	r4, r1
 800c802:	2001      	movs	r0, #1
 800c804:	e7a5      	b.n	800c752 <_vfiprintf_r+0x11a>
 800c806:	2300      	movs	r3, #0
 800c808:	3401      	adds	r4, #1
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	4619      	mov	r1, r3
 800c80e:	f04f 0c0a 	mov.w	ip, #10
 800c812:	4620      	mov	r0, r4
 800c814:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c818:	3a30      	subs	r2, #48	; 0x30
 800c81a:	2a09      	cmp	r2, #9
 800c81c:	d903      	bls.n	800c826 <_vfiprintf_r+0x1ee>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0c5      	beq.n	800c7ae <_vfiprintf_r+0x176>
 800c822:	9105      	str	r1, [sp, #20]
 800c824:	e7c3      	b.n	800c7ae <_vfiprintf_r+0x176>
 800c826:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82a:	4604      	mov	r4, r0
 800c82c:	2301      	movs	r3, #1
 800c82e:	e7f0      	b.n	800c812 <_vfiprintf_r+0x1da>
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	462a      	mov	r2, r5
 800c836:	4b16      	ldr	r3, [pc, #88]	; (800c890 <_vfiprintf_r+0x258>)
 800c838:	a904      	add	r1, sp, #16
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fd fc52 	bl	800a0e4 <_printf_float>
 800c840:	4607      	mov	r7, r0
 800c842:	1c78      	adds	r0, r7, #1
 800c844:	d1d6      	bne.n	800c7f4 <_vfiprintf_r+0x1bc>
 800c846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c848:	07d9      	lsls	r1, r3, #31
 800c84a:	d405      	bmi.n	800c858 <_vfiprintf_r+0x220>
 800c84c:	89ab      	ldrh	r3, [r5, #12]
 800c84e:	059a      	lsls	r2, r3, #22
 800c850:	d402      	bmi.n	800c858 <_vfiprintf_r+0x220>
 800c852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c854:	f7ff f8d8 	bl	800ba08 <__retarget_lock_release_recursive>
 800c858:	89ab      	ldrh	r3, [r5, #12]
 800c85a:	065b      	lsls	r3, r3, #25
 800c85c:	f53f af12 	bmi.w	800c684 <_vfiprintf_r+0x4c>
 800c860:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c862:	e711      	b.n	800c688 <_vfiprintf_r+0x50>
 800c864:	ab03      	add	r3, sp, #12
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	462a      	mov	r2, r5
 800c86a:	4b09      	ldr	r3, [pc, #36]	; (800c890 <_vfiprintf_r+0x258>)
 800c86c:	a904      	add	r1, sp, #16
 800c86e:	4630      	mov	r0, r6
 800c870:	f7fd fedc 	bl	800a62c <_printf_i>
 800c874:	e7e4      	b.n	800c840 <_vfiprintf_r+0x208>
 800c876:	bf00      	nop
 800c878:	0800d2f0 	.word	0x0800d2f0
 800c87c:	0800d310 	.word	0x0800d310
 800c880:	0800d2d0 	.word	0x0800d2d0
 800c884:	0800d48c 	.word	0x0800d48c
 800c888:	0800d496 	.word	0x0800d496
 800c88c:	0800a0e5 	.word	0x0800a0e5
 800c890:	0800c613 	.word	0x0800c613
 800c894:	0800d492 	.word	0x0800d492

0800c898 <_sbrk_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d06      	ldr	r5, [pc, #24]	; (800c8b4 <_sbrk_r+0x1c>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	f7f5 fdfa 	bl	800249c <_sbrk>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_sbrk_r+0x1a>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_sbrk_r+0x1a>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20000758 	.word	0x20000758

0800c8b8 <__sread>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c0:	f000 faca 	bl	800ce58 <_read_r>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	bfab      	itete	ge
 800c8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c8cc:	181b      	addge	r3, r3, r0
 800c8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8d2:	bfac      	ite	ge
 800c8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8d6:	81a3      	strhlt	r3, [r4, #12]
 800c8d8:	bd10      	pop	{r4, pc}

0800c8da <__swrite>:
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	461f      	mov	r7, r3
 800c8e0:	898b      	ldrh	r3, [r1, #12]
 800c8e2:	05db      	lsls	r3, r3, #23
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	4616      	mov	r6, r2
 800c8ea:	d505      	bpl.n	800c8f8 <__swrite+0x1e>
 800c8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f000 f9d0 	bl	800cc98 <_lseek_r>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	4632      	mov	r2, r6
 800c906:	463b      	mov	r3, r7
 800c908:	4628      	mov	r0, r5
 800c90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c90e:	f000 b869 	b.w	800c9e4 <_write_r>

0800c912 <__sseek>:
 800c912:	b510      	push	{r4, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c91a:	f000 f9bd 	bl	800cc98 <_lseek_r>
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	bf15      	itete	ne
 800c924:	6560      	strne	r0, [r4, #84]	; 0x54
 800c926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c92e:	81a3      	strheq	r3, [r4, #12]
 800c930:	bf18      	it	ne
 800c932:	81a3      	strhne	r3, [r4, #12]
 800c934:	bd10      	pop	{r4, pc}

0800c936 <__sclose>:
 800c936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93a:	f000 b8db 	b.w	800caf4 <_close_r>
	...

0800c940 <__swbuf_r>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	460e      	mov	r6, r1
 800c944:	4614      	mov	r4, r2
 800c946:	4605      	mov	r5, r0
 800c948:	b118      	cbz	r0, 800c952 <__swbuf_r+0x12>
 800c94a:	6983      	ldr	r3, [r0, #24]
 800c94c:	b90b      	cbnz	r3, 800c952 <__swbuf_r+0x12>
 800c94e:	f7fe ffa5 	bl	800b89c <__sinit>
 800c952:	4b21      	ldr	r3, [pc, #132]	; (800c9d8 <__swbuf_r+0x98>)
 800c954:	429c      	cmp	r4, r3
 800c956:	d12b      	bne.n	800c9b0 <__swbuf_r+0x70>
 800c958:	686c      	ldr	r4, [r5, #4]
 800c95a:	69a3      	ldr	r3, [r4, #24]
 800c95c:	60a3      	str	r3, [r4, #8]
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	071a      	lsls	r2, r3, #28
 800c962:	d52f      	bpl.n	800c9c4 <__swbuf_r+0x84>
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	b36b      	cbz	r3, 800c9c4 <__swbuf_r+0x84>
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	6820      	ldr	r0, [r4, #0]
 800c96c:	1ac0      	subs	r0, r0, r3
 800c96e:	6963      	ldr	r3, [r4, #20]
 800c970:	b2f6      	uxtb	r6, r6
 800c972:	4283      	cmp	r3, r0
 800c974:	4637      	mov	r7, r6
 800c976:	dc04      	bgt.n	800c982 <__swbuf_r+0x42>
 800c978:	4621      	mov	r1, r4
 800c97a:	4628      	mov	r0, r5
 800c97c:	f000 f950 	bl	800cc20 <_fflush_r>
 800c980:	bb30      	cbnz	r0, 800c9d0 <__swbuf_r+0x90>
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	3b01      	subs	r3, #1
 800c986:	60a3      	str	r3, [r4, #8]
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	6022      	str	r2, [r4, #0]
 800c98e:	701e      	strb	r6, [r3, #0]
 800c990:	6963      	ldr	r3, [r4, #20]
 800c992:	3001      	adds	r0, #1
 800c994:	4283      	cmp	r3, r0
 800c996:	d004      	beq.n	800c9a2 <__swbuf_r+0x62>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	07db      	lsls	r3, r3, #31
 800c99c:	d506      	bpl.n	800c9ac <__swbuf_r+0x6c>
 800c99e:	2e0a      	cmp	r6, #10
 800c9a0:	d104      	bne.n	800c9ac <__swbuf_r+0x6c>
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f000 f93b 	bl	800cc20 <_fflush_r>
 800c9aa:	b988      	cbnz	r0, 800c9d0 <__swbuf_r+0x90>
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <__swbuf_r+0x9c>)
 800c9b2:	429c      	cmp	r4, r3
 800c9b4:	d101      	bne.n	800c9ba <__swbuf_r+0x7a>
 800c9b6:	68ac      	ldr	r4, [r5, #8]
 800c9b8:	e7cf      	b.n	800c95a <__swbuf_r+0x1a>
 800c9ba:	4b09      	ldr	r3, [pc, #36]	; (800c9e0 <__swbuf_r+0xa0>)
 800c9bc:	429c      	cmp	r4, r3
 800c9be:	bf08      	it	eq
 800c9c0:	68ec      	ldreq	r4, [r5, #12]
 800c9c2:	e7ca      	b.n	800c95a <__swbuf_r+0x1a>
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f000 f81e 	bl	800ca08 <__swsetup_r>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d0cb      	beq.n	800c968 <__swbuf_r+0x28>
 800c9d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9d4:	e7ea      	b.n	800c9ac <__swbuf_r+0x6c>
 800c9d6:	bf00      	nop
 800c9d8:	0800d2f0 	.word	0x0800d2f0
 800c9dc:	0800d310 	.word	0x0800d310
 800c9e0:	0800d2d0 	.word	0x0800d2d0

0800c9e4 <_write_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d07      	ldr	r5, [pc, #28]	; (800ca04 <_write_r+0x20>)
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	602a      	str	r2, [r5, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f7f5 fd01 	bl	80023fa <_write>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_write_r+0x1e>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_write_r+0x1e>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	20000758 	.word	0x20000758

0800ca08 <__swsetup_r>:
 800ca08:	4b32      	ldr	r3, [pc, #200]	; (800cad4 <__swsetup_r+0xcc>)
 800ca0a:	b570      	push	{r4, r5, r6, lr}
 800ca0c:	681d      	ldr	r5, [r3, #0]
 800ca0e:	4606      	mov	r6, r0
 800ca10:	460c      	mov	r4, r1
 800ca12:	b125      	cbz	r5, 800ca1e <__swsetup_r+0x16>
 800ca14:	69ab      	ldr	r3, [r5, #24]
 800ca16:	b913      	cbnz	r3, 800ca1e <__swsetup_r+0x16>
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f7fe ff3f 	bl	800b89c <__sinit>
 800ca1e:	4b2e      	ldr	r3, [pc, #184]	; (800cad8 <__swsetup_r+0xd0>)
 800ca20:	429c      	cmp	r4, r3
 800ca22:	d10f      	bne.n	800ca44 <__swsetup_r+0x3c>
 800ca24:	686c      	ldr	r4, [r5, #4]
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca2c:	0719      	lsls	r1, r3, #28
 800ca2e:	d42c      	bmi.n	800ca8a <__swsetup_r+0x82>
 800ca30:	06dd      	lsls	r5, r3, #27
 800ca32:	d411      	bmi.n	800ca58 <__swsetup_r+0x50>
 800ca34:	2309      	movs	r3, #9
 800ca36:	6033      	str	r3, [r6, #0]
 800ca38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	e03e      	b.n	800cac2 <__swsetup_r+0xba>
 800ca44:	4b25      	ldr	r3, [pc, #148]	; (800cadc <__swsetup_r+0xd4>)
 800ca46:	429c      	cmp	r4, r3
 800ca48:	d101      	bne.n	800ca4e <__swsetup_r+0x46>
 800ca4a:	68ac      	ldr	r4, [r5, #8]
 800ca4c:	e7eb      	b.n	800ca26 <__swsetup_r+0x1e>
 800ca4e:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <__swsetup_r+0xd8>)
 800ca50:	429c      	cmp	r4, r3
 800ca52:	bf08      	it	eq
 800ca54:	68ec      	ldreq	r4, [r5, #12]
 800ca56:	e7e6      	b.n	800ca26 <__swsetup_r+0x1e>
 800ca58:	0758      	lsls	r0, r3, #29
 800ca5a:	d512      	bpl.n	800ca82 <__swsetup_r+0x7a>
 800ca5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca5e:	b141      	cbz	r1, 800ca72 <__swsetup_r+0x6a>
 800ca60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d002      	beq.n	800ca6e <__swsetup_r+0x66>
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7ff fb7f 	bl	800c16c <_free_r>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6363      	str	r3, [r4, #52]	; 0x34
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6063      	str	r3, [r4, #4]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f043 0308 	orr.w	r3, r3, #8
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	b94b      	cbnz	r3, 800caa2 <__swsetup_r+0x9a>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca98:	d003      	beq.n	800caa2 <__swsetup_r+0x9a>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f000 f933 	bl	800cd08 <__smakebuf_r>
 800caa2:	89a0      	ldrh	r0, [r4, #12]
 800caa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caa8:	f010 0301 	ands.w	r3, r0, #1
 800caac:	d00a      	beq.n	800cac4 <__swsetup_r+0xbc>
 800caae:	2300      	movs	r3, #0
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	6963      	ldr	r3, [r4, #20]
 800cab4:	425b      	negs	r3, r3
 800cab6:	61a3      	str	r3, [r4, #24]
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b943      	cbnz	r3, 800cace <__swsetup_r+0xc6>
 800cabc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cac0:	d1ba      	bne.n	800ca38 <__swsetup_r+0x30>
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	0781      	lsls	r1, r0, #30
 800cac6:	bf58      	it	pl
 800cac8:	6963      	ldrpl	r3, [r4, #20]
 800caca:	60a3      	str	r3, [r4, #8]
 800cacc:	e7f4      	b.n	800cab8 <__swsetup_r+0xb0>
 800cace:	2000      	movs	r0, #0
 800cad0:	e7f7      	b.n	800cac2 <__swsetup_r+0xba>
 800cad2:	bf00      	nop
 800cad4:	200001cc 	.word	0x200001cc
 800cad8:	0800d2f0 	.word	0x0800d2f0
 800cadc:	0800d310 	.word	0x0800d310
 800cae0:	0800d2d0 	.word	0x0800d2d0

0800cae4 <abort>:
 800cae4:	b508      	push	{r3, lr}
 800cae6:	2006      	movs	r0, #6
 800cae8:	f000 f9f0 	bl	800cecc <raise>
 800caec:	2001      	movs	r0, #1
 800caee:	f7f5 fc5d 	bl	80023ac <_exit>
	...

0800caf4 <_close_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d06      	ldr	r5, [pc, #24]	; (800cb10 <_close_r+0x1c>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	602b      	str	r3, [r5, #0]
 800cb00:	f7f5 fc97 	bl	8002432 <_close>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_close_r+0x1a>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_close_r+0x1a>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	20000758 	.word	0x20000758

0800cb14 <__sflush_r>:
 800cb14:	898a      	ldrh	r2, [r1, #12]
 800cb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	0710      	lsls	r0, r2, #28
 800cb1e:	460c      	mov	r4, r1
 800cb20:	d458      	bmi.n	800cbd4 <__sflush_r+0xc0>
 800cb22:	684b      	ldr	r3, [r1, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dc05      	bgt.n	800cb34 <__sflush_r+0x20>
 800cb28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	dc02      	bgt.n	800cb34 <__sflush_r+0x20>
 800cb2e:	2000      	movs	r0, #0
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb36:	2e00      	cmp	r6, #0
 800cb38:	d0f9      	beq.n	800cb2e <__sflush_r+0x1a>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb40:	682f      	ldr	r7, [r5, #0]
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	d032      	beq.n	800cbac <__sflush_r+0x98>
 800cb46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	075a      	lsls	r2, r3, #29
 800cb4c:	d505      	bpl.n	800cb5a <__sflush_r+0x46>
 800cb4e:	6863      	ldr	r3, [r4, #4]
 800cb50:	1ac0      	subs	r0, r0, r3
 800cb52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb54:	b10b      	cbz	r3, 800cb5a <__sflush_r+0x46>
 800cb56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb58:	1ac0      	subs	r0, r0, r3
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb60:	6a21      	ldr	r1, [r4, #32]
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b0      	blx	r6
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	d106      	bne.n	800cb7a <__sflush_r+0x66>
 800cb6c:	6829      	ldr	r1, [r5, #0]
 800cb6e:	291d      	cmp	r1, #29
 800cb70:	d82c      	bhi.n	800cbcc <__sflush_r+0xb8>
 800cb72:	4a2a      	ldr	r2, [pc, #168]	; (800cc1c <__sflush_r+0x108>)
 800cb74:	40ca      	lsrs	r2, r1
 800cb76:	07d6      	lsls	r6, r2, #31
 800cb78:	d528      	bpl.n	800cbcc <__sflush_r+0xb8>
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	6062      	str	r2, [r4, #4]
 800cb7e:	04d9      	lsls	r1, r3, #19
 800cb80:	6922      	ldr	r2, [r4, #16]
 800cb82:	6022      	str	r2, [r4, #0]
 800cb84:	d504      	bpl.n	800cb90 <__sflush_r+0x7c>
 800cb86:	1c42      	adds	r2, r0, #1
 800cb88:	d101      	bne.n	800cb8e <__sflush_r+0x7a>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b903      	cbnz	r3, 800cb90 <__sflush_r+0x7c>
 800cb8e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb92:	602f      	str	r7, [r5, #0]
 800cb94:	2900      	cmp	r1, #0
 800cb96:	d0ca      	beq.n	800cb2e <__sflush_r+0x1a>
 800cb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <__sflush_r+0x92>
 800cba0:	4628      	mov	r0, r5
 800cba2:	f7ff fae3 	bl	800c16c <_free_r>
 800cba6:	2000      	movs	r0, #0
 800cba8:	6360      	str	r0, [r4, #52]	; 0x34
 800cbaa:	e7c1      	b.n	800cb30 <__sflush_r+0x1c>
 800cbac:	6a21      	ldr	r1, [r4, #32]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b0      	blx	r6
 800cbb4:	1c41      	adds	r1, r0, #1
 800cbb6:	d1c7      	bne.n	800cb48 <__sflush_r+0x34>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0c4      	beq.n	800cb48 <__sflush_r+0x34>
 800cbbe:	2b1d      	cmp	r3, #29
 800cbc0:	d001      	beq.n	800cbc6 <__sflush_r+0xb2>
 800cbc2:	2b16      	cmp	r3, #22
 800cbc4:	d101      	bne.n	800cbca <__sflush_r+0xb6>
 800cbc6:	602f      	str	r7, [r5, #0]
 800cbc8:	e7b1      	b.n	800cb2e <__sflush_r+0x1a>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	e7ad      	b.n	800cb30 <__sflush_r+0x1c>
 800cbd4:	690f      	ldr	r7, [r1, #16]
 800cbd6:	2f00      	cmp	r7, #0
 800cbd8:	d0a9      	beq.n	800cb2e <__sflush_r+0x1a>
 800cbda:	0793      	lsls	r3, r2, #30
 800cbdc:	680e      	ldr	r6, [r1, #0]
 800cbde:	bf08      	it	eq
 800cbe0:	694b      	ldreq	r3, [r1, #20]
 800cbe2:	600f      	str	r7, [r1, #0]
 800cbe4:	bf18      	it	ne
 800cbe6:	2300      	movne	r3, #0
 800cbe8:	eba6 0807 	sub.w	r8, r6, r7
 800cbec:	608b      	str	r3, [r1, #8]
 800cbee:	f1b8 0f00 	cmp.w	r8, #0
 800cbf2:	dd9c      	ble.n	800cb2e <__sflush_r+0x1a>
 800cbf4:	6a21      	ldr	r1, [r4, #32]
 800cbf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbf8:	4643      	mov	r3, r8
 800cbfa:	463a      	mov	r2, r7
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b0      	blx	r6
 800cc00:	2800      	cmp	r0, #0
 800cc02:	dc06      	bgt.n	800cc12 <__sflush_r+0xfe>
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e78e      	b.n	800cb30 <__sflush_r+0x1c>
 800cc12:	4407      	add	r7, r0
 800cc14:	eba8 0800 	sub.w	r8, r8, r0
 800cc18:	e7e9      	b.n	800cbee <__sflush_r+0xda>
 800cc1a:	bf00      	nop
 800cc1c:	20400001 	.word	0x20400001

0800cc20 <_fflush_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	690b      	ldr	r3, [r1, #16]
 800cc24:	4605      	mov	r5, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	b913      	cbnz	r3, 800cc30 <_fflush_r+0x10>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	b118      	cbz	r0, 800cc3a <_fflush_r+0x1a>
 800cc32:	6983      	ldr	r3, [r0, #24]
 800cc34:	b90b      	cbnz	r3, 800cc3a <_fflush_r+0x1a>
 800cc36:	f7fe fe31 	bl	800b89c <__sinit>
 800cc3a:	4b14      	ldr	r3, [pc, #80]	; (800cc8c <_fflush_r+0x6c>)
 800cc3c:	429c      	cmp	r4, r3
 800cc3e:	d11b      	bne.n	800cc78 <_fflush_r+0x58>
 800cc40:	686c      	ldr	r4, [r5, #4]
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0ef      	beq.n	800cc2a <_fflush_r+0xa>
 800cc4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc4c:	07d0      	lsls	r0, r2, #31
 800cc4e:	d404      	bmi.n	800cc5a <_fflush_r+0x3a>
 800cc50:	0599      	lsls	r1, r3, #22
 800cc52:	d402      	bmi.n	800cc5a <_fflush_r+0x3a>
 800cc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc56:	f7fe fed6 	bl	800ba06 <__retarget_lock_acquire_recursive>
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	f7ff ff59 	bl	800cb14 <__sflush_r>
 800cc62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc64:	07da      	lsls	r2, r3, #31
 800cc66:	4605      	mov	r5, r0
 800cc68:	d4e0      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	059b      	lsls	r3, r3, #22
 800cc6e:	d4dd      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc72:	f7fe fec9 	bl	800ba08 <__retarget_lock_release_recursive>
 800cc76:	e7d9      	b.n	800cc2c <_fflush_r+0xc>
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <_fflush_r+0x70>)
 800cc7a:	429c      	cmp	r4, r3
 800cc7c:	d101      	bne.n	800cc82 <_fflush_r+0x62>
 800cc7e:	68ac      	ldr	r4, [r5, #8]
 800cc80:	e7df      	b.n	800cc42 <_fflush_r+0x22>
 800cc82:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <_fflush_r+0x74>)
 800cc84:	429c      	cmp	r4, r3
 800cc86:	bf08      	it	eq
 800cc88:	68ec      	ldreq	r4, [r5, #12]
 800cc8a:	e7da      	b.n	800cc42 <_fflush_r+0x22>
 800cc8c:	0800d2f0 	.word	0x0800d2f0
 800cc90:	0800d310 	.word	0x0800d310
 800cc94:	0800d2d0 	.word	0x0800d2d0

0800cc98 <_lseek_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d07      	ldr	r5, [pc, #28]	; (800ccb8 <_lseek_r+0x20>)
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	4608      	mov	r0, r1
 800cca0:	4611      	mov	r1, r2
 800cca2:	2200      	movs	r2, #0
 800cca4:	602a      	str	r2, [r5, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	f7f5 fbea 	bl	8002480 <_lseek>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d102      	bne.n	800ccb6 <_lseek_r+0x1e>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	b103      	cbz	r3, 800ccb6 <_lseek_r+0x1e>
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	20000758 	.word	0x20000758

0800ccbc <__swhatbuf_r>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	460e      	mov	r6, r1
 800ccc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	b096      	sub	sp, #88	; 0x58
 800ccc8:	4614      	mov	r4, r2
 800ccca:	461d      	mov	r5, r3
 800cccc:	da08      	bge.n	800cce0 <__swhatbuf_r+0x24>
 800ccce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	061a      	lsls	r2, r3, #24
 800ccd8:	d410      	bmi.n	800ccfc <__swhatbuf_r+0x40>
 800ccda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccde:	e00e      	b.n	800ccfe <__swhatbuf_r+0x42>
 800cce0:	466a      	mov	r2, sp
 800cce2:	f000 f91d 	bl	800cf20 <_fstat_r>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	dbf1      	blt.n	800ccce <__swhatbuf_r+0x12>
 800ccea:	9a01      	ldr	r2, [sp, #4]
 800ccec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccf4:	425a      	negs	r2, r3
 800ccf6:	415a      	adcs	r2, r3
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	e7ee      	b.n	800ccda <__swhatbuf_r+0x1e>
 800ccfc:	2340      	movs	r3, #64	; 0x40
 800ccfe:	2000      	movs	r0, #0
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	b016      	add	sp, #88	; 0x58
 800cd04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd08 <__smakebuf_r>:
 800cd08:	898b      	ldrh	r3, [r1, #12]
 800cd0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd0c:	079d      	lsls	r5, r3, #30
 800cd0e:	4606      	mov	r6, r0
 800cd10:	460c      	mov	r4, r1
 800cd12:	d507      	bpl.n	800cd24 <__smakebuf_r+0x1c>
 800cd14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	6123      	str	r3, [r4, #16]
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	6163      	str	r3, [r4, #20]
 800cd20:	b002      	add	sp, #8
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	ab01      	add	r3, sp, #4
 800cd26:	466a      	mov	r2, sp
 800cd28:	f7ff ffc8 	bl	800ccbc <__swhatbuf_r>
 800cd2c:	9900      	ldr	r1, [sp, #0]
 800cd2e:	4605      	mov	r5, r0
 800cd30:	4630      	mov	r0, r6
 800cd32:	f7ff fa87 	bl	800c244 <_malloc_r>
 800cd36:	b948      	cbnz	r0, 800cd4c <__smakebuf_r+0x44>
 800cd38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3c:	059a      	lsls	r2, r3, #22
 800cd3e:	d4ef      	bmi.n	800cd20 <__smakebuf_r+0x18>
 800cd40:	f023 0303 	bic.w	r3, r3, #3
 800cd44:	f043 0302 	orr.w	r3, r3, #2
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	e7e3      	b.n	800cd14 <__smakebuf_r+0xc>
 800cd4c:	4b0d      	ldr	r3, [pc, #52]	; (800cd84 <__smakebuf_r+0x7c>)
 800cd4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd58:	81a3      	strh	r3, [r4, #12]
 800cd5a:	9b00      	ldr	r3, [sp, #0]
 800cd5c:	6163      	str	r3, [r4, #20]
 800cd5e:	9b01      	ldr	r3, [sp, #4]
 800cd60:	6120      	str	r0, [r4, #16]
 800cd62:	b15b      	cbz	r3, 800cd7c <__smakebuf_r+0x74>
 800cd64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f000 f8eb 	bl	800cf44 <_isatty_r>
 800cd6e:	b128      	cbz	r0, 800cd7c <__smakebuf_r+0x74>
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	f043 0301 	orr.w	r3, r3, #1
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	89a0      	ldrh	r0, [r4, #12]
 800cd7e:	4305      	orrs	r5, r0
 800cd80:	81a5      	strh	r5, [r4, #12]
 800cd82:	e7cd      	b.n	800cd20 <__smakebuf_r+0x18>
 800cd84:	0800b835 	.word	0x0800b835

0800cd88 <__ascii_mbtowc>:
 800cd88:	b082      	sub	sp, #8
 800cd8a:	b901      	cbnz	r1, 800cd8e <__ascii_mbtowc+0x6>
 800cd8c:	a901      	add	r1, sp, #4
 800cd8e:	b142      	cbz	r2, 800cda2 <__ascii_mbtowc+0x1a>
 800cd90:	b14b      	cbz	r3, 800cda6 <__ascii_mbtowc+0x1e>
 800cd92:	7813      	ldrb	r3, [r2, #0]
 800cd94:	600b      	str	r3, [r1, #0]
 800cd96:	7812      	ldrb	r2, [r2, #0]
 800cd98:	1e10      	subs	r0, r2, #0
 800cd9a:	bf18      	it	ne
 800cd9c:	2001      	movne	r0, #1
 800cd9e:	b002      	add	sp, #8
 800cda0:	4770      	bx	lr
 800cda2:	4610      	mov	r0, r2
 800cda4:	e7fb      	b.n	800cd9e <__ascii_mbtowc+0x16>
 800cda6:	f06f 0001 	mvn.w	r0, #1
 800cdaa:	e7f8      	b.n	800cd9e <__ascii_mbtowc+0x16>

0800cdac <memmove>:
 800cdac:	4288      	cmp	r0, r1
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	eb01 0402 	add.w	r4, r1, r2
 800cdb4:	d902      	bls.n	800cdbc <memmove+0x10>
 800cdb6:	4284      	cmp	r4, r0
 800cdb8:	4623      	mov	r3, r4
 800cdba:	d807      	bhi.n	800cdcc <memmove+0x20>
 800cdbc:	1e43      	subs	r3, r0, #1
 800cdbe:	42a1      	cmp	r1, r4
 800cdc0:	d008      	beq.n	800cdd4 <memmove+0x28>
 800cdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdca:	e7f8      	b.n	800cdbe <memmove+0x12>
 800cdcc:	4402      	add	r2, r0
 800cdce:	4601      	mov	r1, r0
 800cdd0:	428a      	cmp	r2, r1
 800cdd2:	d100      	bne.n	800cdd6 <memmove+0x2a>
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdde:	e7f7      	b.n	800cdd0 <memmove+0x24>

0800cde0 <__malloc_lock>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__malloc_lock+0x8>)
 800cde2:	f7fe be10 	b.w	800ba06 <__retarget_lock_acquire_recursive>
 800cde6:	bf00      	nop
 800cde8:	2000074c 	.word	0x2000074c

0800cdec <__malloc_unlock>:
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <__malloc_unlock+0x8>)
 800cdee:	f7fe be0b 	b.w	800ba08 <__retarget_lock_release_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	2000074c 	.word	0x2000074c

0800cdf8 <_realloc_r>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4614      	mov	r4, r2
 800ce00:	460e      	mov	r6, r1
 800ce02:	b921      	cbnz	r1, 800ce0e <_realloc_r+0x16>
 800ce04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	4611      	mov	r1, r2
 800ce0a:	f7ff ba1b 	b.w	800c244 <_malloc_r>
 800ce0e:	b92a      	cbnz	r2, 800ce1c <_realloc_r+0x24>
 800ce10:	f7ff f9ac 	bl	800c16c <_free_r>
 800ce14:	4625      	mov	r5, r4
 800ce16:	4628      	mov	r0, r5
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	f000 f8a2 	bl	800cf64 <_malloc_usable_size_r>
 800ce20:	4284      	cmp	r4, r0
 800ce22:	4607      	mov	r7, r0
 800ce24:	d802      	bhi.n	800ce2c <_realloc_r+0x34>
 800ce26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce2a:	d812      	bhi.n	800ce52 <_realloc_r+0x5a>
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	4640      	mov	r0, r8
 800ce30:	f7ff fa08 	bl	800c244 <_malloc_r>
 800ce34:	4605      	mov	r5, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d0ed      	beq.n	800ce16 <_realloc_r+0x1e>
 800ce3a:	42bc      	cmp	r4, r7
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4631      	mov	r1, r6
 800ce40:	bf28      	it	cs
 800ce42:	463a      	movcs	r2, r7
 800ce44:	f7fe fdea 	bl	800ba1c <memcpy>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	f7ff f98e 	bl	800c16c <_free_r>
 800ce50:	e7e1      	b.n	800ce16 <_realloc_r+0x1e>
 800ce52:	4635      	mov	r5, r6
 800ce54:	e7df      	b.n	800ce16 <_realloc_r+0x1e>
	...

0800ce58 <_read_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d07      	ldr	r5, [pc, #28]	; (800ce78 <_read_r+0x20>)
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	4608      	mov	r0, r1
 800ce60:	4611      	mov	r1, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	f7f5 faaa 	bl	80023c0 <_read>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_read_r+0x1e>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_read_r+0x1e>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	20000758 	.word	0x20000758

0800ce7c <_raise_r>:
 800ce7c:	291f      	cmp	r1, #31
 800ce7e:	b538      	push	{r3, r4, r5, lr}
 800ce80:	4604      	mov	r4, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	d904      	bls.n	800ce90 <_raise_r+0x14>
 800ce86:	2316      	movs	r3, #22
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce92:	b112      	cbz	r2, 800ce9a <_raise_r+0x1e>
 800ce94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce98:	b94b      	cbnz	r3, 800ceae <_raise_r+0x32>
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f830 	bl	800cf00 <_getpid_r>
 800cea0:	462a      	mov	r2, r5
 800cea2:	4601      	mov	r1, r0
 800cea4:	4620      	mov	r0, r4
 800cea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceaa:	f000 b817 	b.w	800cedc <_kill_r>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d00a      	beq.n	800cec8 <_raise_r+0x4c>
 800ceb2:	1c59      	adds	r1, r3, #1
 800ceb4:	d103      	bne.n	800cebe <_raise_r+0x42>
 800ceb6:	2316      	movs	r3, #22
 800ceb8:	6003      	str	r3, [r0, #0]
 800ceba:	2001      	movs	r0, #1
 800cebc:	e7e7      	b.n	800ce8e <_raise_r+0x12>
 800cebe:	2400      	movs	r4, #0
 800cec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cec4:	4628      	mov	r0, r5
 800cec6:	4798      	blx	r3
 800cec8:	2000      	movs	r0, #0
 800ceca:	e7e0      	b.n	800ce8e <_raise_r+0x12>

0800cecc <raise>:
 800cecc:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <raise+0xc>)
 800cece:	4601      	mov	r1, r0
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	f7ff bfd3 	b.w	800ce7c <_raise_r>
 800ced6:	bf00      	nop
 800ced8:	200001cc 	.word	0x200001cc

0800cedc <_kill_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d07      	ldr	r5, [pc, #28]	; (800cefc <_kill_r+0x20>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	4611      	mov	r1, r2
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	f7f5 fa4f 	bl	800238c <_kill>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	d102      	bne.n	800cef8 <_kill_r+0x1c>
 800cef2:	682b      	ldr	r3, [r5, #0]
 800cef4:	b103      	cbz	r3, 800cef8 <_kill_r+0x1c>
 800cef6:	6023      	str	r3, [r4, #0]
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	bf00      	nop
 800cefc:	20000758 	.word	0x20000758

0800cf00 <_getpid_r>:
 800cf00:	f7f5 ba3c 	b.w	800237c <_getpid>

0800cf04 <__ascii_wctomb>:
 800cf04:	b149      	cbz	r1, 800cf1a <__ascii_wctomb+0x16>
 800cf06:	2aff      	cmp	r2, #255	; 0xff
 800cf08:	bf85      	ittet	hi
 800cf0a:	238a      	movhi	r3, #138	; 0x8a
 800cf0c:	6003      	strhi	r3, [r0, #0]
 800cf0e:	700a      	strbls	r2, [r1, #0]
 800cf10:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf14:	bf98      	it	ls
 800cf16:	2001      	movls	r0, #1
 800cf18:	4770      	bx	lr
 800cf1a:	4608      	mov	r0, r1
 800cf1c:	4770      	bx	lr
	...

0800cf20 <_fstat_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_fstat_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	f7f5 fa8c 	bl	800244a <_fstat>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_fstat_r+0x1c>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_fstat_r+0x1c>
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000758 	.word	0x20000758

0800cf44 <_isatty_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_isatty_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f5 fa8b 	bl	800246a <_isatty>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_isatty_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_isatty_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000758 	.word	0x20000758

0800cf64 <_malloc_usable_size_r>:
 800cf64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf68:	1f18      	subs	r0, r3, #4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bfbc      	itt	lt
 800cf6e:	580b      	ldrlt	r3, [r1, r0]
 800cf70:	18c0      	addlt	r0, r0, r3
 800cf72:	4770      	bx	lr

0800cf74 <_init>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr

0800cf80 <_fini>:
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf82:	bf00      	nop
 800cf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf86:	bc08      	pop	{r3}
 800cf88:	469e      	mov	lr, r3
 800cf8a:	4770      	bx	lr
