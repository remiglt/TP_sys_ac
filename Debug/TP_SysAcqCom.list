
TP_SysAcqCom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac4  08003ac4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003acc  08003acc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000008c  08003b60  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003b60  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c770  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a56  00000000  00000000  0002c82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ed0  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b44a  00000000  00000000  00053340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5837  00000000  00000000  0005e78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000250c  00000000  00000000  00144014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a6c 	.word	0x08003a6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000090 	.word	0x20000090
 8000214:	08003a6c 	.word	0x08003a6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09c      	sub	sp, #112	; 0x70
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	66fb      	str	r3, [r7, #108]	; 0x6c
	char*		token;
	int 		newCmdReady = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa4e 	bl	80009ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f83b 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8d1 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f883 	bl	8000640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2224      	movs	r2, #36	; 0x24
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fa8b 	bl	8003a5c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	2240      	movs	r2, #64	; 0x40
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fa84 	bl	8003a5c <memset>
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0x78>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800055a:	2240      	movs	r2, #64	; 0x40
 800055c:	2100      	movs	r1, #0
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0x7c>)
 8000560:	f003 fa7c 	bl	8003a5c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000564:	2201      	movs	r2, #1
 8000566:	490b      	ldr	r1, [pc, #44]	; (8000594 <main+0x78>)
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <main+0x80>)
 800056a:	f001 feab 	bl	80022c4 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f000 fa9c 	bl	8000aac <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	2266      	movs	r2, #102	; 0x66
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <main+0x84>)
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <main+0x80>)
 800057e:	f001 fe0b 	bl	8002198 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2218      	movs	r2, #24
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <main+0x88>)
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <main+0x80>)
 800058c:	f001 fe04 	bl	8002198 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x74>
 8000592:	bf00      	nop
 8000594:	2000013c 	.word	0x2000013c
 8000598:	20000140 	.word	0x20000140
 800059c:	200000a8 	.word	0x200000a8
 80005a0:	20000018 	.word	0x20000018
 80005a4:	20000000 	.word	0x20000000

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	; 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fa50 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 fd5e 	bl	800108c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ea:	2355      	movs	r3, #85	; 0x55
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fdf8 	bl	80011f4 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060a:	f000 f8ef 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f8fc 	bl	8001824 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000632:	f000 f8db 	bl	80007ec <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000646:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800068a:	f001 fd35 	bl	80020f8 <HAL_UART_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f8aa 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800069c:	f003 f8ef 	bl	800387e <HAL_UARTEx_SetTxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f8a1 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 80006ae:	f003 f924 	bl	80038fa <HAL_UARTEx_SetRxFifoThreshold>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f898 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 80006be:	f003 f8a5 	bl	800380c <HAL_UARTEx_DisableFifoMode>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f890 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000a8 	.word	0x200000a8
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <MX_GPIO_Init+0xe0>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <MX_GPIO_Init+0xe0>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_GPIO_Init+0xe0>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_GPIO_Init+0xe0>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <MX_GPIO_Init+0xe0>)
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_GPIO_Init+0xe0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_GPIO_Init+0xe0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <MX_GPIO_Init+0xe0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_GPIO_Init+0xe0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fc69 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4818      	ldr	r0, [pc, #96]	; (80007bc <MX_GPIO_Init+0xe4>)
 800075a:	f000 fad9 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 faca 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800077c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800078e:	2306      	movs	r3, #6
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 fab8 	bl	8000d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2028      	movs	r0, #40	; 0x28
 80007a6:	f000 fa7e 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 fa95 	bl	8000cda <HAL_NVIC_EnableIRQ>

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000800 	.word	0x48000800

080007c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_UART_RxCpltCallback+0x20>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80007ce:	2201      	movs	r2, #1
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <HAL_UART_RxCpltCallback+0x24>)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_UART_RxCpltCallback+0x28>)
 80007d4:	f001 fd76 	bl	80022c4 <HAL_UART_Receive_IT>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000138 	.word	0x20000138
 80007e4:	2000013c 	.word	0x2000013c
 80007e8:	200000a8 	.word	0x200000a8

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	; 0x60
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800082e:	f000 fcd1 	bl	80011d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09e      	sub	sp, #120	; 0x78
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2254      	movs	r2, #84	; 0x54
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f003 f8fb 	bl	8003a5c <memset>
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <HAL_UART_MspInit+0xa8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d136      	bne.n	80008de <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f9ed 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000888:	f7ff ffb0 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_UART_MspInit+0xac>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_UART_MspInit+0xac>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_UART_MspInit+0xac>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_UART_MspInit+0xac>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_UART_MspInit+0xac>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_UART_MspInit+0xac>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008bc:	230c      	movs	r3, #12
 80008be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008cc:	2307      	movs	r3, #7
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fa19 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3778      	adds	r7, #120	; 0x78
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40021000 	.word	0x40021000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f898 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800094c:	f000 fb7a 	bl	8001044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f003 f835 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fdb7 	bl	800051c <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80009bc:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 80009c0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80009c4:	20000184 	.word	0x20000184

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>

080009ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f95b 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f80e 	bl	80009fc <HAL_InitTick>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e001      	b.n	80009f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ec:	f7ff ff04 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f0:	79fb      	ldrb	r3, [r7, #7]

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_InitTick+0x68>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d022      	beq.n	8000a56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_InitTick+0x6c>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_InitTick+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f966 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10f      	bne.n	8000a50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	d809      	bhi.n	8000a4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a36:	2200      	movs	r2, #0
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3e:	f000 f932 	bl	8000ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_InitTick+0x70>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e007      	b.n	8000a5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	e004      	b.n	8000a5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e001      	b.n	8000a5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000088 	.word	0x20000088
 8000a68:	20000080 	.word	0x20000080
 8000a6c:	20000084 	.word	0x20000084

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x1c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_IncTick+0x1c>)
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000180 	.word	0x20000180
 8000a90:	20000088 	.word	0x20000088

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000180 	.word	0x20000180

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff ffee 	bl	8000a94 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d004      	beq.n	8000ad0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_Delay+0x40>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad0:	bf00      	nop
 8000ad2:	f7ff ffdf 	bl	8000a94 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8f7      	bhi.n	8000ad2 <HAL_Delay+0x26>
  {
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000088 	.word	0x20000088

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <__NVIC_EnableIRQ+0x38>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff8e 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff29 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff40 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff33 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa4 	bl	8000c4c <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d1e:	e15a      	b.n	8000fd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 814c 	beq.w	8000fd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	6939      	ldr	r1, [r7, #16]
 8000e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0203 	and.w	r2, r3, #3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80a6 	beq.w	8000fd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e88:	4a5a      	ldr	r2, [pc, #360]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e90:	4b58      	ldr	r3, [pc, #352]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9c:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec6:	d01f      	beq.n	8000f08 <HAL_GPIO_Init+0x1f8>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1f4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1f0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1ec>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1e4>
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	e00a      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	e008      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e004      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1a:	4937      	ldr	r1, [pc, #220]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4c:	4a30      	ldr	r2, [pc, #192]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f76:	4a26      	ldr	r2, [pc, #152]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f ae9d 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000800 	.word	0x48000800
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48001000 	.word	0x48001000
 800100c:	48001400 	.word	0x48001400
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f806 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d141      	bne.n	800111e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a6:	d131      	bne.n	800110c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c0:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2232      	movs	r2, #50	; 0x32
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9b      	lsrs	r3, r3, #18
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010de:	e002      	b.n	80010e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d102      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f2      	bne.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	d158      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e057      	b.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001112:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800111c:	e04d      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001124:	d141      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800112e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001132:	d131      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114c:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2232      	movs	r2, #50	; 0x32
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	0c9b      	lsrs	r3, r3, #18
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116a:	e002      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3b01      	subs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d102      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f2      	bne.n	800116c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001192:	d112      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e011      	b.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011a8:	e007      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40007000 	.word	0x40007000
 80011cc:	20000080 	.word	0x20000080
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e2:	6093      	str	r3, [r2, #8]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e306      	b.n	8001814 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001212:	4b97      	ldr	r3, [pc, #604]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121c:	4b94      	ldr	r3, [pc, #592]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b0c      	cmp	r3, #12
 800122a:	d102      	bne.n	8001232 <HAL_RCC_OscConfig+0x3e>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d002      	beq.n	8001238 <HAL_RCC_OscConfig+0x44>
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d05b      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d157      	bne.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e2e1      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x74>
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a84      	ldr	r2, [pc, #528]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7e      	ldr	r2, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7b      	ldr	r2, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 800128c:	4b78      	ldr	r3, [pc, #480]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a77      	ldr	r2, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b75      	ldr	r3, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a74      	ldr	r2, [pc, #464]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbf2 	bl	8000a94 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbee 	bl	8000a94 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e2a6      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c6:	4b6a      	ldr	r3, [pc, #424]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fbde 	bl	8000a94 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fbda 	bl	8000a94 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e292      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d075      	beq.n	80013f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001314:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d102      	bne.n	800132a <HAL_RCC_OscConfig+0x136>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d002      	beq.n	8001330 <HAL_RCC_OscConfig+0x13c>
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d11f      	bne.n	8001370 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x154>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e265      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	4946      	ldr	r1, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fb4b 	bl	80009fc <HAL_InitTick>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d043      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e251      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d023      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb86 	bl	8000a94 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb82 	bl	8000a94 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e23a      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	061b      	lsls	r3, r3, #24
 80013b8:	492d      	ldr	r1, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e01a      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb62 	bl	8000a94 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb5e 	bl	8000a94 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e216      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e0>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d041      	beq.n	8001486 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01c      	beq.n	8001444 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff fb3b 	bl	8000a94 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fb37 	bl	8000a94 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1ef      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ef      	beq.n	8001422 <HAL_RCC_OscConfig+0x22e>
 8001442:	e020      	b.n	8001486 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fb1e 	bl	8000a94 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145a:	e00d      	b.n	8001478 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fb1a 	bl	8000a94 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d906      	bls.n	8001478 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1d2      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	20000084 	.word	0x20000084
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ea      	bne.n	800145c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80a6 	beq.w	80015e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2b4>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x2b6>
 80014a8:	2300      	movs	r3, #0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00d      	beq.n	80014ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ca:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fad7 	bl	8000a94 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fad3 	bl	8000a94 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e18b      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_RCC_OscConfig+0x32e>
 8001510:	4b66      	ldr	r3, [pc, #408]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001516:	4a65      	ldr	r2, [pc, #404]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001520:	e024      	b.n	800156c <HAL_RCC_OscConfig+0x378>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d110      	bne.n	800154c <HAL_RCC_OscConfig+0x358>
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800152c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001530:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001540:	4a5a      	ldr	r2, [pc, #360]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154a:	e00f      	b.n	800156c <HAL_RCC_OscConfig+0x378>
 800154c:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001552:	4a56      	ldr	r2, [pc, #344]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d016      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fa8e 	bl	8000a94 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fa8a 	bl	8000a94 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e140      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ed      	beq.n	800157c <HAL_RCC_OscConfig+0x388>
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa77 	bl	8000a94 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa73 	bl	8000a94 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e129      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ed      	bne.n	80015aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a34      	ldr	r2, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03c      	beq.n	8001666 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80015f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fa:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fa46 	bl	8000a94 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160c:	f7ff fa42 	bl	8000a94 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0fa      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ef      	beq.n	800160c <HAL_RCC_OscConfig+0x418>
 800162c:	e01b      	b.n	8001666 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff fa29 	bl	8000a94 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001646:	f7ff fa25 	bl	8000a94 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0dd      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800165a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ef      	bne.n	8001646 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80d1 	beq.w	8001812 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b0c      	cmp	r3, #12
 800167a:	f000 808b 	beq.w	8001794 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d15e      	bne.n	8001744 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x4b8>)
 800168c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff f9ff 	bl	8000a94 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001698:	e00c      	b.n	80016b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff f9fb 	bl	8000a94 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d905      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0b3      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_OscConfig+0x628>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ec      	bne.n	800169a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x628>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x62c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6a11      	ldr	r1, [r2, #32]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016d0:	3a01      	subs	r2, #1
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016da:	0212      	lsls	r2, r2, #8
 80016dc:	4311      	orrs	r1, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016e2:	0852      	lsrs	r2, r2, #1
 80016e4:	3a01      	subs	r2, #1
 80016e6:	0552      	lsls	r2, r2, #21
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0652      	lsls	r2, r2, #25
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016fa:	06d2      	lsls	r2, r2, #27
 80016fc:	430a      	orrs	r2, r1
 80016fe:	4947      	ldr	r1, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a44      	ldr	r2, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x628>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001710:	4b42      	ldr	r3, [pc, #264]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a41      	ldr	r2, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff f9ba 	bl	8000a94 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f9b6 	bl	8000a94 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e06e      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x530>
 8001742:	e066      	b.n	8001812 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001744:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a34      	ldr	r2, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x628>)
 800174a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_RCC_OscConfig+0x628>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001762:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff f992 	bl	8000a94 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f98e 	bl	8000a94 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e046      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x628>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x580>
 8001792:	e03e      	b.n	8001812 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e039      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_RCC_OscConfig+0x628>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d12c      	bne.n	800180e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	3b01      	subs	r3, #1
 80017c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d123      	bne.n	800180e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d11b      	bne.n	800180e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d113      	bne.n	800180e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d109      	bne.n	800180e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	019f800c 	.word	0x019f800c

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e11e      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b91      	ldr	r3, [pc, #580]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b8e      	ldr	r3, [pc, #568]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 020f 	bic.w	r2, r3, #15
 8001852:	498c      	ldr	r1, [pc, #560]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e106      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d073      	beq.n	8001960 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d129      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001880:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0f4      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001890:	f000 f99e 	bl	8001bd0 <RCC_GetSysClockFreqFromPLLSource>
 8001894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4a7c      	ldr	r2, [pc, #496]	; (8001a8c <HAL_RCC_ClockConfig+0x268>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d93f      	bls.n	800191e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d033      	beq.n	800191e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12f      	bne.n	800191e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018be:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018c6:	4a70      	ldr	r2, [pc, #448]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e024      	b.n	800191e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0c6      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0be      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018fc:	f000 f8ce 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4a61      	ldr	r2, [pc, #388]	; (8001a8c <HAL_RCC_ClockConfig+0x268>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d909      	bls.n	800191e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001912:	4a5d      	ldr	r2, [pc, #372]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4957      	ldr	r1, [pc, #348]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001930:	f7ff f8b0 	bl	8000a94 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff f8ac 	bl	8000a94 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e095      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d023      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a42      	ldr	r2, [pc, #264]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 800197e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001982:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001990:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001998:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 800199a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b80      	cmp	r3, #128	; 0x80
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 80019c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d21d      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 020f 	bic.w	r2, r3, #15
 80019dc:	4929      	ldr	r1, [pc, #164]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f856 	bl	8000a94 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f852 	bl	8000a94 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e03b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x260>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1ed      	bne.n	80019ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4917      	ldr	r1, [pc, #92]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490f      	ldr	r1, [pc, #60]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4e:	f000 f825 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_RCC_ClockConfig+0x264>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <HAL_RCC_ClockConfig+0x26c>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x270>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe ffc2 	bl	80009fc <HAL_InitTick>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	04c4b400 	.word	0x04c4b400
 8001a90:	08003a84 	.word	0x08003a84
 8001a94:	20000080 	.word	0x20000080
 8001a98:	20000084 	.word	0x20000084

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e047      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	e03e      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d136      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d10c      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001af0:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afa:	68d2      	ldr	r2, [r2, #12]
 8001afc:	0a12      	lsrs	r2, r2, #8
 8001afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
      break;
 8001b08:	e00c      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b14:	68d2      	ldr	r2, [r2, #12]
 8001b16:	0a12      	lsrs	r2, r2, #8
 8001b18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
      break;
 8001b22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0e5b      	lsrs	r3, r3, #25
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	e001      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b44:	693b      	ldr	r3, [r7, #16]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	016e3600 	.word	0x016e3600

08001b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000080 	.word	0x20000080

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08003a94 	.word	0x08003a94

08001ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ba8:	f7ff ffda 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0adb      	lsrs	r3, r3, #11
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4904      	ldr	r1, [pc, #16]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08003a94 	.word	0x08003a94

08001bd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d10c      	bne.n	8001c0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bfe:	68d2      	ldr	r2, [r2, #12]
 8001c00:	0a12      	lsrs	r2, r2, #8
 8001c02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
    break;
 8001c0c:	e00c      	b.n	8001c28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	0a12      	lsrs	r2, r2, #8
 8001c1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    break;
 8001c26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0e5b      	lsrs	r3, r3, #25
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000
 8001c54:	016e3600 	.word	0x016e3600
 8001c58:	00f42400 	.word	0x00f42400

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c64:	2300      	movs	r3, #0
 8001c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8098 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cb2:	f7fe feef 	bl	8000a94 <HAL_GetTick>
 8001cb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb8:	e009      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7fe feeb 	bl	8000a94 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d902      	bls.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	74fb      	strb	r3, [r7, #19]
        break;
 8001ccc:	e005      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ef      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d159      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01e      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d019      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe feab 	bl	8000a94 <HAL_GetTick>
 8001d3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d40:	e00b      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe fea7 	bl	8000a94 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d902      	bls.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	74fb      	strb	r3, [r7, #19]
            break;
 8001d58:	e006      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ec      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d68:	7cfb      	ldrb	r3, [r7, #19]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d84:	e008      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	74bb      	strb	r3, [r7, #18]
 8001d8a:	e005      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d98:	7c7b      	ldrb	r3, [r7, #17]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9e:	4ba7      	ldr	r3, [pc, #668]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4aa6      	ldr	r2, [pc, #664]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db6:	4ba1      	ldr	r3, [pc, #644]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbc:	f023 0203 	bic.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	499d      	ldr	r1, [pc, #628]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd8:	4b98      	ldr	r3, [pc, #608]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f023 020c 	bic.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4995      	ldr	r1, [pc, #596]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dfa:	4b90      	ldr	r3, [pc, #576]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	498c      	ldr	r1, [pc, #560]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e1c:	4b87      	ldr	r3, [pc, #540]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4984      	ldr	r1, [pc, #528]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	497b      	ldr	r1, [pc, #492]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e60:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4973      	ldr	r1, [pc, #460]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e82:	4b6e      	ldr	r3, [pc, #440]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	496a      	ldr	r1, [pc, #424]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea4:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4962      	ldr	r1, [pc, #392]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	4959      	ldr	r1, [pc, #356]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ee8:	4b54      	ldr	r3, [pc, #336]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	4951      	ldr	r1, [pc, #324]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	4948      	ldr	r1, [pc, #288]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4940      	ldr	r1, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d015      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	4932      	ldr	r1, [pc, #200]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	4924      	ldr	r1, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202a:	d109      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a02      	ldr	r2, [pc, #8]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
 8002038:	e002      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4926      	ldr	r1, [pc, #152]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800206a:	d105      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d105      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020da:	d105      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e042      	b.n	8002190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe fb8f 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2224      	movs	r2, #36	; 0x24
 8002126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f92e 	bl	800239c <UART_SetConfig>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e022      	b.n	8002190 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fc1e 	bl	8002994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fca5 	bl	8002ad8 <UART_CheckIdleState>
 800218e:	4603      	mov	r3, r0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 8083 	bne.w	80022ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_UART_Transmit+0x28>
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e07b      	b.n	80022bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Transmit+0x3a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e074      	b.n	80022bc <HAL_UART_Transmit+0x124>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2221      	movs	r2, #33	; 0x21
 80021e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ea:	f7fe fc53 	bl	8000a94 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Transmit+0x84>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800222c:	e02c      	b.n	8002288 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fc98 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e039      	b.n	80022bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1cc      	bne.n	800222e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2200      	movs	r2, #0
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fc65 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e006      	b.n	80022bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d142      	bne.n	8002362 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_UART_Receive_IT+0x24>
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e03b      	b.n	8002364 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Receive_IT+0x36>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e034      	b.n	8002364 <HAL_UART_Receive_IT+0xa0>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_UART_Receive_IT+0xa8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d018      	beq.n	8002352 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	613b      	str	r3, [r7, #16]
   return(result);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002342:	69f9      	ldr	r1, [r7, #28]
 8002344:	6a3a      	ldr	r2, [r7, #32]
 8002346:	e841 2300 	strex	r3, r2, [r1]
 800234a:	61bb      	str	r3, [r7, #24]
   return(result);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e6      	bne.n	8002320 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	461a      	mov	r2, r3
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fcd1 	bl	8002d00 <UART_Start_Receive_IT>
 800235e:	4603      	mov	r3, r0
 8002360:	e000      	b.n	8002364 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40008000 	.word	0x40008000

08002370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b08c      	sub	sp, #48	; 0x30
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4baa      	ldr	r3, [pc, #680]	; (8002674 <UART_SetConfig+0x2d8>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a9f      	ldr	r2, [pc, #636]	; (8002678 <UART_SetConfig+0x2dc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002404:	4313      	orrs	r3, r2
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002412:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800241c:	430b      	orrs	r3, r1
 800241e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f023 010f 	bic.w	r1, r3, #15
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a90      	ldr	r2, [pc, #576]	; (800267c <UART_SetConfig+0x2e0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d125      	bne.n	800248c <UART_SetConfig+0xf0>
 8002440:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <UART_SetConfig+0x2e4>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d81a      	bhi.n	8002484 <UART_SetConfig+0xe8>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <UART_SetConfig+0xb8>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002465 	.word	0x08002465
 8002458:	08002475 	.word	0x08002475
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247d 	.word	0x0800247d
 8002464:	2301      	movs	r3, #1
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800246a:	e116      	b.n	800269a <UART_SetConfig+0x2fe>
 800246c:	2302      	movs	r3, #2
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002472:	e112      	b.n	800269a <UART_SetConfig+0x2fe>
 8002474:	2304      	movs	r3, #4
 8002476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800247a:	e10e      	b.n	800269a <UART_SetConfig+0x2fe>
 800247c:	2308      	movs	r3, #8
 800247e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002482:	e10a      	b.n	800269a <UART_SetConfig+0x2fe>
 8002484:	2310      	movs	r3, #16
 8002486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800248a:	e106      	b.n	800269a <UART_SetConfig+0x2fe>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7c      	ldr	r2, [pc, #496]	; (8002684 <UART_SetConfig+0x2e8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d138      	bne.n	8002508 <UART_SetConfig+0x16c>
 8002496:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <UART_SetConfig+0x2e4>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d82d      	bhi.n	8002500 <UART_SetConfig+0x164>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <UART_SetConfig+0x110>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024e1 	.word	0x080024e1
 80024b0:	08002501 	.word	0x08002501
 80024b4:	08002501 	.word	0x08002501
 80024b8:	08002501 	.word	0x08002501
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002501 	.word	0x08002501
 80024c4:	08002501 	.word	0x08002501
 80024c8:	08002501 	.word	0x08002501
 80024cc:	080024e9 	.word	0x080024e9
 80024d0:	08002501 	.word	0x08002501
 80024d4:	08002501 	.word	0x08002501
 80024d8:	08002501 	.word	0x08002501
 80024dc:	080024f9 	.word	0x080024f9
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024e6:	e0d8      	b.n	800269a <UART_SetConfig+0x2fe>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ee:	e0d4      	b.n	800269a <UART_SetConfig+0x2fe>
 80024f0:	2304      	movs	r3, #4
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024f6:	e0d0      	b.n	800269a <UART_SetConfig+0x2fe>
 80024f8:	2308      	movs	r3, #8
 80024fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024fe:	e0cc      	b.n	800269a <UART_SetConfig+0x2fe>
 8002500:	2310      	movs	r3, #16
 8002502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002506:	e0c8      	b.n	800269a <UART_SetConfig+0x2fe>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5e      	ldr	r2, [pc, #376]	; (8002688 <UART_SetConfig+0x2ec>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d125      	bne.n	800255e <UART_SetConfig+0x1c2>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <UART_SetConfig+0x2e4>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d016      	beq.n	800254e <UART_SetConfig+0x1b2>
 8002520:	2b30      	cmp	r3, #48	; 0x30
 8002522:	d818      	bhi.n	8002556 <UART_SetConfig+0x1ba>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d00a      	beq.n	800253e <UART_SetConfig+0x1a2>
 8002528:	2b20      	cmp	r3, #32
 800252a:	d814      	bhi.n	8002556 <UART_SetConfig+0x1ba>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <UART_SetConfig+0x19a>
 8002530:	2b10      	cmp	r3, #16
 8002532:	d008      	beq.n	8002546 <UART_SetConfig+0x1aa>
 8002534:	e00f      	b.n	8002556 <UART_SetConfig+0x1ba>
 8002536:	2300      	movs	r3, #0
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800253c:	e0ad      	b.n	800269a <UART_SetConfig+0x2fe>
 800253e:	2302      	movs	r3, #2
 8002540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002544:	e0a9      	b.n	800269a <UART_SetConfig+0x2fe>
 8002546:	2304      	movs	r3, #4
 8002548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800254c:	e0a5      	b.n	800269a <UART_SetConfig+0x2fe>
 800254e:	2308      	movs	r3, #8
 8002550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002554:	e0a1      	b.n	800269a <UART_SetConfig+0x2fe>
 8002556:	2310      	movs	r3, #16
 8002558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800255c:	e09d      	b.n	800269a <UART_SetConfig+0x2fe>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <UART_SetConfig+0x2f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d125      	bne.n	80025b4 <UART_SetConfig+0x218>
 8002568:	4b45      	ldr	r3, [pc, #276]	; (8002680 <UART_SetConfig+0x2e4>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002572:	2bc0      	cmp	r3, #192	; 0xc0
 8002574:	d016      	beq.n	80025a4 <UART_SetConfig+0x208>
 8002576:	2bc0      	cmp	r3, #192	; 0xc0
 8002578:	d818      	bhi.n	80025ac <UART_SetConfig+0x210>
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d00a      	beq.n	8002594 <UART_SetConfig+0x1f8>
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d814      	bhi.n	80025ac <UART_SetConfig+0x210>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <UART_SetConfig+0x1f0>
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d008      	beq.n	800259c <UART_SetConfig+0x200>
 800258a:	e00f      	b.n	80025ac <UART_SetConfig+0x210>
 800258c:	2300      	movs	r3, #0
 800258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002592:	e082      	b.n	800269a <UART_SetConfig+0x2fe>
 8002594:	2302      	movs	r3, #2
 8002596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800259a:	e07e      	b.n	800269a <UART_SetConfig+0x2fe>
 800259c:	2304      	movs	r3, #4
 800259e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025a2:	e07a      	b.n	800269a <UART_SetConfig+0x2fe>
 80025a4:	2308      	movs	r3, #8
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025aa:	e076      	b.n	800269a <UART_SetConfig+0x2fe>
 80025ac:	2310      	movs	r3, #16
 80025ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b2:	e072      	b.n	800269a <UART_SetConfig+0x2fe>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a35      	ldr	r2, [pc, #212]	; (8002690 <UART_SetConfig+0x2f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12a      	bne.n	8002614 <UART_SetConfig+0x278>
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <UART_SetConfig+0x2e4>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025cc:	d01a      	beq.n	8002604 <UART_SetConfig+0x268>
 80025ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d2:	d81b      	bhi.n	800260c <UART_SetConfig+0x270>
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d00c      	beq.n	80025f4 <UART_SetConfig+0x258>
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	d815      	bhi.n	800260c <UART_SetConfig+0x270>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <UART_SetConfig+0x250>
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d008      	beq.n	80025fc <UART_SetConfig+0x260>
 80025ea:	e00f      	b.n	800260c <UART_SetConfig+0x270>
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025f2:	e052      	b.n	800269a <UART_SetConfig+0x2fe>
 80025f4:	2302      	movs	r3, #2
 80025f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025fa:	e04e      	b.n	800269a <UART_SetConfig+0x2fe>
 80025fc:	2304      	movs	r3, #4
 80025fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002602:	e04a      	b.n	800269a <UART_SetConfig+0x2fe>
 8002604:	2308      	movs	r3, #8
 8002606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800260a:	e046      	b.n	800269a <UART_SetConfig+0x2fe>
 800260c:	2310      	movs	r3, #16
 800260e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002612:	e042      	b.n	800269a <UART_SetConfig+0x2fe>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <UART_SetConfig+0x2dc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d13a      	bne.n	8002694 <UART_SetConfig+0x2f8>
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <UART_SetConfig+0x2e4>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800262c:	d01a      	beq.n	8002664 <UART_SetConfig+0x2c8>
 800262e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002632:	d81b      	bhi.n	800266c <UART_SetConfig+0x2d0>
 8002634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002638:	d00c      	beq.n	8002654 <UART_SetConfig+0x2b8>
 800263a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263e:	d815      	bhi.n	800266c <UART_SetConfig+0x2d0>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <UART_SetConfig+0x2b0>
 8002644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002648:	d008      	beq.n	800265c <UART_SetConfig+0x2c0>
 800264a:	e00f      	b.n	800266c <UART_SetConfig+0x2d0>
 800264c:	2300      	movs	r3, #0
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002652:	e022      	b.n	800269a <UART_SetConfig+0x2fe>
 8002654:	2302      	movs	r3, #2
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800265a:	e01e      	b.n	800269a <UART_SetConfig+0x2fe>
 800265c:	2304      	movs	r3, #4
 800265e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002662:	e01a      	b.n	800269a <UART_SetConfig+0x2fe>
 8002664:	2308      	movs	r3, #8
 8002666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800266a:	e016      	b.n	800269a <UART_SetConfig+0x2fe>
 800266c:	2310      	movs	r3, #16
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002672:	e012      	b.n	800269a <UART_SetConfig+0x2fe>
 8002674:	cfff69f3 	.word	0xcfff69f3
 8002678:	40008000 	.word	0x40008000
 800267c:	40013800 	.word	0x40013800
 8002680:	40021000 	.word	0x40021000
 8002684:	40004400 	.word	0x40004400
 8002688:	40004800 	.word	0x40004800
 800268c:	40004c00 	.word	0x40004c00
 8002690:	40005000 	.word	0x40005000
 8002694:	2310      	movs	r3, #16
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4aae      	ldr	r2, [pc, #696]	; (8002958 <UART_SetConfig+0x5bc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f040 8097 	bne.w	80027d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d823      	bhi.n	80026f6 <UART_SetConfig+0x35a>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <UART_SetConfig+0x318>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026d9 	.word	0x080026d9
 80026b8:	080026f7 	.word	0x080026f7
 80026bc:	080026e1 	.word	0x080026e1
 80026c0:	080026f7 	.word	0x080026f7
 80026c4:	080026e7 	.word	0x080026e7
 80026c8:	080026f7 	.word	0x080026f7
 80026cc:	080026f7 	.word	0x080026f7
 80026d0:	080026f7 	.word	0x080026f7
 80026d4:	080026ef 	.word	0x080026ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d8:	f7ff fa4e 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026de:	e010      	b.n	8002702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e0:	4b9e      	ldr	r3, [pc, #632]	; (800295c <UART_SetConfig+0x5c0>)
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026e4:	e00d      	b.n	8002702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e6:	f7ff f9d9 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 80026ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026ec:	e009      	b.n	8002702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026f4:	e005      	b.n	8002702 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8130 	beq.w	800296a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4a94      	ldr	r2, [pc, #592]	; (8002960 <UART_SetConfig+0x5c4>)
 8002710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002714:	461a      	mov	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	fbb3 f3f2 	udiv	r3, r3, r2
 800271c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	429a      	cmp	r2, r3
 800272c:	d305      	bcc.n	800273a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	429a      	cmp	r2, r3
 8002738:	d903      	bls.n	8002742 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002740:	e113      	b.n	800296a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	2200      	movs	r2, #0
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	60fa      	str	r2, [r7, #12]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	4a84      	ldr	r2, [pc, #528]	; (8002960 <UART_SetConfig+0x5c4>)
 8002750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002754:	b29b      	uxth	r3, r3
 8002756:	2200      	movs	r2, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002760:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002764:	f7fd fd58 	bl	8000218 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	020b      	lsls	r3, r1, #8
 800277a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800277e:	0202      	lsls	r2, r0, #8
 8002780:	6979      	ldr	r1, [r7, #20]
 8002782:	6849      	ldr	r1, [r1, #4]
 8002784:	0849      	lsrs	r1, r1, #1
 8002786:	2000      	movs	r0, #0
 8002788:	460c      	mov	r4, r1
 800278a:	4605      	mov	r5, r0
 800278c:	eb12 0804 	adds.w	r8, r2, r4
 8002790:	eb43 0905 	adc.w	r9, r3, r5
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	469a      	mov	sl, r3
 800279c:	4693      	mov	fp, r2
 800279e:	4652      	mov	r2, sl
 80027a0:	465b      	mov	r3, fp
 80027a2:	4640      	mov	r0, r8
 80027a4:	4649      	mov	r1, r9
 80027a6:	f7fd fd37 	bl	8000218 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4613      	mov	r3, r2
 80027b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b8:	d308      	bcc.n	80027cc <UART_SetConfig+0x430>
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c0:	d204      	bcs.n	80027cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a3a      	ldr	r2, [r7, #32]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e0ce      	b.n	800296a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80027d2:	e0ca      	b.n	800296a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027dc:	d166      	bne.n	80028ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80027de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d827      	bhi.n	8002836 <UART_SetConfig+0x49a>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <UART_SetConfig+0x450>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002819 	.word	0x08002819
 80027f4:	08002821 	.word	0x08002821
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002827 	.word	0x08002827
 8002800:	08002837 	.word	0x08002837
 8002804:	08002837 	.word	0x08002837
 8002808:	08002837 	.word	0x08002837
 800280c:	0800282f 	.word	0x0800282f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002810:	f7ff f9b2 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002816:	e014      	b.n	8002842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002818:	f7ff f9c4 	bl	8001ba4 <HAL_RCC_GetPCLK2Freq>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800281e:	e010      	b.n	8002842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002820:	4b4e      	ldr	r3, [pc, #312]	; (800295c <UART_SetConfig+0x5c0>)
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002824:	e00d      	b.n	8002842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002826:	f7ff f939 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800282c:	e009      	b.n	8002842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002834:	e005      	b.n	8002842 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8090 	beq.w	800296a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	4a44      	ldr	r2, [pc, #272]	; (8002960 <UART_SetConfig+0x5c4>)
 8002850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002854:	461a      	mov	r2, r3
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fbb3 f3f2 	udiv	r3, r3, r2
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	441a      	add	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	d916      	bls.n	80028a4 <UART_SetConfig+0x508>
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d212      	bcs.n	80028a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f023 030f 	bic.w	r3, r3, #15
 8002886:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	b29b      	uxth	r3, r3
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	b29a      	uxth	r2, r3
 8002894:	8bfb      	ldrh	r3, [r7, #30]
 8002896:	4313      	orrs	r3, r2
 8002898:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	8bfa      	ldrh	r2, [r7, #30]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	e062      	b.n	800296a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028aa:	e05e      	b.n	800296a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d828      	bhi.n	8002906 <UART_SetConfig+0x56a>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <UART_SetConfig+0x520>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028e1 	.word	0x080028e1
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	080028f1 	.word	0x080028f1
 80028c8:	08002907 	.word	0x08002907
 80028cc:	080028f7 	.word	0x080028f7
 80028d0:	08002907 	.word	0x08002907
 80028d4:	08002907 	.word	0x08002907
 80028d8:	08002907 	.word	0x08002907
 80028dc:	080028ff 	.word	0x080028ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff f94a 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028e6:	e014      	b.n	8002912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e8:	f7ff f95c 	bl	8001ba4 <HAL_RCC_GetPCLK2Freq>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028ee:	e010      	b.n	8002912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <UART_SetConfig+0x5c0>)
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028f4:	e00d      	b.n	8002912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f6:	f7ff f8d1 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028fc:	e009      	b.n	8002912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002904:	e005      	b.n	8002912 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002910:	bf00      	nop
    }

    if (pclk != 0U)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d028      	beq.n	800296a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <UART_SetConfig+0x5c4>)
 800291e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002922:	461a      	mov	r2, r3
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	fbb3 f2f2 	udiv	r2, r3, r2
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	441a      	add	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	d910      	bls.n	8002964 <UART_SetConfig+0x5c8>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d20c      	bcs.n	8002964 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	b29a      	uxth	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	e009      	b.n	800296a <UART_SetConfig+0x5ce>
 8002956:	bf00      	nop
 8002958:	40008000 	.word	0x40008000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	08003a9c 	.word	0x08003a9c
      }
      else
      {
        ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2201      	movs	r2, #1
 800296e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2201      	movs	r2, #1
 8002976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2200      	movs	r2, #0
 8002984:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002986:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800298a:	4618      	mov	r0, r3
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01a      	beq.n	8002aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d10a      	bne.n	8002aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ae8:	f7fd ffd4 	bl	8000a94 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d10e      	bne.n	8002b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f82f 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e025      	b.n	8002b66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d10e      	bne.n	8002b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f819 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e00f      	b.n	8002b66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b09c      	sub	sp, #112	; 0x70
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7e:	e0a9      	b.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	f000 80a5 	beq.w	8002cd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7fd ff83 	bl	8000a94 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d140      	bne.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e6      	bne.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e5      	bne.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e069      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d051      	beq.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3e:	d149      	bne.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e6      	bne.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3308      	adds	r3, #8
 8002c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c9c:	623a      	str	r2, [r7, #32]
 8002c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	69f9      	ldr	r1, [r7, #28]
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	e841 2300 	strex	r3, r2, [r1]
 8002ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e5      	bne.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e010      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	f43f af46 	beq.w	8002b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3770      	adds	r7, #112	; 0x70
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b0a3      	sub	sp, #140	; 0x8c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d10e      	bne.n	8002d52 <UART_Start_Receive_IT+0x52>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <UART_Start_Receive_IT+0x48>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d46:	e02d      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d50:	e028      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <UART_Start_Receive_IT+0x76>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <UART_Start_Receive_IT+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d6a:	e01b      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	227f      	movs	r2, #127	; 0x7f
 8002d70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d74:	e016      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d7e:	d10d      	bne.n	8002d9c <UART_Start_Receive_IT+0x9c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <UART_Start_Receive_IT+0x92>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	227f      	movs	r2, #127	; 0x7f
 8002d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d90:	e008      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	223f      	movs	r2, #63	; 0x3f
 8002d96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d9a:	e003      	b.n	8002da4 <UART_Start_Receive_IT+0xa4>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	; 0x22
 8002db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3308      	adds	r3, #8
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8002dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002dd8:	673a      	str	r2, [r7, #112]	; 0x70
 8002dda:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002dde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8002de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e3      	bne.n	8002db4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df4:	d153      	bne.n	8002e9e <UART_Start_Receive_IT+0x19e>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d34d      	bcc.n	8002e9e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	d107      	bne.n	8002e1c <UART_Start_Receive_IT+0x11c>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <UART_Start_Receive_IT+0x244>)
 8002e18:	671a      	str	r2, [r3, #112]	; 0x70
 8002e1a:	e002      	b.n	8002e22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a4a      	ldr	r2, [pc, #296]	; (8002f48 <UART_Start_Receive_IT+0x248>)
 8002e20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01a      	beq.n	8002e68 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e56:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e4      	bne.n	8002e32 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e88:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_Start_Receive_IT+0x168>
 8002e9c:	e04a      	b.n	8002f34 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d107      	bne.n	8002eb8 <UART_Start_Receive_IT+0x1b8>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <UART_Start_Receive_IT+0x24c>)
 8002eb4:	671a      	str	r2, [r3, #112]	; 0x70
 8002eb6:	e002      	b.n	8002ebe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <UART_Start_Receive_IT+0x250>)
 8002ebc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d019      	beq.n	8002f02 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8002ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
 8002eee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e6      	bne.n	8002ece <UART_Start_Receive_IT+0x1ce>
 8002f00:	e018      	b.n	8002f34 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f043 0320 	orr.w	r3, r3, #32
 8002f16:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e6      	bne.n	8002f02 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	378c      	adds	r7, #140	; 0x8c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	0800350d 	.word	0x0800350d
 8002f48:	08003215 	.word	0x08003215
 8002f4c:	080030b5 	.word	0x080030b5
 8002f50:	08002f55 	.word	0x08002f55

08002f54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b096      	sub	sp, #88	; 0x58
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	2b22      	cmp	r3, #34	; 0x22
 8002f6e:	f040 8095 	bne.w	800309c <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002f7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002f80:	b2d9      	uxtb	r1, r3
 8002f82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d178      	bne.n	80030ac <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fce:	653b      	str	r3, [r7, #80]	; 0x50
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300c:	633a      	str	r2, [r7, #48]	; 0x30
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d12e      	bne.n	8003094 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	60fb      	str	r3, [r7, #12]
   return(result);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f023 0310 	bic.w	r3, r3, #16
 8003050:	64bb      	str	r3, [r7, #72]	; 0x48
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	617b      	str	r3, [r7, #20]
   return(result);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e6      	bne.n	800303c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d103      	bne.n	8003084 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff f979 	bl	8002384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003092:	e00b      	b.n	80030ac <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd fb93 	bl	80007c0 <HAL_UART_RxCpltCallback>
}
 800309a:	e007      	b.n	80030ac <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0208 	orr.w	r2, r2, #8
 80030aa:	619a      	str	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	3758      	adds	r7, #88	; 0x58
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b096      	sub	sp, #88	; 0x58
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80030c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	2b22      	cmp	r3, #34	; 0x22
 80030ce:	f040 8095 	bne.w	80031fc <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80030e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80030e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d178      	bne.n	800320c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	643b      	str	r3, [r7, #64]	; 0x40
 800313a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800313e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e6      	bne.n	800311a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	61fb      	str	r3, [r7, #28]
   return(result);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12e      	bne.n	80031f4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	613b      	str	r3, [r7, #16]
   return(result);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e6      	bne.n	800319c <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d103      	bne.n	80031e4 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2210      	movs	r2, #16
 80031e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff f8c9 	bl	8002384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031f2:	e00b      	b.n	800320c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd fae3 	bl	80007c0 <HAL_UART_RxCpltCallback>
}
 80031fa:	e007      	b.n	800320c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	619a      	str	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	3758      	adds	r7, #88	; 0x58
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0a6      	sub	sp, #152	; 0x98
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003222:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	f040 814f 	bne.w	80034ee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003256:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800325a:	e0f6      	b.n	800344a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003266:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003270:	b2da      	uxtb	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	400a      	ands	r2, r1
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80032a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d053      	beq.n	8003356 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <UART_RxISR_8BIT_FIFOEN+0xca>
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80032ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2202      	movs	r2, #2
 80032fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d011      	beq.n	800333e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800331a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2204      	movs	r2, #4
 800332c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003334:	f043 0202 	orr.w	r2, r3, #2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff f811 	bl	8002370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d173      	bne.n	800344a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003384:	66bb      	str	r3, [r7, #104]	; 0x68
 8003386:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800338a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e4      	bne.n	8003362 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80033a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3308      	adds	r3, #8
 80033ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033bc:	657a      	str	r2, [r7, #84]	; 0x54
 80033be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e3      	bne.n	8003398 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d12e      	bne.n	8003444 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	f023 0310 	bic.w	r3, r3, #16
 8003400:	67bb      	str	r3, [r7, #120]	; 0x78
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340a:	643b      	str	r3, [r7, #64]	; 0x40
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e6      	bne.n	80033ec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d103      	bne.n	8003434 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2210      	movs	r2, #16
 8003432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe ffa1 	bl	8002384 <HAL_UARTEx_RxEventCallback>
 8003442:	e002      	b.n	800344a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd f9bb 	bl	80007c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800344a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8003452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	f47f aefe 	bne.w	800325c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800346a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800346e:	2b00      	cmp	r3, #0
 8003470:	d045      	beq.n	80034fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003478:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800347c:	429a      	cmp	r2, r3
 800347e:	d23e      	bcs.n	80034fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003496:	673b      	str	r3, [r7, #112]	; 0x70
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80034a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a14      	ldr	r2, [pc, #80]	; (8003508 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80034b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6979      	ldr	r1, [r7, #20]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	613b      	str	r3, [r7, #16]
   return(result);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e6      	bne.n	80034ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034ec:	e007      	b.n	80034fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0208 	orr.w	r2, r2, #8
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	3798      	adds	r7, #152	; 0x98
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	08002f55 	.word	0x08002f55

0800350c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b0a8      	sub	sp, #160	; 0xa0
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800351a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	2b22      	cmp	r3, #34	; 0x22
 8003544:	f040 8153 	bne.w	80037ee <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800354e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003552:	e0fa      	b.n	800374a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8003566:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800356a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800356e:	4013      	ands	r3, r2
 8003570:	b29a      	uxth	r2, r3
 8003572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	1c9a      	adds	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800359e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d053      	beq.n	8003652 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d011      	beq.n	80035da <UART_RxISR_16BIT_FIFOEN+0xce>
 80035b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80035e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800360a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d011      	beq.n	800363a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2204      	movs	r2, #4
 8003628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe fe93 	bl	8002370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d175      	bne.n	800374a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800366c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003682:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800368e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e4      	bne.n	800365e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80036be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e1      	bne.n	8003694 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d12e      	bne.n	8003744 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800370a:	647b      	str	r3, [r7, #68]	; 0x44
 800370c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d103      	bne.n	8003734 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fe fe21 	bl	8002384 <HAL_UARTEx_RxEventCallback>
 8003742:	e002      	b.n	800374a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd f83b 	bl	80007c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800374a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <UART_RxISR_16BIT_FIFOEN+0x254>
 8003752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f aefa 	bne.w	8003554 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003766:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800376a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800376e:	2b00      	cmp	r3, #0
 8003770:	d045      	beq.n	80037fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003778:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800377c:	429a      	cmp	r2, r3
 800377e:	d23e      	bcs.n	80037fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	623b      	str	r3, [r7, #32]
   return(result);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	677b      	str	r3, [r7, #116]	; 0x74
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037a0:	633a      	str	r2, [r7, #48]	; 0x30
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80037b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	673b      	str	r3, [r7, #112]	; 0x70
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ec:	e007      	b.n	80037fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0208 	orr.w	r2, r2, #8
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	37a0      	adds	r7, #160	; 0xa0
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	080030b5 	.word	0x080030b5

0800380c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UARTEx_DisableFifoMode+0x16>
 800381e:	2302      	movs	r3, #2
 8003820:	e027      	b.n	8003872 <HAL_UARTEx_DisableFifoMode+0x66>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003892:	2302      	movs	r3, #2
 8003894:	e02d      	b.n	80038f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f850 	bl	8003978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800390e:	2302      	movs	r3, #2
 8003910:	e02d      	b.n	800396e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2224      	movs	r2, #36	; 0x24
 800391e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f812 	bl	8003978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003984:	2b00      	cmp	r3, #0
 8003986:	d108      	bne.n	800399a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003998:	e031      	b.n	80039fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800399a:	2308      	movs	r3, #8
 800399c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800399e:	2308      	movs	r3, #8
 80039a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	0e5b      	lsrs	r3, r3, #25
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	0f5b      	lsrs	r3, r3, #29
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	7b3a      	ldrb	r2, [r7, #12]
 80039c6:	4911      	ldr	r1, [pc, #68]	; (8003a0c <UARTEx_SetNbDataToProcess+0x94>)
 80039c8:	5c8a      	ldrb	r2, [r1, r2]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039ce:	7b3a      	ldrb	r2, [r7, #12]
 80039d0:	490f      	ldr	r1, [pc, #60]	; (8003a10 <UARTEx_SetNbDataToProcess+0x98>)
 80039d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	7b7a      	ldrb	r2, [r7, #13]
 80039e4:	4909      	ldr	r1, [pc, #36]	; (8003a0c <UARTEx_SetNbDataToProcess+0x94>)
 80039e6:	5c8a      	ldrb	r2, [r1, r2]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039ec:	7b7a      	ldrb	r2, [r7, #13]
 80039ee:	4908      	ldr	r1, [pc, #32]	; (8003a10 <UARTEx_SetNbDataToProcess+0x98>)
 80039f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	08003ab4 	.word	0x08003ab4
 8003a10:	08003abc 	.word	0x08003abc

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4d0d      	ldr	r5, [pc, #52]	; (8003a4c <__libc_init_array+0x38>)
 8003a18:	4c0d      	ldr	r4, [pc, #52]	; (8003a50 <__libc_init_array+0x3c>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	4d0b      	ldr	r5, [pc, #44]	; (8003a54 <__libc_init_array+0x40>)
 8003a26:	4c0c      	ldr	r4, [pc, #48]	; (8003a58 <__libc_init_array+0x44>)
 8003a28:	f000 f820 	bl	8003a6c <_init>
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	2600      	movs	r6, #0
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	08003acc 	.word	0x08003acc
 8003a50:	08003acc 	.word	0x08003acc
 8003a54:	08003acc 	.word	0x08003acc
 8003a58:	08003ad0 	.word	0x08003ad0

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
